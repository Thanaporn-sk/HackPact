!function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=3)}([function(t,e,i){var r;void 0===(r=function(){return function(){"use strict";var t;function e(e){e(t)}
/**
	 *  Tone.js
	 *  @author Yotam Mann
	 *  @license http://opensource.org/licenses/MIT MIT License
	 *  @copyright 2014-2018 Yotam Mann
	 */return function(e){t=e()}(function(){var t=function(){if(!(this instanceof t))throw new Error("constructor needs to be called with the 'new' keyword")};t.prototype.toString=function(){for(var e in t){var i=e[0].match(/^[A-Z]$/),r=t[e]===this.constructor;if(t.isFunction(t[e])&&i&&r)return e}return"Tone"},t.prototype.dispose=function(){return this},t.prototype.set=function(e,i,r){if(t.isObject(e))r=i;else if(t.isString(e)){var n={};n[e]=i,e=n}t:for(var o in e){i=e[o];var s=this;if(-1!==o.indexOf(".")){for(var a=o.split("."),h=0;h<a.length-1;h++)if((s=s[a[h]])instanceof t){a.splice(0,h+1);var l=a.join(".");s.set(l,i);continue t}o=a[a.length-1]}var u=s[o];t.isUndef(u)||(t.Signal&&u instanceof t.Signal||t.Param&&u instanceof t.Param?u.value!==i&&(t.isUndef(r)?u.value=i:u.rampTo(i,r)):u instanceof AudioParam?u.value!==i&&(u.value=i):t.TimeBase&&u instanceof t.TimeBase?s[o]=i:u instanceof t?u.set(i):u!==i&&(s[o]=i))}return this},t.prototype.get=function(e){t.isUndef(e)?e=this._collectDefaults(this.constructor):t.isString(e)&&(e=[e]);for(var i={},r=0;r<e.length;r++){var n=e[r],o=this,s=i;if(-1!==n.indexOf(".")){for(var a=n.split("."),h=0;h<a.length-1;h++){var l=a[h];s[l]=s[l]||{},s=s[l],o=o[l]}n=a[a.length-1]}var u=o[n];t.isObject(e[n])?s[n]=u.get():t.Signal&&u instanceof t.Signal?s[n]=u.value:t.Param&&u instanceof t.Param?s[n]=u.value:u instanceof AudioParam?s[n]=u.value:u instanceof t?s[n]=u.get():!t.isFunction(u)&&t.isDefined(u)&&(s[n]=u)}return i},t.prototype._collectDefaults=function(e){var i=[];if(t.isDefined(e.defaults)&&(i=Object.keys(e.defaults)),t.isDefined(e._super))for(var r=this._collectDefaults(e._super),n=0;n<r.length;n++)-1===i.indexOf(r[n])&&i.push(r[n]);return i},t.defaults=function(e,i,r){var n={};if(1===e.length&&t.isObject(e[0]))n=e[0];else for(var o=0;o<i.length;o++)n[i[o]]=e[o];return t.isDefined(r.defaults)?t.defaultArg(n,r.defaults):t.isObject(r)?t.defaultArg(n,r):n},t.defaultArg=function(e,i){if(t.isObject(e)&&t.isObject(i)){var r={};for(var n in e)r[n]=t.defaultArg(i[n],e[n]);for(var o in i)r[o]=t.defaultArg(e[o],i[o]);return r}return t.isUndef(e)?i:e},t.connectSeries=function(){for(var e=arguments[0],i=1;i<arguments.length;i++){var r=arguments[i];e.connect(r),e=r}return t},t.isUndef=function(t){return void 0===t},t.isDefined=function(e){return!t.isUndef(e)},t.isFunction=function(t){return"function"==typeof t},t.isNumber=function(t){return"number"==typeof t},t.isObject=function(t){return"[object Object]"===Object.prototype.toString.call(t)&&t.constructor===Object},t.isBoolean=function(t){return"boolean"==typeof t},t.isArray=function(t){return Array.isArray(t)},t.isString=function(t){return"string"==typeof t},t.isNote=function(e){return t.isString(e)&&/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(e)},t.noOp=function(){},t.prototype._readOnly=function(t){if(Array.isArray(t))for(var e=0;e<t.length;e++)this._readOnly(t[e]);else Object.defineProperty(this,t,{writable:!1,enumerable:!0})},t.prototype._writable=function(t){if(Array.isArray(t))for(var e=0;e<t.length;e++)this._writable(t[e]);else Object.defineProperty(this,t,{writable:!0})},t.State={Started:"started",Stopped:"stopped",Paused:"paused"},t.equalPowerScale=function(t){var e=.5*Math.PI;return Math.sin(t*e)},t.dbToGain=function(t){return Math.pow(10,t/20)},t.gainToDb=function(t){return Math.log(t)/Math.LN10*20},t.intervalToFrequencyRatio=function(t){return Math.pow(2,t/12)},t.prototype.now=function(){return t.context.now()},t.now=function(){return t.context.now()},t.extend=function(e,i){function r(){}t.isUndef(i)&&(i=t),r.prototype=i.prototype,e.prototype=new r,e.prototype.constructor=e,e._super=i};var e=null;return Object.defineProperty(t,"context",{get:function(){return e},set:function(i){e=t.Context&&i instanceof t.Context?i:new t.Context(i),t.Context.emit("init",e)}}),Object.defineProperty(t.prototype,"context",{get:function(){return t.context}}),t.setContext=function(e){t.context=e},Object.defineProperty(t.prototype,"blockTime",{get:function(){return 128/this.context.sampleRate}}),Object.defineProperty(t.prototype,"sampleTime",{get:function(){return 1/this.context.sampleRate}}),Object.defineProperty(t,"supported",{get:function(){var t=window.hasOwnProperty("AudioContext")||window.hasOwnProperty("webkitAudioContext"),e=window.hasOwnProperty("Promise"),i=window.hasOwnProperty("Worker");return t&&e&&i}}),Object.defineProperty(t,"initialized",{get:function(){return null!==e}}),t.getContext=function(e){if(t.initialized)e(t.context);else{var i=function(){e(t.context),t.Context.off("init",i)};t.Context.on("init",i)}return t},t.version="r12",t}),e(function(t){return t.Emitter=function(){t.call(this),this._events={}},t.extend(t.Emitter),t.Emitter.prototype.on=function(t,e){for(var i=t.split(/\W+/),r=0;r<i.length;r++){var n=i[r];this._events.hasOwnProperty(n)||(this._events[n]=[]),this._events[n].push(e)}return this},t.Emitter.prototype.once=function(t,e){var i=function(){e.apply(this,arguments),this.off(t,i)}.bind(this);return this.on(t,i),this},t.Emitter.prototype.off=function(e,i){for(var r=e.split(/\W+/),n=0;n<r.length;n++)if(e=r[n],this._events.hasOwnProperty(e))if(t.isUndef(i))this._events[e]=[];else for(var o=this._events[e],s=0;s<o.length;s++)o[s]===i&&o.splice(s,1);return this},t.Emitter.prototype.emit=function(t){if(this._events){var e=Array.apply(null,arguments).slice(1);if(this._events.hasOwnProperty(t))for(var i=this._events[t].slice(0),r=0,n=i.length;r<n;r++)i[r].apply(this,e)}return this},t.Emitter.mixin=function(e){var i=["on","once","off","emit"];e._events={};for(var r=0;r<i.length;r++){var n=i[r],o=t.Emitter.prototype[n];e[n]=o}return t.Emitter},t.Emitter.prototype.dispose=function(){return t.prototype.dispose.call(this),this._events=null,this},t.Emitter}),e(function(t){return t.Timeline=function(){var e=t.defaults(arguments,["memory"],t.Timeline);t.call(this),this._timeline=[],this.memory=e.memory},t.extend(t.Timeline),t.Timeline.defaults={memory:1/0},Object.defineProperty(t.Timeline.prototype,"length",{get:function(){return this._timeline.length}}),t.Timeline.prototype.add=function(e){if(t.isUndef(e.time))throw new Error("Tone.Timeline: events must have a time attribute");e.time=e.time.valueOf();var i=this._search(e.time);if(this._timeline.splice(i+1,0,e),this.length>this.memory){var r=this.length-this.memory;this._timeline.splice(0,r)}return this},t.Timeline.prototype.remove=function(t){var e=this._timeline.indexOf(t);return-1!==e&&this._timeline.splice(e,1),this},t.Timeline.prototype.get=function(e,i){i=t.defaultArg(i,"time");var r=this._search(e,i);return-1!==r?this._timeline[r]:null},t.Timeline.prototype.peek=function(){return this._timeline[0]},t.Timeline.prototype.shift=function(){return this._timeline.shift()},t.Timeline.prototype.getAfter=function(e,i){i=t.defaultArg(i,"time");var r=this._search(e,i);return r+1<this._timeline.length?this._timeline[r+1]:null},t.Timeline.prototype.getBefore=function(e,i){i=t.defaultArg(i,"time");var r=this._timeline.length;if(r>0&&this._timeline[r-1][i]<e)return this._timeline[r-1];var n=this._search(e,i);return n-1>=0?this._timeline[n-1]:null},t.Timeline.prototype.cancel=function(t){if(this._timeline.length>1){var e=this._search(t);if(e>=0)if(this._timeline[e].time===t){for(var i=e;i>=0&&this._timeline[i].time===t;i--)e=i;this._timeline=this._timeline.slice(0,e)}else this._timeline=this._timeline.slice(0,e+1);else this._timeline=[]}else 1===this._timeline.length&&this._timeline[0].time>=t&&(this._timeline=[]);return this},t.Timeline.prototype.cancelBefore=function(t){var e=this._search(t);return e>=0&&(this._timeline=this._timeline.slice(e+1)),this},t.Timeline.prototype.previousEvent=function(t){var e=this._timeline.indexOf(t);return e>0?this._timeline[e-1]:null},t.Timeline.prototype._search=function(e,i){if(0===this._timeline.length)return-1;i=t.defaultArg(i,"time");var r=0,n=this._timeline.length,o=n;if(n>0&&this._timeline[n-1][i]<=e)return n-1;for(;r<o;){var s=Math.floor(r+(o-r)/2),a=this._timeline[s],h=this._timeline[s+1];if(a[i]===e){for(var l=s;l<this._timeline.length;l++)this._timeline[l][i]===e&&(s=l);return s}if(a[i]<e&&h[i]>e)return s;a[i]>e?o=s:r=s+1}return-1},t.Timeline.prototype._iterate=function(e,i,r){i=t.defaultArg(i,0),r=t.defaultArg(r,this._timeline.length-1),this._timeline.slice(i,r+1).forEach(function(t){e.call(this,t)}.bind(this))},t.Timeline.prototype.forEach=function(t){return this._iterate(t),this},t.Timeline.prototype.forEachBefore=function(t,e){var i=this._search(t);return-1!==i&&this._iterate(e,0,i),this},t.Timeline.prototype.forEachAfter=function(t,e){var i=this._search(t);return this._iterate(e,i+1),this},t.Timeline.prototype.forEachBetween=function(t,e,i){var r=this._search(t),n=this._search(e);return-1!==r&&-1!==n?(this._timeline[r].time!==t&&(r+=1),this._timeline[n].time===e&&(n-=1),this._iterate(i,r,n)):-1===r&&this._iterate(i,0,n),this},t.Timeline.prototype.forEachFrom=function(t,e){for(var i=this._search(t);i>=0&&this._timeline[i].time>=t;)i--;return this._iterate(e,i+1),this},t.Timeline.prototype.forEachAtTime=function(t,e){var i=this._search(t);return-1!==i&&this._iterate(function(i){i.time===t&&e.call(this,i)},0,i),this},t.Timeline.prototype.dispose=function(){return t.prototype.dispose.call(this),this._timeline=null,this},t.Timeline}),e(function(t){t.supported&&(!window.hasOwnProperty("OfflineAudioContext")&&window.hasOwnProperty("webkitOfflineAudioContext")&&(window.OfflineAudioContext=window.webkitOfflineAudioContext),new OfflineAudioContext(1,1,44100).startRendering()instanceof Promise||(OfflineAudioContext.prototype._native_startRendering=OfflineAudioContext.prototype.startRendering,OfflineAudioContext.prototype.startRendering=function(){return new Promise(function(t){this.oncomplete=function(e){t(e.renderedBuffer)},this._native_startRendering()}.bind(this))}))}),e(function(t){if(t.supported){!window.hasOwnProperty("AudioContext")&&window.hasOwnProperty("webkitAudioContext")&&(window.AudioContext=window.webkitAudioContext),AudioContext.prototype.close||(AudioContext.prototype.close=function(){return t.isFunction(this.suspend)&&this.suspend(),Promise.resolve()}),AudioContext.prototype.resume||(AudioContext.prototype.resume=function(){return Promise.resolve()}),!AudioContext.prototype.createGain&&AudioContext.prototype.createGainNode&&(AudioContext.prototype.createGain=AudioContext.prototype.createGainNode),!AudioContext.prototype.createDelay&&AudioContext.prototype.createDelayNode&&(AudioContext.prototype.createDelay=AudioContext.prototype.createDelayNode);var e=!1,i=new OfflineAudioContext(1,1,44100),r=new Uint32Array([1179011410,48,1163280727,544501094,16,131073,44100,176400,1048580,1635017060,8,0,0,0,0]).buffer;try{i.decodeAudioData(r)instanceof Promise&&(e=!0)}catch(t){e=!1}e||(AudioContext.prototype._native_decodeAudioData=AudioContext.prototype.decodeAudioData,AudioContext.prototype.decodeAudioData=function(t){return new Promise(function(e,i){this._native_decodeAudioData(t,e,i)}.bind(this))})}}),e(function(t){t.Context=function(){t.Emitter.call(this);var i=t.defaults(arguments,["context"],t.Context);if(!i.context&&(i.context=new window.AudioContext,!i.context))throw new Error("could not create AudioContext. Possibly too many AudioContexts running already.");for(var r in this._context=i.context,this._context)this._defineProperty(this._context,r);this._latencyHint=i.latencyHint,this._constants={},this.lookAhead=i.lookAhead,this._computedUpdateInterval=0,this._ticker=new e(this.emit.bind(this,"tick"),i.clockSource,i.updateInterval),this._timeouts=new t.Timeline,this._timeoutIds=0,this.on("tick",this._timeoutLoop.bind(this))},t.extend(t.Context,t.Emitter),t.Emitter.mixin(t.Context),t.Context.defaults={clockSource:"worker",latencyHint:"interactive",lookAhead:.1,updateInterval:.03},t.Context.prototype._defineProperty=function(e,i){t.isUndef(this[i])&&Object.defineProperty(this,i,{get:function(){return"function"==typeof e[i]?e[i].bind(e):e[i]},set:function(t){e[i]=t}})},t.Context.prototype.now=function(){return this._context.currentTime+this.lookAhead},t.Context.prototype.ready=function(){return new Promise(function(t){"running"===this._context.state?t():this._context.resume().then(function(){t()})}.bind(this))},t.Context.prototype.close=function(){return this._context.close().then(function(){t.Context.emit("close",this)}.bind(this))},t.Context.prototype.getConstant=function(t){if(this._constants[t])return this._constants[t];for(var e=this._context.createBuffer(1,128,this._context.sampleRate),i=e.getChannelData(0),r=0;r<i.length;r++)i[r]=t;var n=this._context.createBufferSource();return n.channelCount=1,n.channelCountMode="explicit",n.buffer=e,n.loop=!0,n.start(0),this._constants[t]=n,n},t.Context.prototype._timeoutLoop=function(){for(var t=this.now();this._timeouts&&this._timeouts.length&&this._timeouts.peek().time<=t;)this._timeouts.shift().callback()},t.Context.prototype.setTimeout=function(t,e){this._timeoutIds++;var i=this.now();return this._timeouts.add({callback:t,time:i+e,id:this._timeoutIds}),this._timeoutIds},t.Context.prototype.clearTimeout=function(t){return this._timeouts.forEach(function(e){e.id===t&&this.remove(e)}),this},Object.defineProperty(t.Context.prototype,"updateInterval",{get:function(){return this._ticker.updateInterval},set:function(t){this._ticker.updateInterval=t}}),Object.defineProperty(t.Context.prototype,"clockSource",{get:function(){return this._ticker.type},set:function(t){this._ticker.type=t}}),Object.defineProperty(t.Context.prototype,"latencyHint",{get:function(){return this._latencyHint},set:function(e){var i=e;if(this._latencyHint=e,t.isString(e))switch(e){case"interactive":i=.1,this._context.latencyHint=e;break;case"playback":i=.8,this._context.latencyHint=e;break;case"balanced":i=.25,this._context.latencyHint=e;break;case"fastest":this._context.latencyHint="interactive",i=.01}this.lookAhead=i,this.updateInterval=i/3}}),t.Context.prototype.dispose=function(){return this.close().then(function(){for(var e in t.Emitter.prototype.dispose.call(this),this._ticker.dispose(),this._ticker=null,this._timeouts.dispose(),this._timeouts=null,this._constants)this._constants[e].disconnect();this._constants=null}.bind(this))};var e=function(e,i,r){this._type=i,this._updateInterval=r,this._callback=t.defaultArg(e,t.noOp),this._createClock()};return e.Type={Worker:"worker",Timeout:"timeout",Offline:"offline"},e.prototype._createWorker=function(){window.URL=window.URL||window.webkitURL;var t=new Blob(["var timeoutTime = "+(1e3*this._updateInterval).toFixed(1)+";self.onmessage = function(msg){\ttimeoutTime = parseInt(msg.data);};function tick(){\tsetTimeout(tick, timeoutTime);\tself.postMessage('tick');}tick();"]),e=URL.createObjectURL(t),i=new Worker(e);i.onmessage=this._callback.bind(this),this._worker=i},e.prototype._createTimeout=function(){this._timeout=setTimeout(function(){this._createTimeout(),this._callback()}.bind(this),1e3*this._updateInterval)},e.prototype._createClock=function(){if(this._type===e.Type.Worker)try{this._createWorker()}catch(t){this._type=e.Type.Timeout,this._createClock()}else this._type===e.Type.Timeout&&this._createTimeout()},Object.defineProperty(e.prototype,"updateInterval",{get:function(){return this._updateInterval},set:function(t){this._updateInterval=Math.max(t,128/44100),this._type===e.Type.Worker&&this._worker.postMessage(Math.max(1e3*t,1))}}),Object.defineProperty(e.prototype,"type",{get:function(){return this._type},set:function(t){this._disposeClock(),this._type=t,this._createClock()}}),e.prototype._disposeClock=function(){this._timeout&&(clearTimeout(this._timeout),this._timeout=null),this._worker&&(this._worker.terminate(),this._worker.onmessage=null,this._worker=null)},e.prototype.dispose=function(){this._disposeClock(),this._callback=null},t.getContext(function(){var e=AudioNode.prototype.connect,i=AudioNode.prototype.disconnect;function r(i,r,n){if(i.input)return n=t.defaultArg(n,0),t.isArray(i.input)?this.connect(i.input[n]):this.connect(i.input,r,n);try{return i instanceof AudioNode?(e.call(this,i,r,n),i):(e.call(this,i,r),i)}catch(t){throw new Error("error connecting to node: "+i+"\n"+t)}}AudioNode.prototype.connect!==r&&(AudioNode.prototype.connect=r,AudioNode.prototype.disconnect=function(e,r,n){if(e&&e.input&&t.isArray(e.input))n=t.defaultArg(n,0),this.disconnect(e.input[n],r,0);else if(e&&e.input)this.disconnect(e.input,r,n);else try{i.apply(this,arguments)}catch(t){throw new Error("error disconnecting node: "+e+"\n"+t)}})}),t.supported&&!t.initialized?(t.context=new t.Context,window.TONE_SILENCE_VERSION_LOGGING||console.log("%c * Tone.js "+t.version+" * ","background: #000; color: #fff")):t.supported||console.warn("This browser does not support Tone.js"),t.Context}),e(function(t){return t.AudioNode=function(){t.call(this);var e=t.defaults(arguments,["context"],{context:t.context});this._context=e.context},t.extend(t.AudioNode),Object.defineProperty(t.AudioNode.prototype,"context",{get:function(){return this._context}}),t.AudioNode.prototype.createInsOuts=function(t,e){1===t?this.input=this.context.createGain():t>1&&(this.input=new Array(t)),1===e?this.output=this.context.createGain():e>1&&(this.output=new Array(e))},Object.defineProperty(t.AudioNode.prototype,"channelCount",{get:function(){return this.output.channelCount},set:function(t){return this.output.channelCount=t}}),Object.defineProperty(t.AudioNode.prototype,"channelCountMode",{get:function(){return this.output.channelCountMode},set:function(t){return this.output.channelCountMode=t}}),Object.defineProperty(t.AudioNode.prototype,"channelInterpretation",{get:function(){return this.output.channelInterpretation},set:function(t){return this.output.channelInterpretation=t}}),Object.defineProperty(t.AudioNode.prototype,"numberOfInputs",{get:function(){return this.input?t.isArray(this.input)?this.input.length:1:0}}),Object.defineProperty(t.AudioNode.prototype,"numberOfOutputs",{get:function(){return this.output?t.isArray(this.output)?this.output.length:1:0}}),t.AudioNode.prototype._onConnect=function(){},t.AudioNode.prototype.connect=function(e,i,r){return e._onConnect&&e._onConnect(this),t.isArray(this.output)?(i=t.defaultArg(i,0),this.output[i].connect(e,0,r)):this.output.connect(e,i,r),this},t.AudioNode.prototype.disconnect=function(e,i,r){t.isArray(this.output)?t.isNumber(e)?this.output[e].disconnect():(i=t.defaultArg(i,0),this.output[i].disconnect(e,0,r)):this.output.disconnect.apply(this.output,arguments)},t.AudioNode.prototype.chain=function(){for(var t=this,e=0;e<arguments.length;e++){var i=arguments[e];t.connect(i),t=i}return this},t.AudioNode.prototype.fan=function(){for(var t=0;t<arguments.length;t++)this.connect(arguments[t]);return this},window.AudioNode&&(AudioNode.prototype.chain=t.AudioNode.prototype.chain,AudioNode.prototype.fan=t.AudioNode.prototype.fan),t.AudioNode.prototype.dispose=function(){return t.isDefined(this.input)&&(this.input instanceof AudioNode&&this.input.disconnect(),this.input=null),t.isDefined(this.output)&&(this.output instanceof AudioNode&&this.output.disconnect(),this.output=null),this._context=null,this},t.AudioNode}),e(function(t){return t.SignalBase=function(){t.AudioNode.call(this)},t.extend(t.SignalBase,t.AudioNode),t.SignalBase.prototype.connect=function(e,i,r){return t.Signal&&t.Signal===e.constructor||t.Param&&t.Param===e.constructor?(e._param.cancelScheduledValues(0),e._param.value=0,e.overridden=!0):e instanceof AudioParam&&(e.cancelScheduledValues(0),e.value=0),t.AudioNode.prototype.connect.call(this,e,i,r),this},t.SignalBase}),e(function(t){if(t.supported){var e=navigator.userAgent.toLowerCase();if(e.includes("safari")&&!e.includes("chrome")){var i=function(t){for(var e in this._internalNode=this.input=this.output=t._native_createWaveShaper(),this._curve=null,this._internalNode)this._defineProperty(this._internalNode,e)};Object.defineProperty(i.prototype,"curve",{get:function(){return this._curve},set:function(t){this._curve=t;var e=new Float32Array(t.length+1);e.set(t,1),e[0]=t[0],this._internalNode.curve=e}}),i.prototype._defineProperty=function(e,i){t.isUndef(this[i])&&Object.defineProperty(this,i,{get:function(){return"function"==typeof e[i]?e[i].bind(e):e[i]},set:function(t){e[i]=t}})},AudioContext.prototype._native_createWaveShaper=AudioContext.prototype.createWaveShaper,AudioContext.prototype.createWaveShaper=function(){return new i(this)}}}}),e(function(t){return t.WaveShaper=function(e,i){t.SignalBase.call(this),this._shaper=this.input=this.output=this.context.createWaveShaper(),this._curve=null,Array.isArray(e)?this.curve=e:isFinite(e)||t.isUndef(e)?this._curve=new Float32Array(t.defaultArg(e,1024)):t.isFunction(e)&&(this._curve=new Float32Array(t.defaultArg(i,1024)),this.setMap(e))},t.extend(t.WaveShaper,t.SignalBase),t.WaveShaper.prototype.setMap=function(t){for(var e=new Array(this._curve.length),i=0,r=this._curve.length;i<r;i++){var n=i/(r-1)*2-1;e[i]=t(n,i)}return this.curve=e,this},Object.defineProperty(t.WaveShaper.prototype,"curve",{get:function(){return this._shaper.curve},set:function(t){this._curve=new Float32Array(t),this._shaper.curve=this._curve}}),Object.defineProperty(t.WaveShaper.prototype,"oversample",{get:function(){return this._shaper.oversample},set:function(t){if(!["none","2x","4x"].includes(t))throw new RangeError("Tone.WaveShaper: oversampling must be either 'none', '2x', or '4x'");this._shaper.oversample=t}}),t.WaveShaper.prototype.dispose=function(){return t.SignalBase.prototype.dispose.call(this),this._shaper.disconnect(),this._shaper=null,this._curve=null,this},t.WaveShaper}),e(function(t){return t.TimeBase=function(e,i){if(!(this instanceof t.TimeBase))return new t.TimeBase(e,i);if(this._val=e,this._units=i,t.isUndef(this._units)&&t.isString(this._val)&&parseFloat(this._val)==this._val&&"+"!==this._val.charAt(0))this._val=parseFloat(this._val),this._units=this._defaultUnits;else if(e&&e.constructor===this.constructor)this._val=e._val,this._units=e._units;else if(e instanceof t.TimeBase)switch(this._defaultUnits){case"s":this._val=e.toSeconds();break;case"i":this._val=e.toTicks();break;case"hz":this._val=e.toFrequency();break;case"midi":this._val=e.toMidi();break;default:throw new Error("Unrecognized default units "+this._defaultUnits)}},t.extend(t.TimeBase),t.TimeBase.prototype._expressions={n:{regexp:/^(\d+)n(\.?)$/i,method:function(t,e){t=parseInt(t);var i="."===e?1.5:1;return 1===t?this._beatsToUnits(this._getTimeSignature())*i:this._beatsToUnits(4/t)*i}},t:{regexp:/^(\d+)t$/i,method:function(t){return t=parseInt(t),this._beatsToUnits(8/(3*parseInt(t)))}},m:{regexp:/^(\d+)m$/i,method:function(t){return this._beatsToUnits(parseInt(t)*this._getTimeSignature())}},i:{regexp:/^(\d+)i$/i,method:function(t){return this._ticksToUnits(parseInt(t))}},hz:{regexp:/^(\d+(?:\.\d+)?)hz$/i,method:function(t){return this._frequencyToUnits(parseFloat(t))}},tr:{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/,method:function(t,e,i){var r=0;return t&&"0"!==t&&(r+=this._beatsToUnits(this._getTimeSignature()*parseFloat(t))),e&&"0"!==e&&(r+=this._beatsToUnits(parseFloat(e))),i&&"0"!==i&&(r+=this._beatsToUnits(parseFloat(i)/4)),r}},s:{regexp:/^(\d+(?:\.\d+)?)s$/,method:function(t){return this._secondsToUnits(parseFloat(t))}},samples:{regexp:/^(\d+)samples$/,method:function(t){return parseInt(t)/this.context.sampleRate}},default:{regexp:/^(\d+(?:\.\d+)?)$/,method:function(t){return this._expressions[this._defaultUnits].method.call(this,t)}}},t.TimeBase.prototype._defaultUnits="s",t.TimeBase.prototype._getBpm=function(){return t.Transport?t.Transport.bpm.value:120},t.TimeBase.prototype._getTimeSignature=function(){return t.Transport?t.Transport.timeSignature:4},t.TimeBase.prototype._getPPQ=function(){return t.Transport?t.Transport.PPQ:192},t.TimeBase.prototype._now=function(){return this.now()},t.TimeBase.prototype._frequencyToUnits=function(t){return 1/t},t.TimeBase.prototype._beatsToUnits=function(t){return 60/this._getBpm()*t},t.TimeBase.prototype._secondsToUnits=function(t){return t},t.TimeBase.prototype._ticksToUnits=function(t){return t*(this._beatsToUnits(1)/this._getPPQ())},t.TimeBase.prototype._noArg=function(){return this._now()},t.TimeBase.prototype.valueOf=function(){if(t.isUndef(this._val))return this._noArg();if(t.isString(this._val)&&t.isUndef(this._units))for(var e in this._expressions)if(this._expressions[e].regexp.test(this._val.trim())){this._units=e;break}if(t.isDefined(this._units)){var i=this._expressions[this._units],r=this._val.toString().trim().match(i.regexp);return r?i.method.apply(this,r.slice(1)):i.method.call(this,parseFloat(this._val))}return this._val},t.TimeBase.prototype.toSeconds=function(){return this.valueOf()},t.TimeBase.prototype.toFrequency=function(){return 1/this.toSeconds()},t.TimeBase.prototype.toSamples=function(){return this.toSeconds()*this.context.sampleRate},t.TimeBase.prototype.toMilliseconds=function(){return 1e3*this.toSeconds()},t.TimeBase.prototype.dispose=function(){this._val=null,this._units=null},t.TimeBase}),e(function(t){t.Frequency=function(e,i){if(!(this instanceof t.Frequency))return new t.Frequency(e,i);t.TimeBase.call(this,e,i)},t.extend(t.Frequency,t.TimeBase),t.Frequency.prototype._expressions=Object.assign({},t.TimeBase.prototype._expressions,{midi:{regexp:/^(\d+(?:\.\d+)?midi)/,method:function(e){return"midi"===this._defaultUnits?e:t.Frequency.mtof(e)}},note:{regexp:/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,method:function(i,r){var n=e[i.toLowerCase()]+12*(parseInt(r)+1);return"midi"===this._defaultUnits?n:t.Frequency.mtof(n)}},tr:{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,method:function(t,e,i){var r=1;return t&&"0"!==t&&(r*=this._beatsToUnits(this._getTimeSignature()*parseFloat(t))),e&&"0"!==e&&(r*=this._beatsToUnits(parseFloat(e))),i&&"0"!==i&&(r*=this._beatsToUnits(parseFloat(i)/4)),r}}}),t.Frequency.prototype.transpose=function(e){return new this.constructor(this.valueOf()*t.intervalToFrequencyRatio(e))},t.Frequency.prototype.harmonize=function(t){return t.map(function(t){return this.transpose(t)}.bind(this))},t.Frequency.prototype.toMidi=function(){return t.Frequency.ftom(this.valueOf())},t.Frequency.prototype.toNote=function(){var e=this.toFrequency(),r=Math.log2(e/t.Frequency.A4),n=Math.round(12*r)+57,o=Math.floor(n/12);return o<0&&(n+=-12*o),i[n%12]+o.toString()},t.Frequency.prototype.toSeconds=function(){return 1/t.TimeBase.prototype.toSeconds.call(this)},t.Frequency.prototype.toFrequency=function(){return t.TimeBase.prototype.toFrequency.call(this)},t.Frequency.prototype.toTicks=function(){var e=this._beatsToUnits(1),i=this.valueOf()/e;return Math.floor(i*t.Transport.PPQ)},t.Frequency.prototype._noArg=function(){return 0},t.Frequency.prototype._frequencyToUnits=function(t){return t},t.Frequency.prototype._ticksToUnits=function(e){return 1/(60*e/(t.Transport.bpm.value*t.Transport.PPQ))},t.Frequency.prototype._beatsToUnits=function(e){return 1/t.TimeBase.prototype._beatsToUnits.call(this,e)},t.Frequency.prototype._secondsToUnits=function(t){return 1/t},t.Frequency.prototype._defaultUnits="hz";var e={cbb:-2,cb:-1,c:0,"c#":1,cx:2,dbb:0,db:1,d:2,"d#":3,dx:4,ebb:2,eb:3,e:4,"e#":5,ex:6,fbb:3,fb:4,f:5,"f#":6,fx:7,gbb:5,gb:6,g:7,"g#":8,gx:9,abb:7,ab:8,a:9,"a#":10,ax:11,bbb:9,bb:10,b:11,"b#":12,bx:13},i=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];return t.Frequency.A4=440,t.Frequency.mtof=function(e){return t.Frequency.A4*Math.pow(2,(e-69)/12)},t.Frequency.ftom=function(e){return 69+Math.round(12*Math.log2(e/t.Frequency.A4))},t.Frequency}),e(function(t){return t.Time=function(e,i){if(!(this instanceof t.Time))return new t.Time(e,i);t.TimeBase.call(this,e,i)},t.extend(t.Time,t.TimeBase),t.Time.prototype._expressions=Object.assign({},t.TimeBase.prototype._expressions,{quantize:{regexp:/^@(.+)/,method:function(e){if(t.Transport){var i=new this.constructor(e);return t.Transport.nextSubdivision(i)}return 0}},now:{regexp:/^\+(.+)/,method:function(t){return this._now()+new this.constructor(t)}}}),t.Time.prototype.quantize=function(e,i){i=t.defaultArg(i,1);var r=new this.constructor(e),n=this.valueOf();return n+(Math.round(n/r)*r-n)*i},t.Time.prototype.toNotation=function(){for(var e=this.toSeconds(),i=["1m"],r=1;r<8;r++){var n=Math.pow(2,r);i.push(n+"n."),i.push(n+"n"),i.push(n+"t")}i.push("0");var o=i[0],s=t.Time(i[0]).toSeconds();return i.forEach(function(i){var r=t.Time(i).toSeconds();Math.abs(r-e)<Math.abs(s-e)&&(o=i,s=r)}),o},t.Time.prototype.toBarsBeatsSixteenths=function(){var t=this._beatsToUnits(1),e=this.valueOf()/t,i=Math.floor(e/this._getTimeSignature()),r=e%1*4;return e=Math.floor(e)%this._getTimeSignature(),(r=r.toString()).length>3&&(r=parseFloat(parseFloat(r).toFixed(3))),[i,e,r].join(":")},t.Time.prototype.toTicks=function(){var t=this._beatsToUnits(1),e=this.valueOf()/t;return Math.round(e*this._getPPQ())},t.Time.prototype.toSeconds=function(){return this.valueOf()},t.Time.prototype.toMidi=function(){return t.Frequency.ftom(this.toFrequency())},t.Time}),e(function(t){return t.TransportTime=function(e,i){if(!(this instanceof t.TransportTime))return new t.TransportTime(e,i);t.Time.call(this,e,i)},t.extend(t.TransportTime,t.Time),t.TransportTime.prototype._now=function(){return t.Transport.seconds},t.TransportTime}),e(function(t){return t.Type={Default:"number",Time:"time",Frequency:"frequency",TransportTime:"transportTime",Ticks:"ticks",NormalRange:"normalRange",AudioRange:"audioRange",Decibels:"db",Interval:"interval",BPM:"bpm",Positive:"positive",Gain:"gain",Cents:"cents",Degrees:"degrees",MIDI:"midi",BarsBeatsSixteenths:"barsBeatsSixteenths",Samples:"samples",Hertz:"hertz",Note:"note",Milliseconds:"milliseconds",Seconds:"seconds",Notation:"notation"},t.prototype.toSeconds=function(e){return t.isNumber(e)?e:t.isUndef(e)?this.now():t.isString(e)?new t.Time(e).toSeconds():e instanceof t.TimeBase?e.toSeconds():void 0},t.prototype.toFrequency=function(e){return t.isNumber(e)?e:t.isString(e)||t.isUndef(e)?new t.Frequency(e).valueOf():e instanceof t.TimeBase?e.toFrequency():void 0},t.prototype.toTicks=function(e){return t.isNumber(e)||t.isString(e)?new t.TransportTime(e).toTicks():t.isUndef(e)?t.Transport.ticks:e instanceof t.TimeBase?e.toTicks():void 0},t}),e(function(t){return t.Param=function(){var e=t.defaults(arguments,["param","units","convert"],t.Param);t.AudioNode.call(this),this._param=this.input=e.param,this.units=e.units,this.convert=e.convert,this.overridden=!1,this._events=new t.Timeline(1e3),t.isDefined(e.value)&&this._param&&(this.value=e.value)},t.extend(t.Param,t.AudioNode),t.Param.defaults={units:t.Type.Default,convert:!0,param:void 0},Object.defineProperty(t.Param.prototype,"value",{get:function(){var t=this.now();return this._toUnits(this.getValueAtTime(t))},set:function(t){this._initialValue=this._fromUnits(t),this.cancelScheduledValues(this.context.currentTime),this.setValueAtTime(t,this.context.currentTime)}}),Object.defineProperty(t.Param.prototype,"minValue",{get:function(){return this.units===t.Type.Time||this.units===t.Type.Frequency||this.units===t.Type.NormalRange||this.units===t.Type.Positive||this.units===t.Type.BPM?0:this.units===t.Type.AudioRange?-1:this.units===t.Type.Decibels?-1/0:this._param.minValue}}),Object.defineProperty(t.Param.prototype,"maxValue",{get:function(){return this.units===t.Type.NormalRange||this.units===t.Type.AudioRange?1:this._param.maxValue}}),t.Param.prototype._fromUnits=function(e){if(!this.convert&&!t.isUndef(this.convert)||this.overridden)return e;switch(this.units){case t.Type.Time:return this.toSeconds(e);case t.Type.Frequency:return this.toFrequency(e);case t.Type.Decibels:return t.dbToGain(e);case t.Type.NormalRange:return Math.min(Math.max(e,0),1);case t.Type.AudioRange:return Math.min(Math.max(e,-1),1);case t.Type.Positive:return Math.max(e,0);default:return e}},t.Param.prototype._toUnits=function(e){if(!this.convert&&!t.isUndef(this.convert))return e;switch(this.units){case t.Type.Decibels:return t.gainToDb(e);default:return e}},t.Param.prototype._minOutput=1e-5,t.Param.AutomationType={Linear:"linearRampToValueAtTime",Exponential:"exponentialRampToValueAtTime",Target:"setTargetAtTime",SetValue:"setValueAtTime"},t.Param.prototype.setValueAtTime=function(e,i){return i=this.toSeconds(i),e=this._fromUnits(e),this._events.add({type:t.Param.AutomationType.SetValue,value:e,time:i}),this._param.setValueAtTime(e,i),this},t.Param.prototype.getValueAtTime=function(e){e=this.toSeconds(e);var i=this._events.getAfter(e),r=this._events.get(e),n=t.defaultArg(this._initialValue,this._param.defaultValue),o=n;if(null===r)o=n;else if(r.type===t.Param.AutomationType.Target){var s,a=this._events.getBefore(r.time);s=null===a?n:a.value,o=this._exponentialApproach(r.time,s,r.value,r.constant,e)}else o=null===i?r.value:i.type===t.Param.AutomationType.Linear?this._linearInterpolate(r.time,r.value,i.time,i.value,e):i.type===t.Param.AutomationType.Exponential?this._exponentialInterpolate(r.time,r.value,i.time,i.value,e):r.value;return o},t.Param.prototype.setRampPoint=function(t){t=this.toSeconds(t);var e=this.getValueAtTime(t);return this.cancelAndHoldAtTime(t),0===e&&(e=this._minOutput),this.setValueAtTime(this._toUnits(e),t),this},t.Param.prototype.linearRampToValueAtTime=function(e,i){return e=this._fromUnits(e),i=this.toSeconds(i),this._events.add({type:t.Param.AutomationType.Linear,value:e,time:i}),this._param.linearRampToValueAtTime(e,i),this},t.Param.prototype.exponentialRampToValueAtTime=function(e,i){return e=this._fromUnits(e),e=Math.max(this._minOutput,e),i=this.toSeconds(i),this._events.add({type:t.Param.AutomationType.Exponential,time:i,value:e}),this._param.exponentialRampToValueAtTime(e,i),this},t.Param.prototype.exponentialRampTo=function(t,e,i){return i=this.toSeconds(i),this.setRampPoint(i),this.exponentialRampToValueAtTime(t,i+this.toSeconds(e)),this},t.Param.prototype.linearRampTo=function(t,e,i){return i=this.toSeconds(i),this.setRampPoint(i),this.linearRampToValueAtTime(t,i+this.toSeconds(e)),this},t.Param.prototype.targetRampTo=function(t,e,i){return i=this.toSeconds(i),this.setRampPoint(i),this.exponentialApproachValueAtTime(t,i,e),this},t.Param.prototype.exponentialApproachValueAtTime=function(t,e,i){var r=Math.log(this.toSeconds(i)+1)/Math.log(200);return e=this.toSeconds(e),this.setTargetAtTime(t,e,r)},t.Param.prototype.setTargetAtTime=function(e,i,r){if(e=this._fromUnits(e),r<=0)throw new Error("timeConstant must be greater than 0");return i=this.toSeconds(i),this._events.add({type:t.Param.AutomationType.Target,value:e,time:i,constant:r}),this._param.setTargetAtTime(e,i,r),this},t.Param.prototype.setValueCurveAtTime=function(e,i,r,n){n=t.defaultArg(n,1),r=this.toSeconds(r),i=this.toSeconds(i),this.setValueAtTime(e[0]*n,i);for(var o=r/(e.length-1),s=1;s<e.length;s++)this.linearRampToValueAtTime(e[s]*n,i+s*o);return this},t.Param.prototype.cancelScheduledValues=function(t){return t=this.toSeconds(t),this._events.cancel(t),this._param.cancelScheduledValues(t),this},t.Param.prototype.cancelAndHoldAtTime=function(e){var i=this.getValueAtTime(e),r=this._events.get(e),n=this._events.getAfter(e);return r&&r.time===e?n?this._events.cancel(n.time):this._events.cancel(e+1e-6):n&&(this._events.cancel(n.time),this._param.cancelAndHoldAtTime||this._param.cancelScheduledValues(e),n.type===t.Param.AutomationType.Linear?this._param.cancelAndHoldAtTime?this._events.add({type:t.Param.AutomationType.Linear,value:i,time:e}):this.linearRampToValueAtTime(i,e):n.type===t.Param.AutomationType.Exponential&&(this._param.cancelAndHoldAtTime?this._events.add({type:t.Param.AutomationType.Exponential,value:i,time:e}):this.exponentialRampToValueAtTime(i,e))),this._events.add({type:t.Param.AutomationType.SetValue,value:i,time:e}),this._param.cancelAndHoldAtTime?this._param.cancelAndHoldAtTime(e):this._param.setValueAtTime(i,e),this},t.Param.prototype.rampTo=function(e,i,r){return i=t.defaultArg(i,.1),this.units===t.Type.Frequency||this.units===t.Type.BPM||this.units===t.Type.Decibels?this.exponentialRampTo(e,i,r):this.linearRampTo(e,i,r),this},t.Param.prototype._exponentialApproach=function(t,e,i,r,n){return i+(e-i)*Math.exp(-(n-t)/r)},t.Param.prototype._linearInterpolate=function(t,e,i,r,n){return e+(n-t)/(i-t)*(r-e)},t.Param.prototype._exponentialInterpolate=function(t,e,i,r,n){return e*Math.pow(r/e,(n-t)/(i-t))},t.Param.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._param=null,this._events=null,this},t.Param}),e(function(t){return t.OfflineContext=function(e,i,r){var n=new OfflineAudioContext(e,i*r,r);t.Context.call(this,{context:n,clockSource:"offline",lookAhead:0,updateInterval:128/r}),this._duration=i,this._currentTime=0},t.extend(t.OfflineContext,t.Context),t.OfflineContext.prototype.now=function(){return this._currentTime},t.OfflineContext.prototype.render=function(){for(;this._duration-this._currentTime>=0;)this.emit("tick"),this._currentTime+=this.blockTime;return this._context.startRendering()},t.OfflineContext.prototype.close=function(){return this._context=null,Promise.resolve()},t.OfflineContext}),e(function(t){if(t.supported){var e=navigator.userAgent.toLowerCase();e.includes("safari")&&!e.includes("chrome")&&e.includes("mobile")&&(t.OfflineContext.prototype.createBufferSource=function(){var t=this._context.createBufferSource(),e=t.start;return t.start=function(i){this.setTimeout(function(){e.call(t,i)}.bind(this),0)}.bind(this),t})}}),e(function(t){return t.Gain=function(){var e=t.defaults(arguments,["gain","units"],t.Gain);t.AudioNode.call(this),this.input=this.output=this._gainNode=this.context.createGain(),this.gain=new t.Param({param:this._gainNode.gain,units:e.units,value:e.gain,convert:e.convert}),this._readOnly("gain")},t.extend(t.Gain,t.AudioNode),t.Gain.defaults={gain:1,convert:!0},t.Gain.prototype.dispose=function(){t.AudioNode.prototype.dispose.call(this),this._gainNode.disconnect(),this._gainNode=null,this._writable("gain"),this.gain.dispose(),this.gain=null},t.Gain}),e(function(t){if(t.supported&&!AudioContext.prototype.createConstantSource){var e=function(t){this.context=t;for(var e=t.createBuffer(1,128,t.sampleRate),i=e.getChannelData(0),r=0;r<i.length;r++)i[r]=1;this._bufferSource=t.createBufferSource(),this._bufferSource.channelCount=1,this._bufferSource.channelCountMode="explicit",this._bufferSource.buffer=e,this._bufferSource.loop=!0;var n=this._output=t.createGain();this.offset=n.gain,this._bufferSource.connect(n)};e.prototype.start=function(t){return this._bufferSource.start(t),this},e.prototype.stop=function(t){return this._bufferSource.stop(t),this},e.prototype.connect=function(){return this._output.connect.apply(this._output,arguments),this},e.prototype.disconnect=function(){return this._output.disconnect.apply(this._output,arguments),this},AudioContext.prototype.createConstantSource=function(){return new e(this)},t.Context.prototype.createConstantSource=function(){return new e(this)}}}),e(function(t){return t.Signal=function(){var e=t.defaults(arguments,["value","units"],t.Signal);t.Param.call(this,e),this._proxies=[],this._sourceStarted=!1,this._constantSource=this.context.createConstantSource(),this._param=this._constantSource.offset,this.value=e.value,this.output=this._constantSource,this.input=this._param=this.output.offset},t.extend(t.Signal,t.Param),t.Signal.defaults={value:0,units:t.Type.Default,convert:!0},t.Signal.prototype.connect=function(e){return this._isParam(e)&&!this._sourceStarted?(this._proxies.push(e),e.overridden=!0,this._applyAutomations(e)):(t.SignalBase.prototype.connect.apply(this,arguments),this._sourceStarted||(this._sourceStarted=!0,this._constantSource.start(0))),this},t.Signal.prototype._isParam=function(e){return t.Param&&t.Param===e.constructor||e instanceof AudioParam},t.Signal.prototype._connectProxies=function(){this._sourceStarted||(this._sourceStarted=!0,this._constantSource.start(0)),this._proxies.forEach(function(e){t.SignalBase.prototype.connect.call(this,e),e._proxies&&e._connectProxies()}.bind(this))},t.Signal.prototype._onConnect=function(t){this._isParam(t)||this._connectProxies()},t.Signal.prototype._applyAutomations=function(t){var e=this.context.currentTime;t.cancelScheduledValues(e);var i=this.getValueAtTime(e);t.setValueAtTime(i,e),this._events.forEachFrom(e,function(e){t[e.type](e.value,e.time,e.constant)})},t.Signal.prototype.disconnect=function(e){if(this._proxies.includes(e)){var i=this._proxies.indexOf(e);this._proxies.splice(i,1)}else e||(this._proxies=[]);return t.SignalBase.prototype.disconnect.apply(this,arguments)},t.Signal.prototype.getValueAtTime=function(e){return this._param.getValueAtTime?this._param.getValueAtTime(e):t.Param.prototype.getValueAtTime.call(this,e)},["setValueAtTime","linearRampToValueAtTime","exponentialRampToValueAtTime","setTargetAtTime"].forEach(function(e){var i=t.Signal.prototype[e];t.Signal.prototype[e]=function(){var t=arguments;i.apply(this,arguments),t[0]=this._fromUnits(t[0]),t[1]=this.toSeconds(t[1]),this._proxies.forEach(function(i){i[e].apply(i,t)})}}),["cancelScheduledValues","cancelAndHoldAtTime"].forEach(function(e){var i=t.Signal.prototype[e];t.Signal.prototype[e]=function(){var t=arguments;i.apply(this,arguments),t[0]=this.toSeconds(t[0]),this._proxies.forEach(function(i){i[e].apply(i,t)})}}),t.Signal.prototype.dispose=function(){return t.Param.prototype.dispose.call(this),this._constantSource.disconnect(),this._constantSource=null,this._proxies=null,this},t.Signal}),e(function(t){return t.Pow=function(e){t.SignalBase.call(this),this._exp=t.defaultArg(e,1),this._expScaler=this.input=this.output=new t.WaveShaper(this._expFunc(this._exp),8192)},t.extend(t.Pow,t.SignalBase),Object.defineProperty(t.Pow.prototype,"value",{get:function(){return this._exp},set:function(t){this._exp=t,this._expScaler.setMap(this._expFunc(this._exp))}}),t.Pow.prototype._expFunc=function(t){return function(e){return Math.pow(Math.abs(e),t)}},t.Pow.prototype.dispose=function(){return t.SignalBase.prototype.dispose.call(this),this._expScaler.dispose(),this._expScaler=null,this},t.Pow}),e(function(t){return t.Envelope=function(){var e=t.defaults(arguments,["attack","decay","sustain","release"],t.Envelope);t.AudioNode.call(this),this.attack=e.attack,this.decay=e.decay,this.sustain=e.sustain,this.release=e.release,this._attackCurve="linear",this._releaseCurve="exponential",this._sig=this.output=new t.Signal(0),this.attackCurve=e.attackCurve,this.releaseCurve=e.releaseCurve},t.extend(t.Envelope,t.AudioNode),t.Envelope.defaults={attack:.01,decay:.1,sustain:.5,release:1,attackCurve:"linear",releaseCurve:"exponential"},Object.defineProperty(t.Envelope.prototype,"value",{get:function(){return this.getValueAtTime(this.now())}}),Object.defineProperty(t.Envelope.prototype,"attackCurve",{get:function(){if(t.isString(this._attackCurve))return this._attackCurve;if(t.isArray(this._attackCurve)){for(var e in t.Envelope.Type)if(t.Envelope.Type[e].In===this._attackCurve)return e;return this._attackCurve}},set:function(e){if(t.Envelope.Type.hasOwnProperty(e)){var i=t.Envelope.Type[e];t.isObject(i)?this._attackCurve=i.In:this._attackCurve=i}else{if(!t.isArray(e))throw new Error("Tone.Envelope: invalid curve: "+e);this._attackCurve=e}}}),Object.defineProperty(t.Envelope.prototype,"releaseCurve",{get:function(){if(t.isString(this._releaseCurve))return this._releaseCurve;if(t.isArray(this._releaseCurve)){for(var e in t.Envelope.Type)if(t.Envelope.Type[e].Out===this._releaseCurve)return e;return this._releaseCurve}},set:function(e){if(t.Envelope.Type.hasOwnProperty(e)){var i=t.Envelope.Type[e];t.isObject(i)?this._releaseCurve=i.Out:this._releaseCurve=i}else{if(!t.isArray(e))throw new Error("Tone.Envelope: invalid curve: "+e);this._releaseCurve=e}}}),t.Envelope.prototype.triggerAttack=function(e,i){e=this.toSeconds(e);var r=this.toSeconds(this.attack),n=r,o=this.toSeconds(this.decay);i=t.defaultArg(i,1);var s=this.getValueAtTime(e);if(s>0&&(n=(1-s)/(1/n)),"linear"===this._attackCurve)this._sig.linearRampTo(i,n,e);else if("exponential"===this._attackCurve)this._sig.targetRampTo(i,n,e);else if(n>0){this._sig.cancelAndHoldAtTime(e);var a=this._attackCurve;if(n<r){var h=1-n/r,l=Math.floor(h*this._attackCurve.length);(a=this._attackCurve.slice(l))[0]=s}this._sig.setValueCurveAtTime(a,e,n,i)}return o&&this._sig.targetRampTo(i*this.sustain,o,n+e),this},t.Envelope.prototype.triggerRelease=function(e){e=this.toSeconds(e);var i=this.getValueAtTime(e);if(i>0){var r=this.toSeconds(this.release);if("linear"===this._releaseCurve)this._sig.linearRampTo(0,r,e);else if("exponential"===this._releaseCurve)this._sig.targetRampTo(0,r,e);else{var n=this._releaseCurve;t.isArray(n)&&(this._sig.cancelAndHoldAtTime(e),this._sig.setValueCurveAtTime(n,e,r,i))}}return this},t.Envelope.prototype.getValueAtTime=function(t){return this._sig.getValueAtTime(t)},t.Envelope.prototype.triggerAttackRelease=function(t,e,i){return e=this.toSeconds(e),this.triggerAttack(e,i),this.triggerRelease(e+this.toSeconds(t)),this},t.Envelope.prototype.cancel=function(t){return this._sig.cancelScheduledValues(t),this},t.Envelope.prototype.connect=t.SignalBase.prototype.connect,function(){var e,i,r=[];for(e=0;e<128;e++)r[e]=Math.sin(e/127*(Math.PI/2));var n=[];for(e=0;e<127;e++){i=e/127;var o=Math.sin(i*(2*Math.PI)*6.4-Math.PI/2)+1;n[e]=o/10+.83*i}n[127]=1;var s=[];for(e=0;e<128;e++)s[e]=Math.ceil(e/127*5)/5;var a=[];for(e=0;e<128;e++)i=e/127,a[e]=.5*(1-Math.cos(Math.PI*i));var h=[];for(e=0;e<128;e++){i=e/127;var l=4*Math.pow(i,3)+.2,u=Math.cos(l*Math.PI*2*i);h[e]=Math.abs(u*(1-i))}function c(t){for(var e=new Array(t.length),i=0;i<t.length;i++)e[i]=1-t[i];return e}t.Envelope.Type={linear:"linear",exponential:"exponential",bounce:{In:c(h),Out:h},cosine:{In:r,Out:function(t){return t.slice(0).reverse()}(r)},step:{In:s,Out:c(s)},ripple:{In:n,Out:c(n)},sine:{In:a,Out:c(a)}}}(),t.Envelope.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._sig.dispose(),this._sig=null,this._attackCurve=null,this._releaseCurve=null,this},t.Envelope}),e(function(t){return t.AmplitudeEnvelope=function(){t.Envelope.apply(this,arguments),this.input=this.output=new t.Gain,this._sig.connect(this.output.gain)},t.extend(t.AmplitudeEnvelope,t.Envelope),t.AmplitudeEnvelope.prototype.dispose=function(){return t.Envelope.prototype.dispose.call(this),this},t.AmplitudeEnvelope}),e(function(t){t.supported&&(AnalyserNode.prototype.getFloatTimeDomainData||(AnalyserNode.prototype.getFloatTimeDomainData=function(t){var e=new Uint8Array(t.length);this.getByteTimeDomainData(e);for(var i=0;i<e.length;i++)t[i]=(e[i]-128)/128}))}),e(function(t){return t.Analyser=function(){var e=t.defaults(arguments,["type","size"],t.Analyser);t.AudioNode.call(this),this._analyser=this.input=this.output=this.context.createAnalyser(),this._type=e.type,this._buffer=null,this.size=e.size,this.type=e.type},t.extend(t.Analyser,t.AudioNode),t.Analyser.defaults={size:1024,type:"fft",smoothing:.8},t.Analyser.Type={Waveform:"waveform",FFT:"fft"},t.Analyser.prototype.getValue=function(){return this._type===t.Analyser.Type.FFT?this._analyser.getFloatFrequencyData(this._buffer):this._type===t.Analyser.Type.Waveform&&this._analyser.getFloatTimeDomainData(this._buffer),this._buffer},Object.defineProperty(t.Analyser.prototype,"size",{get:function(){return this._analyser.frequencyBinCount},set:function(t){this._analyser.fftSize=2*t,this._buffer=new Float32Array(t)}}),Object.defineProperty(t.Analyser.prototype,"type",{get:function(){return this._type},set:function(e){if(e!==t.Analyser.Type.Waveform&&e!==t.Analyser.Type.FFT)throw new TypeError("Tone.Analyser: invalid type: "+e);this._type=e}}),Object.defineProperty(t.Analyser.prototype,"smoothing",{get:function(){return this._analyser.smoothingTimeConstant},set:function(t){this._analyser.smoothingTimeConstant=t}}),t.Analyser.prototype.dispose=function(){t.AudioNode.prototype.dispose.call(this),this._analyser.disconnect(),this._analyser=null,this._buffer=null},t.Analyser}),e(function(t){return t.Compressor=function(){var e=t.defaults(arguments,["threshold","ratio"],t.Compressor);t.AudioNode.call(this),this._compressor=this.input=this.output=this.context.createDynamicsCompressor(),this.threshold=new t.Param({param:this._compressor.threshold,units:t.Type.Decibels,convert:!1}),this.attack=new t.Param(this._compressor.attack,t.Type.Time),this.release=new t.Param(this._compressor.release,t.Type.Time),this.knee=new t.Param({param:this._compressor.knee,units:t.Type.Decibels,convert:!1}),this.ratio=new t.Param({param:this._compressor.ratio,convert:!1}),this._readOnly(["knee","release","attack","ratio","threshold"]),this.set(e)},t.extend(t.Compressor,t.AudioNode),t.Compressor.defaults={ratio:12,threshold:-24,release:.25,attack:.003,knee:30},t.Compressor.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._writable(["knee","release","attack","ratio","threshold"]),this._compressor.disconnect(),this._compressor=null,this.attack.dispose(),this.attack=null,this.release.dispose(),this.release=null,this.threshold.dispose(),this.threshold=null,this.ratio.dispose(),this.ratio=null,this.knee.dispose(),this.knee=null,this},t.Compressor}),e(function(t){return t.Add=function(e){t.Signal.call(this),this.createInsOuts(2,0),this._sum=this.input[0]=this.input[1]=this.output=new t.Gain,this._param=this.input[1]=new t.Signal(e),this._param.connect(this._sum)},t.extend(t.Add,t.Signal),t.Add.prototype.dispose=function(){return t.Signal.prototype.dispose.call(this),this._sum.dispose(),this._sum=null,this},t.Add}),e(function(t){return t.Multiply=function(e){t.Signal.call(this),this.createInsOuts(2,0),this._mult=this.input[0]=this.output=new t.Gain,this._param=this.input[1]=this.output.gain,this.value=t.defaultArg(e,0)},t.extend(t.Multiply,t.Signal),t.Multiply.prototype.dispose=function(){return t.Signal.prototype.dispose.call(this),this._mult.dispose(),this._mult=null,this._param=null,this},t.Multiply}),e(function(t){return t.Negate=function(){t.SignalBase.call(this),this._multiply=this.input=this.output=new t.Multiply(-1)},t.extend(t.Negate,t.SignalBase),t.Negate.prototype.dispose=function(){return t.SignalBase.prototype.dispose.call(this),this._multiply.dispose(),this._multiply=null,this},t.Negate}),e(function(t){return t.Subtract=function(e){t.Signal.call(this),this.createInsOuts(2,0),this._sum=this.input[0]=this.output=new t.Gain,this._neg=new t.Negate,this._param=this.input[1]=new t.Signal(e),this._param.chain(this._neg,this._sum)},t.extend(t.Subtract,t.Signal),t.Subtract.prototype.dispose=function(){return t.Signal.prototype.dispose.call(this),this._neg.dispose(),this._neg=null,this._sum.disconnect(),this._sum=null,this},t.Subtract}),e(function(t){return t.EqualPowerGain=function(){t.SignalBase.call(this),this._eqPower=this.input=this.output=new t.WaveShaper(function(e){return Math.abs(e)<.001?0:t.equalPowerScale(e)}.bind(this),4096)},t.extend(t.EqualPowerGain,t.SignalBase),t.EqualPowerGain.prototype.dispose=function(){return t.SignalBase.prototype.dispose.call(this),this._eqPower.dispose(),this._eqPower=null,this},t.EqualPowerGain}),e(function(t){return t.CrossFade=function(e){t.AudioNode.call(this),this.createInsOuts(2,1),this.a=this.input[0]=new t.Gain,this.b=this.input[1]=new t.Gain,this.fade=new t.Signal(t.defaultArg(e,.5),t.Type.NormalRange),this._equalPowerA=new t.EqualPowerGain,this._equalPowerB=new t.EqualPowerGain,this._one=this.context.getConstant(1),this._invert=new t.Subtract,this.a.connect(this.output),this.b.connect(this.output),this.fade.chain(this._equalPowerB,this.b.gain),this._one.connect(this._invert,0,0),this.fade.connect(this._invert,0,1),this._invert.chain(this._equalPowerA,this.a.gain),this._readOnly("fade")},t.extend(t.CrossFade,t.AudioNode),t.CrossFade.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._writable("fade"),this._equalPowerA.dispose(),this._equalPowerA=null,this._equalPowerB.dispose(),this._equalPowerB=null,this.fade.dispose(),this.fade=null,this._invert.dispose(),this._invert=null,this._one=null,this.a.dispose(),this.a=null,this.b.dispose(),this.b=null,this},t.CrossFade}),e(function(t){return t.Filter=function(){var e=t.defaults(arguments,["frequency","type","rolloff"],t.Filter);t.AudioNode.call(this),this.createInsOuts(1,1),this._filters=[],this.frequency=new t.Signal(e.frequency,t.Type.Frequency),this.detune=new t.Signal(0,t.Type.Cents),this.gain=new t.Signal({value:e.gain,convert:!1}),this.Q=new t.Signal(e.Q),this._type=e.type,this._rolloff=e.rolloff,this.rolloff=e.rolloff,this._readOnly(["detune","frequency","gain","Q"])},t.extend(t.Filter,t.AudioNode),t.Filter.defaults={type:"lowpass",frequency:350,rolloff:-12,Q:1,gain:0},Object.defineProperty(t.Filter.prototype,"type",{get:function(){return this._type},set:function(t){if(-1===["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(t))throw new TypeError("Tone.Filter: invalid type "+t);this._type=t;for(var e=0;e<this._filters.length;e++)this._filters[e].type=t}}),Object.defineProperty(t.Filter.prototype,"rolloff",{get:function(){return this._rolloff},set:function(e){e=parseInt(e,10);var i=[-12,-24,-48,-96].indexOf(e);if(-1===i)throw new RangeError("Tone.Filter: rolloff can only be -12, -24, -48 or -96");i+=1,this._rolloff=e,this.input.disconnect();for(var r=0;r<this._filters.length;r++)this._filters[r].disconnect(),this._filters[r]=null;this._filters=new Array(i);for(var n=0;n<i;n++){var o=this.context.createBiquadFilter();o.type=this._type,this.frequency.connect(o.frequency),this.detune.connect(o.detune),this.Q.connect(o.Q),this.gain.connect(o.gain),this._filters[n]=o}var s=[this.input].concat(this._filters).concat([this.output]);t.connectSeries.apply(t,s)}}),t.Filter.prototype.dispose=function(){t.AudioNode.prototype.dispose.call(this);for(var e=0;e<this._filters.length;e++)this._filters[e].disconnect(),this._filters[e]=null;return this._filters=null,this._writable(["detune","frequency","gain","Q"]),this.frequency.dispose(),this.Q.dispose(),this.frequency=null,this.Q=null,this.detune.dispose(),this.detune=null,this.gain.dispose(),this.gain=null,this},t.Filter}),e(function(t){return t.MultibandSplit=function(){var e=t.defaults(arguments,["lowFrequency","highFrequency"],t.MultibandSplit);t.AudioNode.call(this),this.input=new t.Gain,this.output=new Array(3),this.low=this.output[0]=new t.Filter(0,"lowpass"),this._lowMidFilter=new t.Filter(0,"highpass"),this.mid=this.output[1]=new t.Filter(0,"lowpass"),this.high=this.output[2]=new t.Filter(0,"highpass"),this.lowFrequency=new t.Signal(e.lowFrequency,t.Type.Frequency),this.highFrequency=new t.Signal(e.highFrequency,t.Type.Frequency),this.Q=new t.Signal(e.Q),this.input.fan(this.low,this.high),this.input.chain(this._lowMidFilter,this.mid),this.lowFrequency.connect(this.low.frequency),this.lowFrequency.connect(this._lowMidFilter.frequency),this.highFrequency.connect(this.mid.frequency),this.highFrequency.connect(this.high.frequency),this.Q.connect(this.low.Q),this.Q.connect(this._lowMidFilter.Q),this.Q.connect(this.mid.Q),this.Q.connect(this.high.Q),this._readOnly(["high","mid","low","highFrequency","lowFrequency"])},t.extend(t.MultibandSplit,t.AudioNode),t.MultibandSplit.defaults={lowFrequency:400,highFrequency:2500,Q:1},t.MultibandSplit.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._writable(["high","mid","low","highFrequency","lowFrequency"]),this.low.dispose(),this.low=null,this._lowMidFilter.dispose(),this._lowMidFilter=null,this.mid.dispose(),this.mid=null,this.high.dispose(),this.high=null,this.lowFrequency.dispose(),this.lowFrequency=null,this.highFrequency.dispose(),this.highFrequency=null,this.Q.dispose(),this.Q=null,this},t.MultibandSplit}),e(function(t){return t.EQ3=function(){var e=t.defaults(arguments,["low","mid","high"],t.EQ3);t.AudioNode.call(this),this.output=new t.Gain,this._multibandSplit=this.input=new t.MultibandSplit({lowFrequency:e.lowFrequency,highFrequency:e.highFrequency}),this._lowGain=new t.Gain(e.low,t.Type.Decibels),this._midGain=new t.Gain(e.mid,t.Type.Decibels),this._highGain=new t.Gain(e.high,t.Type.Decibels),this.low=this._lowGain.gain,this.mid=this._midGain.gain,this.high=this._highGain.gain,this.Q=this._multibandSplit.Q,this.lowFrequency=this._multibandSplit.lowFrequency,this.highFrequency=this._multibandSplit.highFrequency,this._multibandSplit.low.chain(this._lowGain,this.output),this._multibandSplit.mid.chain(this._midGain,this.output),this._multibandSplit.high.chain(this._highGain,this.output),this._readOnly(["low","mid","high","lowFrequency","highFrequency"])},t.extend(t.EQ3,t.AudioNode),t.EQ3.defaults={low:0,mid:0,high:0,lowFrequency:400,highFrequency:2500},t.EQ3.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._writable(["low","mid","high","lowFrequency","highFrequency"]),this._multibandSplit.dispose(),this._multibandSplit=null,this.lowFrequency=null,this.highFrequency=null,this._lowGain.dispose(),this._lowGain=null,this._midGain.dispose(),this._midGain=null,this._highGain.dispose(),this._highGain=null,this.low=null,this.mid=null,this.high=null,this.Q=null,this},t.EQ3}),e(function(t){return t.Scale=function(e,i){t.SignalBase.call(this),this._outputMin=t.defaultArg(e,0),this._outputMax=t.defaultArg(i,1),this._scale=this.input=new t.Multiply(1),this._add=this.output=new t.Add(0),this._scale.connect(this._add),this._setRange()},t.extend(t.Scale,t.SignalBase),Object.defineProperty(t.Scale.prototype,"min",{get:function(){return this._outputMin},set:function(t){this._outputMin=t,this._setRange()}}),Object.defineProperty(t.Scale.prototype,"max",{get:function(){return this._outputMax},set:function(t){this._outputMax=t,this._setRange()}}),t.Scale.prototype._setRange=function(){this._add.value=this._outputMin,this._scale.value=this._outputMax-this._outputMin},t.Scale.prototype.dispose=function(){return t.SignalBase.prototype.dispose.call(this),this._add.dispose(),this._add=null,this._scale.dispose(),this._scale=null,this},t.Scale}),e(function(t){return t.ScaleExp=function(e,i,r){t.SignalBase.call(this),this._scale=this.output=new t.Scale(e,i),this._exp=this.input=new t.Pow(t.defaultArg(r,2)),this._exp.connect(this._scale)},t.extend(t.ScaleExp,t.SignalBase),Object.defineProperty(t.ScaleExp.prototype,"exponent",{get:function(){return this._exp.value},set:function(t){this._exp.value=t}}),Object.defineProperty(t.ScaleExp.prototype,"min",{get:function(){return this._scale.min},set:function(t){this._scale.min=t}}),Object.defineProperty(t.ScaleExp.prototype,"max",{get:function(){return this._scale.max},set:function(t){this._scale.max=t}}),t.ScaleExp.prototype.dispose=function(){return t.SignalBase.prototype.dispose.call(this),this._scale.dispose(),this._scale=null,this._exp.dispose(),this._exp=null,this},t.ScaleExp}),e(function(t){return t.Delay=function(){var e=t.defaults(arguments,["delayTime","maxDelay"],t.Delay);t.AudioNode.call(this),this._maxDelay=Math.max(this.toSeconds(e.maxDelay),this.toSeconds(e.delayTime)),this._delayNode=this.input=this.output=this.context.createDelay(this._maxDelay),this.delayTime=new t.Param({param:this._delayNode.delayTime,units:t.Type.Time,value:e.delayTime}),this._readOnly("delayTime")},t.extend(t.Delay,t.AudioNode),t.Delay.defaults={maxDelay:1,delayTime:0},Object.defineProperty(t.Delay.prototype,"maxDelay",{get:function(){return this._maxDelay}}),t.Delay.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._delayNode.disconnect(),this._delayNode=null,this._writable("delayTime"),this.delayTime=null,this},t.Delay}),e(function(t){return t.FeedbackCombFilter=function(){var e=t.defaults(arguments,["delayTime","resonance"],t.FeedbackCombFilter);t.AudioNode.call(this),this._delay=this.input=this.output=new t.Delay(e.delayTime),this.delayTime=this._delay.delayTime,this._feedback=new t.Gain(e.resonance,t.Type.NormalRange),this.resonance=this._feedback.gain,this._delay.chain(this._feedback,this._delay),this._readOnly(["resonance","delayTime"])},t.extend(t.FeedbackCombFilter,t.AudioNode),t.FeedbackCombFilter.defaults={delayTime:.1,resonance:.5},t.FeedbackCombFilter.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._writable(["resonance","delayTime"]),this._delay.dispose(),this._delay=null,this.delayTime=null,this._feedback.dispose(),this._feedback=null,this.resonance=null,this},t.FeedbackCombFilter}),e(function(t){return t.FFT=function(){var e=t.defaults(arguments,["size"],t.FFT);e.type=t.Analyser.Type.FFT,t.AudioNode.call(this),this._analyser=this.input=this.output=new t.Analyser(e)},t.extend(t.FFT,t.AudioNode),t.FFT.defaults={size:1024},t.FFT.prototype.getValue=function(){return this._analyser.getValue()},Object.defineProperty(t.FFT.prototype,"size",{get:function(){return this._analyser.size},set:function(t){this._analyser.size=t}}),t.FFT.prototype.dispose=function(){t.AudioNode.prototype.dispose.call(this),this._analyser.dispose(),this._analyser=null},t.FFT}),e(function(t){return t.Abs=function(){t.SignalBase.call(this),this._abs=this.input=this.output=new t.WaveShaper(function(t){return Math.abs(t)<.001?0:Math.abs(t)},1024)},t.extend(t.Abs,t.SignalBase),t.Abs.prototype.dispose=function(){return t.SignalBase.prototype.dispose.call(this),this._abs.dispose(),this._abs=null,this},t.Abs}),e(function(t){return t.Follower=function(){var e=t.defaults(arguments,["attack","release"],t.Follower);t.AudioNode.call(this),this.createInsOuts(1,1),this._abs=new t.Abs,this._filter=this.context.createBiquadFilter(),this._filter.type="lowpass",this._filter.frequency.value=0,this._filter.Q.value=-100,this._frequencyValues=new t.WaveShaper,this._sub=new t.Subtract,this._delay=new t.Delay(this.blockTime),this._mult=new t.Multiply(1e4),this._attack=e.attack,this._release=e.release,this.input.chain(this._abs,this._filter,this.output),this._abs.connect(this._sub,0,1),this._filter.chain(this._delay,this._sub),this._sub.chain(this._mult,this._frequencyValues,this._filter.frequency),this._setAttackRelease(this._attack,this._release)},t.extend(t.Follower,t.AudioNode),t.Follower.defaults={attack:.05,release:.5},t.Follower.prototype._setAttackRelease=function(e,i){var r=this.blockTime;e=t.Time(e).toFrequency(),i=t.Time(i).toFrequency(),e=Math.max(e,r),i=Math.max(i,r),this._frequencyValues.setMap(function(t){return t<=0?e:i})},Object.defineProperty(t.Follower.prototype,"attack",{get:function(){return this._attack},set:function(t){this._attack=t,this._setAttackRelease(this._attack,this._release)}}),Object.defineProperty(t.Follower.prototype,"release",{get:function(){return this._release},set:function(t){this._release=t,this._setAttackRelease(this._attack,this._release)}}),t.Follower.prototype.connect=t.SignalBase.prototype.connect,t.Follower.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._filter.disconnect(),this._filter=null,this._frequencyValues.disconnect(),this._frequencyValues=null,this._delay.dispose(),this._delay=null,this._sub.disconnect(),this._sub=null,this._abs.dispose(),this._abs=null,this._mult.dispose(),this._mult=null,this._curve=null,this},t.Follower}),e(function(t){return t.ScaledEnvelope=function(){var e=t.defaults(arguments,["attack","decay","sustain","release"],t.Envelope);t.Envelope.call(this,e),e=t.defaultArg(e,t.ScaledEnvelope.defaults),this._exp=this.output=new t.Pow(e.exponent),this._scale=this.output=new t.Scale(e.min,e.max),this._sig.chain(this._exp,this._scale)},t.extend(t.ScaledEnvelope,t.Envelope),t.ScaledEnvelope.defaults={min:0,max:1,exponent:1},Object.defineProperty(t.ScaledEnvelope.prototype,"min",{get:function(){return this._scale.min},set:function(t){this._scale.min=t}}),Object.defineProperty(t.ScaledEnvelope.prototype,"max",{get:function(){return this._scale.max},set:function(t){this._scale.max=t}}),Object.defineProperty(t.ScaledEnvelope.prototype,"exponent",{get:function(){return this._exp.value},set:function(t){this._exp.value=t}}),t.ScaledEnvelope.prototype.dispose=function(){return t.Envelope.prototype.dispose.call(this),this._scale.dispose(),this._scale=null,this._exp.dispose(),this._exp=null,this},t.ScaledEnvelope}),e(function(t){return t.FrequencyEnvelope=function(){var e=t.defaults(arguments,["attack","decay","sustain","release"],t.Envelope);t.ScaledEnvelope.call(this,e),e=t.defaultArg(e,t.FrequencyEnvelope.defaults),this._octaves=e.octaves,this.baseFrequency=e.baseFrequency,this.octaves=e.octaves},t.extend(t.FrequencyEnvelope,t.Envelope),t.FrequencyEnvelope.defaults={baseFrequency:200,octaves:4,exponent:2},Object.defineProperty(t.FrequencyEnvelope.prototype,"baseFrequency",{get:function(){return this._scale.min},set:function(t){this._scale.min=this.toFrequency(t),this.octaves=this._octaves}}),Object.defineProperty(t.FrequencyEnvelope.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._scale.max=this.baseFrequency*Math.pow(2,t)}}),Object.defineProperty(t.FrequencyEnvelope.prototype,"exponent",{get:function(){return this._exp.value},set:function(t){this._exp.value=t}}),t.FrequencyEnvelope.prototype.dispose=function(){return t.ScaledEnvelope.prototype.dispose.call(this),this},t.FrequencyEnvelope}),e(function(t){return t.GreaterThanZero=function(){t.SignalBase.call(this),this._thresh=this.output=new t.WaveShaper(function(t){return t<=0?0:1},127),this._scale=this.input=new t.Multiply(1e4),this._scale.connect(this._thresh)},t.extend(t.GreaterThanZero,t.SignalBase),t.GreaterThanZero.prototype.dispose=function(){return t.SignalBase.prototype.dispose.call(this),this._scale.dispose(),this._scale=null,this._thresh.dispose(),this._thresh=null,this},t.GreaterThanZero}),e(function(t){return t.GreaterThan=function(e){t.Signal.call(this),this.createInsOuts(2,0),this._param=this.input[0]=new t.Subtract(e),this.input[1]=this._param.input[1],this._gtz=this.output=new t.GreaterThanZero,this._param.connect(this._gtz)},t.extend(t.GreaterThan,t.Signal),t.GreaterThan.prototype.dispose=function(){return t.Signal.prototype.dispose.call(this),this._gtz.dispose(),this._gtz=null,this},t.GreaterThan}),e(function(t){return t.Gate=function(){var e=t.defaults(arguments,["threshold","attack","release"],t.Gate);t.AudioNode.call(this),this.createInsOuts(1,1),this._follower=new t.Follower(e.attack,e.release),this._gt=new t.GreaterThan(t.dbToGain(e.threshold)),this.input.connect(this.output),this.input.chain(this._gt,this._follower,this.output.gain)},t.extend(t.Gate,t.AudioNode),t.Gate.defaults={attack:.1,release:.1,threshold:-40},Object.defineProperty(t.Gate.prototype,"threshold",{get:function(){return t.gainToDb(this._gt.value)},set:function(e){this._gt.value=t.dbToGain(e)}}),Object.defineProperty(t.Gate.prototype,"attack",{get:function(){return this._follower.attack},set:function(t){this._follower.attack=t}}),Object.defineProperty(t.Gate.prototype,"release",{get:function(){return this._follower.release},set:function(t){this._follower.release=t}}),t.Gate.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._follower.dispose(),this._gt.dispose(),this._follower=null,this._gt=null,this},t.Gate}),e(function(t){function e(t){return function(e,i){i=this.toSeconds(i),t.apply(this,arguments);var r=this._events.get(i),n=this._events.previousEvent(r),o=this._getTicksUntilEvent(n,i);return r.ticks=Math.max(o,0),this}}return t.TickSignal=function(e){e=t.defaultArg(e,1),t.Signal.call(this,{units:t.Type.Ticks,value:e}),this._events.memory=1/0,this.cancelScheduledValues(0),this._events.add({type:t.Param.AutomationType.SetValue,time:0,value:e})},t.extend(t.TickSignal,t.Signal),t.TickSignal.prototype.setValueAtTime=e(t.Signal.prototype.setValueAtTime),t.TickSignal.prototype.linearRampToValueAtTime=e(t.Signal.prototype.linearRampToValueAtTime),t.TickSignal.prototype.setTargetAtTime=function(t,e,i){e=this.toSeconds(e),this.setRampPoint(e),t=this._fromUnits(t);for(var r=this._events.get(e),n=Math.round(Math.max(1/i,1)),o=0;o<=n;o++){var s=i*o+e,a=this._exponentialApproach(r.time,r.value,t,i,s);this.linearRampToValueAtTime(this._toUnits(a),s)}return this},t.TickSignal.prototype.exponentialRampToValueAtTime=function(t,e){e=this.toSeconds(e),t=this._fromUnits(t);var i=this._events.get(e);null===i&&(i={value:this._initialValue,time:0});for(var r=Math.round(Math.max(10*(e-i.time),1)),n=(e-i.time)/r,o=0;o<=r;o++){var s=n*o+i.time,a=this._exponentialInterpolate(i.time,i.value,e,t,s);this.linearRampToValueAtTime(this._toUnits(a),s)}return this},t.TickSignal.prototype._getTicksUntilEvent=function(e,i){if(null===e)e={ticks:0,time:0};else if(t.isUndef(e.ticks)){var r=this._events.previousEvent(e);e.ticks=this._getTicksUntilEvent(r,e.time)}var n=this.getValueAtTime(e.time),o=this.getValueAtTime(i);return this._events.get(i).time===i&&this._events.get(i).type===t.Param.AutomationType.SetValue&&(o=this.getValueAtTime(i-this.sampleTime)),.5*(i-e.time)*(n+o)+e.ticks},t.TickSignal.prototype.getTicksAtTime=function(t){t=this.toSeconds(t);var e=this._events.get(t);return Math.max(this._getTicksUntilEvent(e,t),0)},t.TickSignal.prototype.getDurationOfTicks=function(t,e){e=this.toSeconds(e);var i=this.getTicksAtTime(e);return this.getTimeOfTick(i+t)-e},t.TickSignal.prototype.getTimeOfTick=function(e){var i=this._events.get(e,"ticks"),r=this._events.getAfter(e,"ticks");if(i&&i.ticks===e)return i.time;if(i&&r&&r.type===t.Param.AutomationType.Linear&&i.value!==r.value){var n=this.getValueAtTime(i.time),o=(this.getValueAtTime(r.time)-n)/(r.time-i.time),s=Math.sqrt(Math.pow(n,2)-2*o*(i.ticks-e)),a=(-n+s)/o;return(a>0?a:(-n-s)/o)+i.time}return i?0===i.value?1/0:i.time+(e-i.ticks)/i.value:e/this._initialValue},t.TickSignal.prototype.ticksToTime=function(e,i){return i=this.toSeconds(i),new t.Time(this.getDurationOfTicks(e,i))},t.TickSignal.prototype.timeToTicks=function(e,i){i=this.toSeconds(i),e=this.toSeconds(e);var r=this.getTicksAtTime(i),n=this.getTicksAtTime(i+e);return new t.Ticks(n-r)},t.TickSignal}),e(function(t){return t.TimelineState=function(e){t.Timeline.call(this),this._initial=e},t.extend(t.TimelineState,t.Timeline),t.TimelineState.prototype.getValueAtTime=function(t){var e=this.get(t);return null!==e?e.state:this._initial},t.TimelineState.prototype.setStateAtTime=function(t,e){return this.add({state:t,time:e}),this},t.TimelineState.prototype.getLastState=function(t,e){e=this.toSeconds(e);for(var i=this._search(e);i>=0;i--){var r=this._timeline[i];if(r.state===t)return r}},t.TimelineState.prototype.getNextState=function(t,e){e=this.toSeconds(e);var i=this._search(e);if(-1!==i)for(var r=i;r<this._timeline.length;r++){var n=this._timeline[r];if(n.state===t)return n}},t.TimelineState}),e(function(t){return t.TickSource=function(){var e=t.defaults(arguments,["frequency"],t.TickSource);this.frequency=new t.TickSignal(e.frequency,t.Type.Frequency),this._readOnly("frequency"),this._state=new t.TimelineState(t.State.Stopped),this._state.setStateAtTime(t.State.Stopped,0),this._tickOffset=new t.Timeline,this.setTicksAtTime(0,0)},t.extend(t.TickSource),t.TickSource.defaults={frequency:1},Object.defineProperty(t.TickSource.prototype,"state",{get:function(){return this._state.getValueAtTime(this.now())}}),t.TickSource.prototype.start=function(e,i){return e=this.toSeconds(e),this._state.getValueAtTime(e)!==t.State.Started&&(this._state.setStateAtTime(t.State.Started,e),t.isDefined(i)&&this.setTicksAtTime(i,e)),this},t.TickSource.prototype.stop=function(e){if(e=this.toSeconds(e),this._state.getValueAtTime(e)===t.State.Stopped){var i=this._state.get(e);i.time>0&&(this._tickOffset.cancel(i.time),this._state.cancel(i.time))}return this._state.cancel(e),this._state.setStateAtTime(t.State.Stopped,e),this.setTicksAtTime(0,e),this},t.TickSource.prototype.pause=function(e){return e=this.toSeconds(e),this._state.getValueAtTime(e)===t.State.Started&&this._state.setStateAtTime(t.State.Paused,e),this},t.TickSource.prototype.cancel=function(t){return t=this.toSeconds(t),this._state.cancel(t),this._tickOffset.cancel(t),this},t.TickSource.prototype.getTicksAtTime=function(e){e=this.toSeconds(e);var i=this._state.getLastState(t.State.Stopped,e),r={state:t.State.Paused,time:e};this._state.add(r);var n=i,o=0;return this._state.forEachBetween(i.time,e+this.sampleTime,function(e){var i=n.time,r=this._tickOffset.get(e.time);r.time>=n.time&&(o=r.ticks,i=r.time),n.state===t.State.Started&&e.state!==t.State.Started&&(o+=this.frequency.getTicksAtTime(e.time)-this.frequency.getTicksAtTime(i)),n=e}.bind(this)),this._state.remove(r),o},Object.defineProperty(t.TickSource.prototype,"ticks",{get:function(){return this.getTicksAtTime(this.now())},set:function(t){this.setTicksAtTime(t,this.now())}}),Object.defineProperty(t.TickSource.prototype,"seconds",{get:function(){return this.getSecondsAtTime(this.now())},set:function(t){var e=this.now(),i=this.frequency.timeToTicks(t,e);this.setTicksAtTime(i,e)}}),t.TickSource.prototype.getSecondsAtTime=function(e){e=this.toSeconds(e);var i=this._state.getLastState(t.State.Stopped,e),r={state:t.State.Paused,time:e};this._state.add(r);var n=i,o=0;return this._state.forEachBetween(i.time,e+this.sampleTime,function(e){var i=n.time,r=this._tickOffset.get(e.time);r.time>=n.time&&(o=r.seconds,i=r.time),n.state===t.State.Started&&e.state!==t.State.Started&&(o+=e.time-i),n=e}.bind(this)),this._state.remove(r),o},t.TickSource.prototype.setTicksAtTime=function(t,e){return e=this.toSeconds(e),this._tickOffset.cancel(e),this._tickOffset.add({time:e,ticks:t,seconds:this.frequency.getDurationOfTicks(t,e)}),this},t.TickSource.prototype.getStateAtTime=function(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)},t.TickSource.prototype.getTimeOfTick=function(e,i){i=t.defaultArg(i,this.now());var r=this._tickOffset.get(i),n=this._state.get(i),o=Math.max(r.time,n.time),s=this.frequency.getTicksAtTime(o)+e-r.ticks;return this.frequency.getTimeOfTick(s)},t.TickSource.prototype.forEachTickBetween=function(e,i,r){var n=this._state.get(e);if(this._state.forEachBetween(e,i,function(i){n.state===t.State.Started&&i.state!==t.State.Started&&this.forEachTickBetween(Math.max(n.time,e),i.time-this.sampleTime,r),n=i}.bind(this)),e=Math.max(n.time,e),n.state===t.State.Started&&this._state){var o=this.frequency.getTicksAtTime(e),s=(o-this.frequency.getTicksAtTime(n.time))%1;0!==s&&(s=1-s);for(var a=this.frequency.getTimeOfTick(o+s),h=null;a<i&&this._state;){try{r(a,Math.round(this.getTicksAtTime(a)))}catch(t){h=t;break}this._state&&(a+=this.frequency.getDurationOfTicks(1,a))}}if(h)throw h;return this},t.TickSource.prototype.dispose=function(){return t.Param.prototype.dispose.call(this),this._state.dispose(),this._state=null,this._tickOffset.dispose(),this._tickOffset=null,this._writable("frequency"),this.frequency.dispose(),this.frequency=null,this},t.TickSource}),e(function(t){return t.Clock=function(){var e=t.defaults(arguments,["callback","frequency"],t.Clock);t.Emitter.call(this),this.callback=e.callback,this._nextTick=0,this._tickSource=new t.TickSource(e.frequency),this._lastUpdate=0,this.frequency=this._tickSource.frequency,this._readOnly("frequency"),this._state=new t.TimelineState(t.State.Stopped),this._state.setStateAtTime(t.State.Stopped,0),this._boundLoop=this._loop.bind(this),this.context.on("tick",this._boundLoop)},t.extend(t.Clock,t.Emitter),t.Clock.defaults={callback:t.noOp,frequency:1},Object.defineProperty(t.Clock.prototype,"state",{get:function(){return this._state.getValueAtTime(this.now())}}),t.Clock.prototype.start=function(e,i){return e=this.toSeconds(e),this._state.getValueAtTime(e)!==t.State.Started&&(this._state.setStateAtTime(t.State.Started,e),this._tickSource.start(e,i),e<this._lastUpdate&&this.emit("start",e,i)),this},t.Clock.prototype.stop=function(e){return e=this.toSeconds(e),this._state.cancel(e),this._state.setStateAtTime(t.State.Stopped,e),this._tickSource.stop(e),e<this._lastUpdate&&this.emit("stop",e),this},t.Clock.prototype.pause=function(e){return e=this.toSeconds(e),this._state.getValueAtTime(e)===t.State.Started&&(this._state.setStateAtTime(t.State.Paused,e),this._tickSource.pause(e),e<this._lastUpdate&&this.emit("pause",e)),this},Object.defineProperty(t.Clock.prototype,"ticks",{get:function(){return Math.ceil(this.getTicksAtTime(this.now()))},set:function(t){this._tickSource.ticks=t}}),Object.defineProperty(t.Clock.prototype,"seconds",{get:function(){return this._tickSource.seconds},set:function(t){this._tickSource.seconds=t}}),t.Clock.prototype.getSecondsAtTime=function(t){return this._tickSource.getSecondsAtTime(t)},t.Clock.prototype.setTicksAtTime=function(t,e){return this._tickSource.setTicksAtTime(t,e),this},t.Clock.prototype.getTicksAtTime=function(t){return this._tickSource.getTicksAtTime(t)},t.Clock.prototype.nextTickTime=function(t,e){e=this.toSeconds(e);var i=this.getTicksAtTime(e);return this._tickSource.getTimeOfTick(i+t,e)},t.Clock.prototype._loop=function(){var e=this._lastUpdate,i=this.now();this._lastUpdate=i,e!==i&&(this._state.forEachBetween(e,i,function(e){switch(e.state){case t.State.Started:var i=this._tickSource.getTicksAtTime(e.time);this.emit("start",e.time,i);break;case t.State.Stopped:0!==e.time&&this.emit("stop",e.time);break;case t.State.Paused:this.emit("pause",e.time)}}.bind(this)),this._tickSource.forEachTickBetween(e,i,function(t,e){this.callback(t,e)}.bind(this)))},t.Clock.prototype.getStateAtTime=function(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)},t.Clock.prototype.dispose=function(){t.Emitter.prototype.dispose.call(this),this.context.off("tick",this._boundLoop),this._writable("frequency"),this._tickSource.dispose(),this._tickSource=null,this.frequency=null,this._boundLoop=null,this._nextTick=1/0,this.callback=null,this._state.dispose(),this._state=null},t.Clock}),e(function(t){t.IntervalTimeline=function(){t.call(this),this._root=null,this._length=0},t.extend(t.IntervalTimeline),t.IntervalTimeline.prototype.add=function(i){if(t.isUndef(i.time)||t.isUndef(i.duration))throw new Error("Tone.IntervalTimeline: events must have time and duration parameters");i.time=i.time.valueOf();var r=new e(i.time,i.time+i.duration,i);for(null===this._root?this._root=r:this._root.insert(r),this._length++;null!==r;)r.updateHeight(),r.updateMax(),this._rebalance(r),r=r.parent;return this},t.IntervalTimeline.prototype.remove=function(t){if(null!==this._root){var e=[];this._root.search(t.time,e);for(var i=0;i<e.length;i++){var r=e[i];if(r.event===t){this._removeNode(r),this._length--;break}}}return this},Object.defineProperty(t.IntervalTimeline.prototype,"length",{get:function(){return this._length}}),t.IntervalTimeline.prototype.cancel=function(t){return this.forEachFrom(t,function(t){this.remove(t)}.bind(this)),this},t.IntervalTimeline.prototype._setRoot=function(t){this._root=t,null!==this._root&&(this._root.parent=null)},t.IntervalTimeline.prototype._replaceNodeInParent=function(t,e){null!==t.parent?(t.isLeftChild()?t.parent.left=e:t.parent.right=e,this._rebalance(t.parent)):this._setRoot(e)},t.IntervalTimeline.prototype._removeNode=function(t){if(null===t.left&&null===t.right)this._replaceNodeInParent(t,null);else if(null===t.right)this._replaceNodeInParent(t,t.left);else if(null===t.left)this._replaceNodeInParent(t,t.right);else{var e,i;if(t.getBalance()>0)if(null===t.left.right)(e=t.left).right=t.right,i=e;else{for(e=t.left.right;null!==e.right;)e=e.right;e.parent.right=e.left,i=e.parent,e.left=t.left,e.right=t.right}else if(null===t.right.left)(e=t.right).left=t.left,i=e;else{for(e=t.right.left;null!==e.left;)e=e.left;e.parent=e.parent,e.parent.left=e.right,i=e.parent,e.left=t.left,e.right=t.right}null!==t.parent?t.isLeftChild()?t.parent.left=e:t.parent.right=e:this._setRoot(e),this._rebalance(i)}t.dispose()},t.IntervalTimeline.prototype._rotateLeft=function(t){var e=t.parent,i=t.isLeftChild(),r=t.right;t.right=r.left,r.left=t,null!==e?i?e.left=r:e.right=r:this._setRoot(r)},t.IntervalTimeline.prototype._rotateRight=function(t){var e=t.parent,i=t.isLeftChild(),r=t.left;t.left=r.right,r.right=t,null!==e?i?e.left=r:e.right=r:this._setRoot(r)},t.IntervalTimeline.prototype._rebalance=function(t){var e=t.getBalance();e>1?t.left.getBalance()<0?this._rotateLeft(t.left):this._rotateRight(t):e<-1&&(t.right.getBalance()>0?this._rotateRight(t.right):this._rotateLeft(t))},t.IntervalTimeline.prototype.get=function(t){if(null!==this._root){var e=[];if(this._root.search(t,e),e.length>0){for(var i=e[0],r=1;r<e.length;r++)e[r].low>i.low&&(i=e[r]);return i.event}}return null},t.IntervalTimeline.prototype.forEach=function(t){if(null!==this._root){var e=[];this._root.traverse(function(t){e.push(t)});for(var i=0;i<e.length;i++){var r=e[i].event;r&&t(r)}}return this},t.IntervalTimeline.prototype.forEachAtTime=function(t,e){if(null!==this._root){var i=[];this._root.search(t,i);for(var r=i.length-1;r>=0;r--){var n=i[r].event;n&&e(n)}}return this},t.IntervalTimeline.prototype.forEachFrom=function(t,e){if(null!==this._root){var i=[];this._root.searchAfter(t,i);for(var r=i.length-1;r>=0;r--)e(i[r].event)}return this},t.IntervalTimeline.prototype.dispose=function(){var t=[];null!==this._root&&this._root.traverse(function(e){t.push(e)});for(var e=0;e<t.length;e++)t[e].dispose();return t=null,this._root=null,this};var e=function(t,e,i){this.event=i,this.low=t,this.high=e,this.max=this.high,this._left=null,this._right=null,this.parent=null,this.height=0};return e.prototype.insert=function(t){t.low<=this.low?null===this.left?this.left=t:this.left.insert(t):null===this.right?this.right=t:this.right.insert(t)},e.prototype.search=function(t,e){t>this.max||(null!==this.left&&this.left.search(t,e),this.low<=t&&this.high>t&&e.push(this),this.low>t||null!==this.right&&this.right.search(t,e))},e.prototype.searchAfter=function(t,e){this.low>=t&&(e.push(this),null!==this.left&&this.left.searchAfter(t,e)),null!==this.right&&this.right.searchAfter(t,e)},e.prototype.traverse=function(t){t(this),null!==this.left&&this.left.traverse(t),null!==this.right&&this.right.traverse(t)},e.prototype.updateHeight=function(){null!==this.left&&null!==this.right?this.height=Math.max(this.left.height,this.right.height)+1:null!==this.right?this.height=this.right.height+1:null!==this.left?this.height=this.left.height+1:this.height=0},e.prototype.updateMax=function(){this.max=this.high,null!==this.left&&(this.max=Math.max(this.max,this.left.max)),null!==this.right&&(this.max=Math.max(this.max,this.right.max))},e.prototype.getBalance=function(){var t=0;return null!==this.left&&null!==this.right?t=this.left.height-this.right.height:null!==this.left?t=this.left.height+1:null!==this.right&&(t=-(this.right.height+1)),t},e.prototype.isLeftChild=function(){return null!==this.parent&&this.parent.left===this},Object.defineProperty(e.prototype,"left",{get:function(){return this._left},set:function(t){this._left=t,null!==t&&(t.parent=this),this.updateHeight(),this.updateMax()}}),Object.defineProperty(e.prototype,"right",{get:function(){return this._right},set:function(t){this._right=t,null!==t&&(t.parent=this),this.updateHeight(),this.updateMax()}}),e.prototype.dispose=function(){this.parent=null,this._left=null,this._right=null,this.event=null},t.IntervalTimeline}),e(function(t){return t.Ticks=function(e,i){if(!(this instanceof t.Ticks))return new t.Ticks(e,i);t.TransportTime.call(this,e,i)},t.extend(t.Ticks,t.TransportTime),t.Ticks.prototype._defaultUnits="i",t.Ticks.prototype._now=function(){return t.Transport.ticks},t.Ticks.prototype._beatsToUnits=function(t){return this._getPPQ()*t},t.Ticks.prototype._secondsToUnits=function(t){return t/(60/this._getBpm())*this._getPPQ()},t.Ticks.prototype._ticksToUnits=function(t){return t},t.Ticks.prototype.toTicks=function(){return this.valueOf()},t.Ticks.prototype.toSeconds=function(){return this.valueOf()/this._getPPQ()*(60/this._getBpm())},t.Ticks}),e(function(t){return t.TransportEvent=function(e,i){i=t.defaultArg(i,t.TransportEvent.defaults),t.call(this),this.Transport=e,this.id=t.TransportEvent._eventId++,this.time=t.Ticks(i.time),this.callback=i.callback,this._once=i.once},t.extend(t.TransportEvent),t.TransportEvent.defaults={once:!1,callback:t.noOp},t.TransportEvent._eventId=0,t.TransportEvent.prototype.invoke=function(t){this.callback&&(this.callback(t),this._once&&this.Transport&&this.Transport.clear(this.id))},t.TransportEvent.prototype.dispose=function(){return t.prototype.dispose.call(this),this.Transport=null,this.callback=null,this.time=null,this},t.TransportEvent}),e(function(t){return t.TransportRepeatEvent=function(e,i){t.TransportEvent.call(this,e,i),i=t.defaultArg(i,t.TransportRepeatEvent.defaults),this.duration=t.Ticks(i.duration),this._interval=t.Ticks(i.interval),this._currentId=-1,this._nextId=-1,this._nextTick=this.time,this._boundRestart=this._restart.bind(this),this.Transport.on("start loopStart",this._boundRestart),this._restart()},t.extend(t.TransportRepeatEvent,t.TransportEvent),t.TransportRepeatEvent.defaults={duration:1/0,interval:1},t.TransportRepeatEvent.prototype.invoke=function(e){this._createEvents(e),t.TransportEvent.prototype.invoke.call(this,e)},t.TransportRepeatEvent.prototype._createEvents=function(e){var i=this.Transport.getTicksAtTime(e);i>=this.time&&i>=this._nextTick&&this._nextTick+this._interval<this.time+this.duration&&(this._nextTick+=this._interval,this._currentId=this._nextId,this._nextId=this.Transport.scheduleOnce(this.invoke.bind(this),t.Ticks(this._nextTick)))},t.TransportRepeatEvent.prototype._restart=function(e){this.Transport.clear(this._currentId),this.Transport.clear(this._nextId),this._nextTick=this.time;var i=this.Transport.getTicksAtTime(e);i>this.time&&(this._nextTick=this.time+Math.ceil((i-this.time)/this._interval)*this._interval),this._currentId=this.Transport.scheduleOnce(this.invoke.bind(this),t.Ticks(this._nextTick)),this._nextTick+=this._interval,this._nextId=this.Transport.scheduleOnce(this.invoke.bind(this),t.Ticks(this._nextTick))},t.TransportRepeatEvent.prototype.dispose=function(){return this.Transport.clear(this._currentId),this.Transport.clear(this._nextId),this.Transport.off("start loopStart",this._boundRestart),this._boundCreateEvents=null,t.TransportEvent.prototype.dispose.call(this),this.duration=null,this._interval=null,this},t.TransportRepeatEvent}),e(function(t){t.Transport=function(){t.Emitter.call(this),t.getContext(function(){this.loop=!1,this._loopStart=0,this._loopEnd=0,this._ppq=e.defaults.PPQ,this._clock=new t.Clock({callback:this._processTick.bind(this),frequency:0}),this._bindClockEvents(),this.bpm=this._clock.frequency,this.bpm._toUnits=this._toUnits.bind(this),this.bpm._fromUnits=this._fromUnits.bind(this),this.bpm.units=t.Type.BPM,this.bpm.value=e.defaults.bpm,this._readOnly("bpm"),this._timeSignature=e.defaults.timeSignature,this._scheduledEvents={},this._timeline=new t.Timeline,this._repeatedEvents=new t.IntervalTimeline,this._syncedSignals=[],this._swingTicks=e.defaults.PPQ/2,this._swingAmount=0}.bind(this))},t.extend(t.Transport,t.Emitter),t.Transport.defaults={bpm:120,swing:0,swingSubdivision:"8n",timeSignature:4,loopStart:0,loopEnd:"4m",PPQ:192},t.Transport.prototype._processTick=function(e,i){if(this._swingAmount>0&&i%this._ppq!=0&&i%(2*this._swingTicks)!=0){var r=i%(2*this._swingTicks)/(2*this._swingTicks),n=Math.sin(r*Math.PI)*this._swingAmount;e+=t.Ticks(2*this._swingTicks/3).toSeconds()*n}this.loop&&i>=this._loopEnd&&(this.emit("loopEnd",e),this._clock.setTicksAtTime(this._loopStart,e),i=this._loopStart,this.emit("loopStart",e,this._clock.getSecondsAtTime(e)),this.emit("loop",e)),this._timeline.forEachAtTime(i,function(t){t.invoke(e)})},t.Transport.prototype.schedule=function(e,i){var r=new t.TransportEvent(this,{time:t.TransportTime(i),callback:e});return this._addEvent(r,this._timeline)},t.Transport.prototype.scheduleRepeat=function(e,i,r,n){var o=new t.TransportRepeatEvent(this,{callback:e,interval:t.Time(i),time:t.TransportTime(r),duration:t.Time(t.defaultArg(n,1/0))});return this._addEvent(o,this._repeatedEvents)},t.Transport.prototype.scheduleOnce=function(e,i){var r=new t.TransportEvent(this,{time:t.TransportTime(i),callback:e,once:!0});return this._addEvent(r,this._timeline)},t.Transport.prototype.clear=function(t){if(this._scheduledEvents.hasOwnProperty(t)){var e=this._scheduledEvents[t.toString()];e.timeline.remove(e.event),e.event.dispose(),delete this._scheduledEvents[t.toString()]}return this},t.Transport.prototype._addEvent=function(t,e){return this._scheduledEvents[t.id.toString()]={event:t,timeline:e},e.add(t),t.id},t.Transport.prototype.cancel=function(e){return e=t.defaultArg(e,0),e=this.toTicks(e),this._timeline.forEachFrom(e,function(t){this.clear(t.id)}.bind(this)),this._repeatedEvents.forEachFrom(e,function(t){this.clear(t.id)}.bind(this)),this},t.Transport.prototype._bindClockEvents=function(){this._clock.on("start",function(e,i){i=t.Ticks(i).toSeconds(),this.emit("start",e,i)}.bind(this)),this._clock.on("stop",function(t){this.emit("stop",t)}.bind(this)),this._clock.on("pause",function(t){this.emit("pause",t)}.bind(this))},Object.defineProperty(t.Transport.prototype,"state",{get:function(){return this._clock.getStateAtTime(this.now())}}),t.Transport.prototype.start=function(e,i){return t.isDefined(i)&&(i=this.toTicks(i)),this._clock.start(e,i),this},t.Transport.prototype.stop=function(t){return this._clock.stop(t),this},t.Transport.prototype.pause=function(t){return this._clock.pause(t),this},t.Transport.prototype.toggle=function(e){return e=this.toSeconds(e),this._clock.getStateAtTime(e)!==t.State.Started?this.start(e):this.stop(e),this},Object.defineProperty(t.Transport.prototype,"timeSignature",{get:function(){return this._timeSignature},set:function(e){t.isArray(e)&&(e=e[0]/e[1]*4),this._timeSignature=e}}),Object.defineProperty(t.Transport.prototype,"loopStart",{get:function(){return t.Ticks(this._loopStart).toSeconds()},set:function(t){this._loopStart=this.toTicks(t)}}),Object.defineProperty(t.Transport.prototype,"loopEnd",{get:function(){return t.Ticks(this._loopEnd).toSeconds()},set:function(t){this._loopEnd=this.toTicks(t)}}),t.Transport.prototype.setLoopPoints=function(t,e){return this.loopStart=t,this.loopEnd=e,this},Object.defineProperty(t.Transport.prototype,"swing",{get:function(){return this._swingAmount},set:function(t){this._swingAmount=t}}),Object.defineProperty(t.Transport.prototype,"swingSubdivision",{get:function(){return t.Ticks(this._swingTicks).toNotation()},set:function(t){this._swingTicks=this.toTicks(t)}}),Object.defineProperty(t.Transport.prototype,"position",{get:function(){var e=this.now(),i=this._clock.getTicksAtTime(e);return t.Ticks(i).toBarsBeatsSixteenths()},set:function(t){var e=this.toTicks(t);this.ticks=e}}),Object.defineProperty(t.Transport.prototype,"seconds",{get:function(){return this._clock.seconds},set:function(t){var e=this.now(),i=this.bpm.timeToTicks(t,e);this.ticks=i}}),Object.defineProperty(t.Transport.prototype,"progress",{get:function(){if(this.loop){var t=this.now();return(this._clock.getTicksAtTime(t)-this._loopStart)/(this._loopEnd-this._loopStart)}return 0}}),Object.defineProperty(t.Transport.prototype,"ticks",{get:function(){return this._clock.ticks},set:function(e){if(this._clock.ticks!==e){var i=this.now();this.state===t.State.Started?(this.emit("stop",i),this._clock.setTicksAtTime(e,i),this.emit("start",i,this.seconds)):this._clock.setTicksAtTime(e,i)}}}),t.Transport.prototype.getTicksAtTime=function(t){return Math.round(this._clock.getTicksAtTime(t))},t.Transport.prototype.getSecondsAtTime=function(t){return this._clock.getSecondsAtTime(t)},Object.defineProperty(t.Transport.prototype,"PPQ",{get:function(){return this._ppq},set:function(t){var e=this.bpm.value;this._ppq=t,this.bpm.value=e}}),t.Transport.prototype._fromUnits=function(t){return 1/(60/t/this.PPQ)},t.Transport.prototype._toUnits=function(t){return t/this.PPQ*60},t.Transport.prototype.nextSubdivision=function(e){if(e=this.toTicks(e),this.state!==t.State.Started)return 0;var i=this.now(),r=e-this.getTicksAtTime(i)%e;return this._clock.nextTickTime(r,i)},t.Transport.prototype.syncSignal=function(e,i){if(!i){var r=this.now();i=0!==e.getValueAtTime(r)?e.getValueAtTime(r)/this.bpm.getValueAtTime(r):0}var n=new t.Gain(i);return this.bpm.chain(n,e._param),this._syncedSignals.push({ratio:n,signal:e,initial:e.value}),e.value=0,this},t.Transport.prototype.unsyncSignal=function(t){for(var e=this._syncedSignals.length-1;e>=0;e--){var i=this._syncedSignals[e];i.signal===t&&(i.ratio.dispose(),i.signal.value=i.initial,this._syncedSignals.splice(e,1))}return this},t.Transport.prototype.dispose=function(){return t.Emitter.prototype.dispose.call(this),this._clock.dispose(),this._clock=null,this._writable("bpm"),this.bpm=null,this._timeline.dispose(),this._timeline=null,this._repeatedEvents.dispose(),this._repeatedEvents=null,this};var e=t.Transport;return t.Transport=new e,t.Context.on("init",function(i){i.Transport instanceof e?t.Transport=i.Transport:t.Transport=new e,i.Transport=t.Transport}),t.Context.on("close",function(t){t.Transport instanceof e&&t.Transport.dispose()}),t.Transport}),e(function(t){return t.Volume=function(){var e=t.defaults(arguments,["volume"],t.Volume);t.AudioNode.call(this),this.output=this.input=new t.Gain(e.volume,t.Type.Decibels),this._unmutedVolume=e.volume,this.volume=this.output.gain,this._readOnly("volume"),this.mute=e.mute},t.extend(t.Volume,t.AudioNode),t.Volume.defaults={volume:0,mute:!1},Object.defineProperty(t.Volume.prototype,"mute",{get:function(){return this.volume.value===-1/0},set:function(t){!this.mute&&t?(this._unmutedVolume=this.volume.value,this.volume.value=-1/0):this.mute&&!t&&(this.volume.value=this._unmutedVolume)}}),t.Volume.prototype.dispose=function(){return this.input.dispose(),t.AudioNode.prototype.dispose.call(this),this._writable("volume"),this.volume.dispose(),this.volume=null,this},t.Volume}),e(function(t){t.Master=function(){t.AudioNode.call(this),t.getContext(function(){this.createInsOuts(1,0),this._volume=this.output=new t.Volume,this.volume=this._volume.volume,this._readOnly("volume"),this.input.chain(this.output,this.context.destination)}.bind(this))},t.extend(t.Master,t.AudioNode),t.Master.defaults={volume:0,mute:!1},Object.defineProperty(t.Master.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t}}),t.Master.prototype.chain=function(){this.input.disconnect(),this.input.chain.apply(this.input,arguments),arguments[arguments.length-1].connect(this.output)},t.Master.prototype.dispose=function(){t.AudioNode.prototype.dispose.call(this),this._writable("volume"),this._volume.dispose(),this._volume=null,this.volume=null},t.AudioNode.prototype.toMaster=function(){return this.connect(t.Master),this},window.AudioNode&&(AudioNode.prototype.toMaster=function(){return this.connect(t.Master),this});var e=t.Master;return t.Master=new e,t.Context.on("init",function(i){i.Master instanceof e?t.Master=i.Master:t.Master=new e,i.Master=t.Master}),t.Context.on("close",function(t){t.Master instanceof e&&t.Master.dispose()}),t.Master}),e(function(t){return t.Source=function(e){e=t.defaultArg(e,t.Source.defaults),t.AudioNode.call(this),this._volume=this.output=new t.Volume(e.volume),this.volume=this._volume.volume,this._readOnly("volume"),this._state=new t.TimelineState(t.State.Stopped),this._state.memory=100,this._synced=!1,this._scheduled=[],this._volume.output.output.channelCount=2,this._volume.output.output.channelCountMode="explicit",this.mute=e.mute},t.extend(t.Source,t.AudioNode),t.Source.defaults={volume:0,mute:!1},Object.defineProperty(t.Source.prototype,"state",{get:function(){return this._synced?t.Transport.state===t.State.Started?this._state.getValueAtTime(t.Transport.seconds):t.State.Stopped:this._state.getValueAtTime(this.now())}}),Object.defineProperty(t.Source.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t}}),t.Source.prototype._start=t.noOp,t.Source.prototype.restart=t.noOp,t.Source.prototype._stop=t.noOp,t.Source.prototype.start=function(e,i,r){if(e=t.isUndef(e)&&this._synced?t.Transport.seconds:this.toSeconds(e),this._state.getValueAtTime(e)===t.State.Started)this._state.cancel(e),this._state.setStateAtTime(t.State.Started,e),this.restart(e,i,r);else if(this._state.setStateAtTime(t.State.Started,e),this._synced){var n=this._state.get(e);n.offset=t.defaultArg(i,0),n.duration=r;var o=t.Transport.schedule(function(t){this._start(t,i,r)}.bind(this),e);this._scheduled.push(o),t.Transport.state===t.State.Started&&this._syncedStart(this.now(),t.Transport.seconds)}else this._start.apply(this,arguments);return this},t.Source.prototype.stop=function(e){if(e=t.isUndef(e)&&this._synced?t.Transport.seconds:this.toSeconds(e),this._synced){var i=t.Transport.schedule(this._stop.bind(this),e);this._scheduled.push(i)}else this._stop.apply(this,arguments);return this._state.cancel(e),this._state.setStateAtTime(t.State.Stopped,e),this},t.Source.prototype.sync=function(){return this._synced=!0,this._syncedStart=function(e,i){if(i>0){var r=this._state.get(i);if(r&&r.state===t.State.Started&&r.time!==i){var n,o=i-this.toSeconds(r.time);r.duration&&(n=this.toSeconds(r.duration)-o),this._start(e,this.toSeconds(r.offset)+o,n)}}}.bind(this),this._syncedStop=function(e){var i=t.Transport.getSecondsAtTime(Math.max(e-this.sampleTime,0));this._state.getValueAtTime(i)===t.State.Started&&this._stop(e)}.bind(this),t.Transport.on("start loopStart",this._syncedStart),t.Transport.on("stop pause loopEnd",this._syncedStop),this},t.Source.prototype.unsync=function(){this._synced&&(t.Transport.off("stop pause loopEnd",this._syncedStop),t.Transport.off("start loopStart",this._syncedStart)),this._synced=!1;for(var e=0;e<this._scheduled.length;e++){var i=this._scheduled[e];t.Transport.clear(i)}return this._scheduled=[],this._state.cancel(0),this},t.Source.prototype.dispose=function(){t.AudioNode.prototype.dispose.call(this),this.unsync(),this._scheduled=null,this._writable("volume"),this._volume.dispose(),this._volume=null,this.volume=null,this._state.dispose(),this._state=null},t.Source}),e(function(t){t.supported&&(AudioBuffer.prototype.copyToChannel||(AudioBuffer.prototype.copyToChannel=function(t,e,i){var r=this.getChannelData(e);i=i||0;for(var n=0;n<r.length;n++)r[n+i]=t[n]},AudioBuffer.prototype.copyFromChannel=function(t,e,i){var r=this.getChannelData(e);i=i||0;for(var n=0;n<t.length;n++)t[n]=r[n+i]}))}),e(function(t){return t.Buffer=function(){var e=t.defaults(arguments,["url","onload","onerror"],t.Buffer);t.call(this),this._buffer=null,this._reversed=e.reverse,this._xhr=null,this._onload=t.noOp,e.url instanceof AudioBuffer||e.url instanceof t.Buffer?(this.set(e.url),e.onload&&(this.loaded?e.onload(this):this._onload=e.onload)):t.isString(e.url)&&this.load(e.url).then(e.onload).catch(e.onerror)},t.extend(t.Buffer),t.Buffer.defaults={url:void 0,reverse:!1,onload:t.noOp,onerror:t.noOp},t.Buffer.prototype.set=function(e){return e instanceof t.Buffer?e.loaded?this._buffer=e.get():e._onload=function(){this.set(e),this._onload(this)}.bind(this):this._buffer=e,this},t.Buffer.prototype.get=function(){return this._buffer},t.Buffer.prototype.load=function(e,i,r){return new Promise(function(n,o){this._xhr=t.Buffer.load(e,function(t){this._xhr=null,this.set(t),n(this),this._onload(this),i&&i(this)}.bind(this),function(t){this._xhr=null,o(t),r&&r(t)}.bind(this))}.bind(this))},t.Buffer.prototype.dispose=function(){return t.prototype.dispose.call(this),this._buffer=null,this._xhr&&(t.Buffer._removeFromDownloadQueue(this._xhr),this._xhr.abort(),this._xhr=null),this},Object.defineProperty(t.Buffer.prototype,"loaded",{get:function(){return this.length>0}}),Object.defineProperty(t.Buffer.prototype,"duration",{get:function(){return this._buffer?this._buffer.duration:0}}),Object.defineProperty(t.Buffer.prototype,"length",{get:function(){return this._buffer?this._buffer.length:0}}),Object.defineProperty(t.Buffer.prototype,"numberOfChannels",{get:function(){return this._buffer?this._buffer.numberOfChannels:0}}),t.Buffer.prototype.fromArray=function(t){var e=t[0].length>0,i=e?t.length:1,r=e?t[0].length:t.length,n=this.context.createBuffer(i,r,this.context.sampleRate);e||1!==i||(t=[t]);for(var o=0;o<i;o++)n.copyToChannel(t[o],o);return this._buffer=n,this},t.Buffer.prototype.toMono=function(e){if(t.isNumber(e))this.fromArray(this.toArray(e));else{for(var i=new Float32Array(this.length),r=this.numberOfChannels,n=0;n<r;n++)for(var o=this.toArray(n),s=0;s<o.length;s++)i[s]+=o[s];i=i.map(function(t){return t/r}),this.fromArray(i)}return this},t.Buffer.prototype.toArray=function(e){if(t.isNumber(e))return this.getChannelData(e);if(1===this.numberOfChannels)return this.toArray(0);for(var i=[],r=0;r<this.numberOfChannels;r++)i[r]=this.getChannelData(r);return i},t.Buffer.prototype.getChannelData=function(t){return this._buffer.getChannelData(t)},t.Buffer.prototype.slice=function(e,i){i=t.defaultArg(i,this.duration);for(var r=Math.floor(this.context.sampleRate*this.toSeconds(e)),n=Math.floor(this.context.sampleRate*this.toSeconds(i)),o=[],s=0;s<this.numberOfChannels;s++)o[s]=this.toArray(s).slice(r,n);return(new t.Buffer).fromArray(o)},t.Buffer.prototype._reverse=function(){if(this.loaded)for(var t=0;t<this.numberOfChannels;t++)Array.prototype.reverse.call(this.getChannelData(t));return this},Object.defineProperty(t.Buffer.prototype,"reverse",{get:function(){return this._reversed},set:function(t){this._reversed!==t&&(this._reversed=t,this._reverse())}}),t.Emitter.mixin(t.Buffer),t.Buffer._downloadQueue=[],t.Buffer.baseUrl="",t.Buffer.fromArray=function(e){return(new t.Buffer).fromArray(e)},t.Buffer.fromUrl=function(e){var i=new t.Buffer;return i.load(e).then(function(){return i})},t.Buffer._removeFromDownloadQueue=function(e){var i=t.Buffer._downloadQueue.indexOf(e);-1!==i&&t.Buffer._downloadQueue.splice(i,1)},t.Buffer.load=function(e,i,r){i=t.defaultArg(i,t.noOp);var n=e.match(/\[(.+\|?)+\]$/);if(n){for(var o=n[1].split("|"),s=o[0],a=0;a<o.length;a++)if(t.Buffer.supportsType(o[a])){s=o[a];break}e=e.replace(n[0],s)}function h(e){if(t.Buffer._removeFromDownloadQueue(u),t.Buffer.emit("error",e),!r)throw e;r(e)}function l(){for(var e=0,i=0;i<t.Buffer._downloadQueue.length;i++)e+=t.Buffer._downloadQueue[i].progress;t.Buffer.emit("progress",e/t.Buffer._downloadQueue.length)}var u=new XMLHttpRequest;return u.open("GET",t.Buffer.baseUrl+e,!0),u.responseType="arraybuffer",u.progress=0,t.Buffer._downloadQueue.push(u),u.addEventListener("load",function(){200===u.status?t.context.decodeAudioData(u.response).then(function(e){u.progress=1,l(),i(e),t.Buffer._removeFromDownloadQueue(u),0===t.Buffer._downloadQueue.length&&t.Buffer.emit("load")}).catch(function(){t.Buffer._removeFromDownloadQueue(u),h("Tone.Buffer: could not decode audio data: "+e)}):h("Tone.Buffer: could not locate file: "+e)}),u.addEventListener("error",h),u.addEventListener("progress",function(t){t.lengthComputable&&(u.progress=t.loaded/t.total*.95,l())}),u.send(),u},t.Buffer.cancelDownloads=function(){return t.Buffer._downloadQueue.slice().forEach(function(e){t.Buffer._removeFromDownloadQueue(e),e.abort()}),t.Buffer},t.Buffer.supportsType=function(t){var e=t.split(".");return e=e[e.length-1],""!==document.createElement("audio").canPlayType("audio/"+e)},t.loaded=function(){var e,i;function r(){t.Buffer.off("load",e),t.Buffer.off("error",i)}return new Promise(function(r,n){e=function(){r()},i=function(){n()},t.Buffer.on("load",e),t.Buffer.on("error",i)}).then(r).catch(function(t){throw r(),new Error(t)})},t.Buffer}),e(function(t){return t.OscillatorNode=function(){var e=t.defaults(arguments,["frequency","type"],t.OscillatorNode);t.AudioNode.call(this,e),this.onended=e.onended,this._startTime=-1,this._stopTime=-1,this._gainNode=this.output=new t.Gain,this._gainNode.gain.setValueAtTime(0,this.context.currentTime),this._oscillator=this.context.createOscillator(),this._oscillator.connect(this._gainNode),this.type=e.type,this.frequency=new t.Param(this._oscillator.frequency,t.Type.Frequency),this.frequency.value=e.frequency,this.detune=new t.Param(this._oscillator.detune,t.Type.Cents),this.detune.value=e.detune,this._gain=1},t.extend(t.OscillatorNode,t.AudioNode),t.OscillatorNode.defaults={frequency:440,detune:0,type:"sine",onended:t.noOp},Object.defineProperty(t.OscillatorNode.prototype,"state",{get:function(){return this.getStateAtTime(this.now())}}),t.OscillatorNode.prototype.getStateAtTime=function(e){return e=this.toSeconds(e),-1!==this._startTime&&e>=this._startTime&&(-1===this._stopTime||e<=this._stopTime)?t.State.Started:t.State.Stopped},t.OscillatorNode.prototype.start=function(t){if(-1!==this._startTime)throw new Error("cannot call OscillatorNode.start more than once");this._startTime=this.toSeconds(t),this._oscillator.start(this._startTime);var e=this.context.currentTime;return this._gainNode.gain.cancelScheduledValues(e),this._gainNode.gain.setValueAtTime(0,e),this._gainNode.gain.setValueAtTime(1,this._startTime),this},t.OscillatorNode.prototype.setPeriodicWave=function(t){return this._oscillator.setPeriodicWave(t),this},t.OscillatorNode.prototype.stop=function(t){return this.cancelStop(),this._stopTime=this.toSeconds(t),this._gainNode.gain.setValueAtTime(0,this._stopTime),this.context.clearTimeout(this._timeout),this._timeout=this.context.setTimeout(function(){this._oscillator.stop(this.now()),this.onended()}.bind(this),this._stopTime-this.now()),this},t.OscillatorNode.prototype.cancelStop=function(){return-1!==this._startTime&&(this._gainNode.gain.cancelScheduledValues(this._startTime+this.sampleTime),this._gainNode.gain.setValueAtTime(1,Math.max(this.now(),this._startTime)),this.context.clearTimeout(this._timeout),this._stopTime=-1),this},Object.defineProperty(t.OscillatorNode.prototype,"type",{get:function(){return this._oscillator.type},set:function(t){this._oscillator.type=t}}),t.OscillatorNode.prototype.dispose=function(){return this.context.clearTimeout(this._timeout),t.AudioNode.prototype.dispose.call(this),this.onended=null,this._oscillator.disconnect(),this._oscillator=null,this._gainNode.dispose(),this._gainNode=null,this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null,this},t.OscillatorNode}),e(function(t){return t.Oscillator=function(){var e=t.defaults(arguments,["frequency","type"],t.Oscillator);t.Source.call(this,e),this._oscillator=null,this.frequency=new t.Signal(e.frequency,t.Type.Frequency),this.detune=new t.Signal(e.detune,t.Type.Cents),this._wave=null,this._partials=t.defaultArg(e.partials,[1]),this._phase=e.phase,this._type=null,this.type=e.type,this.phase=this._phase,this._readOnly(["frequency","detune"])},t.extend(t.Oscillator,t.Source),t.Oscillator.defaults={type:"sine",frequency:440,detune:0,phase:0,partials:[]},t.Oscillator.Type={Sine:"sine",Triangle:"triangle",Sawtooth:"sawtooth",Square:"square",Custom:"custom"},t.Oscillator.prototype._start=function(e){this._oscillator=new t.OscillatorNode,this._wave?this._oscillator.setPeriodicWave(this._wave):this._oscillator.type=this._type,this._oscillator.connect(this.output),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),e=this.toSeconds(e),this._oscillator.start(e)},t.Oscillator.prototype._stop=function(t){return this._oscillator&&(t=this.toSeconds(t),this._oscillator.stop(t)),this},t.Oscillator.prototype.restart=function(t){return this._oscillator.cancelStop(),this._state.cancel(this.toSeconds(t)),this},t.Oscillator.prototype.syncFrequency=function(){return t.Transport.syncSignal(this.frequency),this},t.Oscillator.prototype.unsyncFrequency=function(){return t.Transport.unsyncSignal(this.frequency),this},Object.defineProperty(t.Oscillator.prototype,"type",{get:function(){return this._type},set:function(e){var i=[t.Oscillator.Type.Sine,t.Oscillator.Type.Square,t.Oscillator.Type.Triangle,t.Oscillator.Type.Sawtooth].includes(e);if(0===this._phase&&i)this._wave=null,null!==this._oscillator&&this._oscillator.type;else{var r=this._getRealImaginary(e,this._phase),n=this.context.createPeriodicWave(r[0],r[1]);this._wave=n,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave)}this._type=e}}),t.Oscillator.prototype._getRealImaginary=function(e,i){var r=2048,n=new Float32Array(r),o=new Float32Array(r),s=1;if(e===t.Oscillator.Type.Custom)r=s=this._partials.length+1;else{var a=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(e);a&&(s=parseInt(a[2])+1,e=a[1],r=s=Math.max(s,2))}for(var h=1;h<r;++h){var l,u=2/(h*Math.PI);switch(e){case t.Oscillator.Type.Sine:l=h<=s?1:0;break;case t.Oscillator.Type.Square:l=1&h?2*u:0;break;case t.Oscillator.Type.Sawtooth:l=u*(1&h?1:-1);break;case t.Oscillator.Type.Triangle:l=1&h?u*u*2*(h-1>>1&1?-1:1):0;break;case t.Oscillator.Type.Custom:l=this._partials[h-1];break;default:throw new TypeError("Tone.Oscillator: invalid type: "+e)}0!==l?(n[h]=-l*Math.sin(i*h),o[h]=l*Math.cos(i*h)):(n[h]=0,o[h]=0)}return[n,o]},t.Oscillator.prototype._inverseFFT=function(t,e,i){for(var r=0,n=t.length,o=0;o<n;o++)r+=t[o]*Math.cos(o*i)+e[o]*Math.sin(o*i);return r},t.Oscillator.prototype._getInitialValue=function(){for(var t=this._getRealImaginary(this._type,0),e=t[0],i=t[1],r=0,n=2*Math.PI,o=0;o<8;o++)r=Math.max(this._inverseFFT(e,i,o/8*n),r);return-this._inverseFFT(e,i,this._phase)/r},Object.defineProperty(t.Oscillator.prototype,"partials",{get:function(){return this._type!==t.Oscillator.Type.Custom?[]:this._partials},set:function(e){this._partials=e,this.type=t.Oscillator.Type.Custom}}),Object.defineProperty(t.Oscillator.prototype,"phase",{get:function(){return this._phase*(180/Math.PI)},set:function(t){this._phase=t*Math.PI/180,this.type=this._type}}),t.Oscillator.prototype.dispose=function(){return t.Source.prototype.dispose.call(this),null!==this._oscillator&&(this._oscillator.dispose(),this._oscillator=null),this._wave=null,this._writable(["frequency","detune"]),this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null,this._partials=null,this},t.Oscillator}),e(function(t){return t.AudioToGain=function(){t.SignalBase.call(this),this._norm=this.input=this.output=new t.WaveShaper(function(t){return(t+1)/2})},t.extend(t.AudioToGain,t.SignalBase),t.AudioToGain.prototype.dispose=function(){return t.SignalBase.prototype.dispose.call(this),this._norm.dispose(),this._norm=null,this},t.AudioToGain}),e(function(t){return t.Zero=function(){t.SignalBase.call(this),this._gain=this.input=this.output=new t.Gain,this.context.getConstant(0).connect(this._gain)},t.extend(t.Zero,t.SignalBase),t.Zero.prototype.dispose=function(){return t.SignalBase.prototype.dispose.call(this),this._gain.dispose(),this._gain=null,this},t.Zero}),e(function(t){return t.LFO=function(){var e=t.defaults(arguments,["frequency","min","max"],t.LFO);t.AudioNode.call(this),this._oscillator=new t.Oscillator({frequency:e.frequency,type:e.type}),this.frequency=this._oscillator.frequency,this.amplitude=this._oscillator.volume,this.amplitude.units=t.Type.NormalRange,this.amplitude.value=e.amplitude,this._stoppedSignal=new t.Signal(0,t.Type.AudioRange),this._zeros=new t.Zero,this._stoppedValue=0,this._a2g=new t.AudioToGain,this._scaler=this.output=new t.Scale(e.min,e.max),this._units=t.Type.Default,this.units=e.units,this._oscillator.chain(this._a2g,this._scaler),this._zeros.connect(this._a2g),this._stoppedSignal.connect(this._a2g),this._readOnly(["amplitude","frequency"]),this.phase=e.phase},t.extend(t.LFO,t.AudioNode),t.LFO.defaults={type:"sine",min:0,max:1,phase:0,frequency:"4n",amplitude:1,units:t.Type.Default},t.LFO.prototype.start=function(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(0,t),this._oscillator.start(t),this},t.LFO.prototype.stop=function(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(this._stoppedValue,t),this._oscillator.stop(t),this},t.LFO.prototype.sync=function(){return this._oscillator.sync(),this._oscillator.syncFrequency(),this},t.LFO.prototype.unsync=function(){return this._oscillator.unsync(),this._oscillator.unsyncFrequency(),this},Object.defineProperty(t.LFO.prototype,"min",{get:function(){return this._toUnits(this._scaler.min)},set:function(t){t=this._fromUnits(t),this._scaler.min=t}}),Object.defineProperty(t.LFO.prototype,"max",{get:function(){return this._toUnits(this._scaler.max)},set:function(t){t=this._fromUnits(t),this._scaler.max=t}}),Object.defineProperty(t.LFO.prototype,"type",{get:function(){return this._oscillator.type},set:function(t){this._oscillator.type=t,this._stoppedValue=this._oscillator._getInitialValue(),this._stoppedSignal.value=this._stoppedValue}}),Object.defineProperty(t.LFO.prototype,"phase",{get:function(){return this._oscillator.phase},set:function(t){this._oscillator.phase=t,this._stoppedValue=this._oscillator._getInitialValue(),this._stoppedSignal.value=this._stoppedValue}}),Object.defineProperty(t.LFO.prototype,"units",{get:function(){return this._units},set:function(t){var e=this.min,i=this.max;this._units=t,this.min=e,this.max=i}}),Object.defineProperty(t.LFO.prototype,"mute",{get:function(){return this._oscillator.mute},set:function(t){this._oscillator.mute=t}}),Object.defineProperty(t.LFO.prototype,"state",{get:function(){return this._oscillator.state}}),t.LFO.prototype.connect=function(e){return e.constructor!==t.Signal&&e.constructor!==t.Param||(this.convert=e.convert,this.units=e.units),t.SignalBase.prototype.connect.apply(this,arguments),this},t.LFO.prototype._fromUnits=t.Param.prototype._fromUnits,t.LFO.prototype._toUnits=t.Param.prototype._toUnits,t.LFO.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._writable(["amplitude","frequency"]),this._oscillator.dispose(),this._oscillator=null,this._stoppedSignal.dispose(),this._stoppedSignal=null,this._zeros.dispose(),this._zeros=null,this._scaler.dispose(),this._scaler=null,this._a2g.dispose(),this._a2g=null,this.frequency=null,this.amplitude=null,this},t.LFO}),e(function(t){return t.Limiter=function(){var e=t.defaults(arguments,["threshold"],t.Limiter);t.AudioNode.call(this),this._compressor=this.input=this.output=new t.Compressor({attack:.001,decay:.001,threshold:e.threshold}),this.threshold=this._compressor.threshold,this._readOnly("threshold")},t.extend(t.Limiter,t.AudioNode),t.Limiter.defaults={threshold:-12},t.Limiter.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._compressor.dispose(),this._compressor=null,this._writable("threshold"),this.threshold=null,this},t.Limiter}),e(function(t){return t.LowpassCombFilter=function(){var e=t.defaults(arguments,["delayTime","resonance","dampening"],t.LowpassCombFilter);t.AudioNode.call(this),this.createInsOuts(1,1),this._delay=this.input=new t.Delay(e.delayTime),this.delayTime=this._delay.delayTime,this._lowpass=this.output=this.context.createBiquadFilter(),this._lowpass.Q.value=-3.0102999566398125,this._lowpass.type="lowpass",this.dampening=new t.Param({param:this._lowpass.frequency,units:t.Type.Frequency,value:e.dampening}),this._feedback=new t.Gain(e.resonance,t.Type.NormalRange),this.resonance=this._feedback.gain,this._delay.chain(this._lowpass,this._feedback,this._delay),this._readOnly(["dampening","resonance","delayTime"])},t.extend(t.LowpassCombFilter,t.AudioNode),t.LowpassCombFilter.defaults={delayTime:.1,resonance:.5,dampening:3e3},t.LowpassCombFilter.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._writable(["dampening","resonance","delayTime"]),this.dampening.dispose(),this.dampening=null,this.resonance.dispose(),this.resonance=null,this._delay.dispose(),this._delay=null,this.delayTime=null,this._lowpass.disconnect(),this._lowpass=null,this._feedback.disconnect(),this._feedback=null,this},t.LowpassCombFilter}),e(function(t){return t.Merge=function(){t.AudioNode.call(this),this.createInsOuts(2,0),this.left=this.input[0]=new t.Gain,this.right=this.input[1]=new t.Gain,this._merger=this.output=this.context.createChannelMerger(2),this.left.connect(this._merger,0,0),this.right.connect(this._merger,0,1),this.left.channelCount=1,this.right.channelCount=1,this.left.channelCountMode="explicit",this.right.channelCountMode="explicit"},t.extend(t.Merge,t.AudioNode),t.Merge.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this.left.dispose(),this.left=null,this.right.dispose(),this.right=null,this._merger.disconnect(),this._merger=null,this},t.Merge}),e(function(t){return t.Meter=function(){var e=t.defaults(arguments,["smoothing"],t.Meter);t.AudioNode.call(this),this.input=this.output=this._analyser=new t.Analyser("waveform",1024),this.smoothing=e.smoothing},t.extend(t.Meter,t.AudioNode),t.Meter.defaults={smoothing:.8},t.Meter.prototype.getLevel=function(){this._analyser.type="fft";var t=this._analyser.getValue();return Math.max.apply(this,t)+28},t.Meter.prototype.getValue=function(){return this._analyser.type="waveform",this._analyser.getValue()[0]},Object.defineProperty(t.Meter.prototype,"smoothing",{get:function(){return this._analyser.smoothing},set:function(t){this._analyser.smoothing=t}}),t.Meter.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._analyser.dispose(),this._analyser=null,this},t.Meter}),e(function(t){return t.Split=function(){t.AudioNode.call(this),this.createInsOuts(0,2),this._splitter=this.input=this.context.createChannelSplitter(2),this._splitter.channelCount=2,this._splitter.channelCountMode="explicit",this.left=this.output[0]=new t.Gain,this.right=this.output[1]=new t.Gain,this._splitter.connect(this.left,0,0),this._splitter.connect(this.right,1,0)},t.extend(t.Split,t.AudioNode),t.Split.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._splitter.disconnect(),this.left.dispose(),this.left=null,this.right.dispose(),this.right=null,this._splitter=null,this},t.Split}),e(function(t){return t.MidSideSplit=function(){t.AudioNode.call(this),this.createInsOuts(0,2),this._split=this.input=new t.Split,this._midAdd=new t.Add,this.mid=this.output[0]=new t.Multiply(Math.SQRT1_2),this._sideSubtract=new t.Subtract,this.side=this.output[1]=new t.Multiply(Math.SQRT1_2),this._split.connect(this._midAdd,0,0),this._split.connect(this._midAdd,1,1),this._split.connect(this._sideSubtract,0,0),this._split.connect(this._sideSubtract,1,1),this._midAdd.connect(this.mid),this._sideSubtract.connect(this.side)},t.extend(t.MidSideSplit,t.AudioNode),t.MidSideSplit.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this.mid.dispose(),this.mid=null,this.side.dispose(),this.side=null,this._midAdd.dispose(),this._midAdd=null,this._sideSubtract.dispose(),this._sideSubtract=null,this._split.dispose(),this._split=null,this},t.MidSideSplit}),e(function(t){return t.MidSideMerge=function(){t.AudioNode.call(this),this.createInsOuts(2,0),this.mid=this.input[0]=new t.Gain,this._left=new t.Add,this._timesTwoLeft=new t.Multiply(Math.SQRT1_2),this.side=this.input[1]=new t.Gain,this._right=new t.Subtract,this._timesTwoRight=new t.Multiply(Math.SQRT1_2),this._merge=this.output=new t.Merge,this.mid.connect(this._left,0,0),this.side.connect(this._left,0,1),this.mid.connect(this._right,0,0),this.side.connect(this._right,0,1),this._left.connect(this._timesTwoLeft),this._right.connect(this._timesTwoRight),this._timesTwoLeft.connect(this._merge,0,0),this._timesTwoRight.connect(this._merge,0,1)},t.extend(t.MidSideMerge,t.AudioNode),t.MidSideMerge.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this.mid.dispose(),this.mid=null,this.side.dispose(),this.side=null,this._left.dispose(),this._left=null,this._timesTwoLeft.dispose(),this._timesTwoLeft=null,this._right.dispose(),this._right=null,this._timesTwoRight.dispose(),this._timesTwoRight=null,this._merge.dispose(),this._merge=null,this},t.MidSideMerge}),e(function(t){return t.MidSideCompressor=function(e){t.AudioNode.call(this),e=t.defaultArg(e,t.MidSideCompressor.defaults),this._midSideSplit=this.input=new t.MidSideSplit,this._midSideMerge=this.output=new t.MidSideMerge,this.mid=new t.Compressor(e.mid),this.side=new t.Compressor(e.side),this._midSideSplit.mid.chain(this.mid,this._midSideMerge.mid),this._midSideSplit.side.chain(this.side,this._midSideMerge.side),this._readOnly(["mid","side"])},t.extend(t.MidSideCompressor,t.AudioNode),t.MidSideCompressor.defaults={mid:{ratio:3,threshold:-24,release:.03,attack:.02,knee:16},side:{ratio:6,threshold:-30,release:.25,attack:.03,knee:10}},t.MidSideCompressor.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._writable(["mid","side"]),this.mid.dispose(),this.mid=null,this.side.dispose(),this.side=null,this._midSideSplit.dispose(),this._midSideSplit=null,this._midSideMerge.dispose(),this._midSideMerge=null,this},t.MidSideCompressor}),e(function(t){return t.Mono=function(){t.AudioNode.call(this),this.createInsOuts(1,0),this._merge=this.output=new t.Merge,this.input.connect(this._merge,0,0),this.input.connect(this._merge,0,1)},t.extend(t.Mono,t.AudioNode),t.Mono.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._merge.dispose(),this._merge=null,this},t.Mono}),e(function(t){return t.MultibandCompressor=function(e){t.AudioNode.call(this),e=t.defaultArg(arguments,t.MultibandCompressor.defaults),this._splitter=this.input=new t.MultibandSplit({lowFrequency:e.lowFrequency,highFrequency:e.highFrequency}),this.lowFrequency=this._splitter.lowFrequency,this.highFrequency=this._splitter.highFrequency,this.output=new t.Gain,this.low=new t.Compressor(e.low),this.mid=new t.Compressor(e.mid),this.high=new t.Compressor(e.high),this._splitter.low.chain(this.low,this.output),this._splitter.mid.chain(this.mid,this.output),this._splitter.high.chain(this.high,this.output),this._readOnly(["high","mid","low","highFrequency","lowFrequency"])},t.extend(t.MultibandCompressor,t.AudioNode),t.MultibandCompressor.defaults={low:t.Compressor.defaults,mid:t.Compressor.defaults,high:t.Compressor.defaults,lowFrequency:250,highFrequency:2e3},t.MultibandCompressor.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._splitter.dispose(),this._writable(["high","mid","low","highFrequency","lowFrequency"]),this.low.dispose(),this.mid.dispose(),this.high.dispose(),this._splitter=null,this.low=null,this.mid=null,this.high=null,this.lowFrequency=null,this.highFrequency=null,this},t.MultibandCompressor}),e(function(t){if(t.supported&&!window.StereoPannerNode){var e=function(e){this.context=e,this.pan=new t.Signal(0,t.Type.AudioRange);var i=new t.WaveShaper(function(e){return t.equalPowerScale((e+1)/2)},4096),r=new t.WaveShaper(function(e){return t.equalPowerScale(1-(e+1)/2)},4096),n=new t.Gain,o=new t.Gain,s=this.input=new t.Split;(new t.Zero).fan(i,r);var a=this.output=new t.Merge;s.left.chain(n,a.left),s.right.chain(o,a.right),this.pan.chain(r,n.gain),this.pan.chain(i,o.gain)};e.prototype.disconnect=function(){this.output.disconnect.apply(this.output,arguments)},e.prototype.connect=function(){this.output.connect.apply(this.output,arguments)},AudioContext.prototype.createStereoPanner=function(){return new e(this)},t.Context.prototype.createStereoPanner=function(){return new e(this)}}}),e(function(t){return t.Panner=function(e){t.AudioNode.call(this),this._panner=this.input=this.output=this.context.createStereoPanner(),this.pan=this._panner.pan,this.pan.value=t.defaultArg(e,0),this._readOnly("pan")},t.extend(t.Panner,t.AudioNode),t.Panner.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._writable("pan"),this._panner.disconnect(),this._panner=null,this.pan=null,this},t.Panner}),e(function(t){return t.Panner3D=function(){var e=t.defaults(arguments,["positionX","positionY","positionZ"],t.Panner3D);t.AudioNode.call(this),this._panner=this.input=this.output=this.context.createPanner(),this._panner.panningModel=e.panningModel,this._panner.maxDistance=e.maxDistance,this._panner.distanceModel=e.distanceModel,this._panner.coneOuterGain=e.coneOuterGain,this._panner.coneOuterAngle=e.coneOuterAngle,this._panner.coneInnerAngle=e.coneInnerAngle,this._panner.refDistance=e.refDistance,this._panner.rolloffFactor=e.rolloffFactor,this._orientation=[e.orientationX,e.orientationY,e.orientationZ],this._position=[e.positionX,e.positionY,e.positionZ],this.orientationX=e.orientationX,this.orientationY=e.orientationY,this.orientationZ=e.orientationZ,this.positionX=e.positionX,this.positionY=e.positionY,this.positionZ=e.positionZ},t.extend(t.Panner3D,t.AudioNode),t.Panner3D.defaults={positionX:0,positionY:0,positionZ:0,orientationX:0,orientationY:0,orientationZ:0,panningModel:"equalpower",maxDistance:1e4,distanceModel:"inverse",coneOuterGain:0,coneOuterAngle:360,coneInnerAngle:360,refDistance:1,rolloffFactor:1},t.Panner3D.prototype._rampTimeConstant=.01,t.Panner3D.prototype.setPosition=function(t,e,i){if(this._panner.positionX){var r=this.now();this._panner.positionX.setTargetAtTime(t,r,this._rampTimeConstant),this._panner.positionY.setTargetAtTime(e,r,this._rampTimeConstant),this._panner.positionZ.setTargetAtTime(i,r,this._rampTimeConstant)}else this._panner.setPosition(t,e,i);return this._position=Array.prototype.slice.call(arguments),this},t.Panner3D.prototype.setOrientation=function(t,e,i){if(this._panner.orientationX){var r=this.now();this._panner.orientationX.setTargetAtTime(t,r,this._rampTimeConstant),this._panner.orientationY.setTargetAtTime(e,r,this._rampTimeConstant),this._panner.orientationZ.setTargetAtTime(i,r,this._rampTimeConstant)}else this._panner.setOrientation(t,e,i);return this._orientation=Array.prototype.slice.call(arguments),this},Object.defineProperty(t.Panner3D.prototype,"positionX",{set:function(t){this._position[0]=t,this.setPosition.apply(this,this._position)},get:function(){return this._position[0]}}),Object.defineProperty(t.Panner3D.prototype,"positionY",{set:function(t){this._position[1]=t,this.setPosition.apply(this,this._position)},get:function(){return this._position[1]}}),Object.defineProperty(t.Panner3D.prototype,"positionZ",{set:function(t){this._position[2]=t,this.setPosition.apply(this,this._position)},get:function(){return this._position[2]}}),Object.defineProperty(t.Panner3D.prototype,"orientationX",{set:function(t){this._orientation[0]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[0]}}),Object.defineProperty(t.Panner3D.prototype,"orientationY",{set:function(t){this._orientation[1]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[1]}}),Object.defineProperty(t.Panner3D.prototype,"orientationZ",{set:function(t){this._orientation[2]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[2]}}),t.Panner3D._aliasProperty=function(e){Object.defineProperty(t.Panner3D.prototype,e,{set:function(t){this._panner[e]=t},get:function(){return this._panner[e]}})},t.Panner3D._aliasProperty("panningModel"),t.Panner3D._aliasProperty("refDistance"),t.Panner3D._aliasProperty("rolloffFactor"),t.Panner3D._aliasProperty("distanceModel"),t.Panner3D._aliasProperty("coneInnerAngle"),t.Panner3D._aliasProperty("coneOuterAngle"),t.Panner3D._aliasProperty("coneOuterGain"),t.Panner3D._aliasProperty("maxDistance"),t.Panner3D.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._panner.disconnect(),this._panner=null,this._orientation=null,this._position=null,this},t.Panner3D}),e(function(t){return t.PanVol=function(){var e=t.defaults(arguments,["pan","volume"],t.PanVol);t.AudioNode.call(this),this._panner=this.input=new t.Panner(e.pan),this.pan=this._panner.pan,this._volume=this.output=new t.Volume(e.volume),this.volume=this._volume.volume,this._panner.connect(this._volume),this.mute=e.mute,this._readOnly(["pan","volume"])},t.extend(t.PanVol,t.AudioNode),t.PanVol.defaults={pan:0,volume:0,mute:!1},Object.defineProperty(t.PanVol.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t}}),t.PanVol.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._writable(["pan","volume"]),this._panner.dispose(),this._panner=null,this.pan=null,this._volume.dispose(),this._volume=null,this.volume=null,this},t.PanVol}),e(function(t){return t.Solo=function(){var e=t.defaults(arguments,["solo"],t.Solo);t.AudioNode.call(this),this.input=this.output=new t.Gain,this._soloBind=this._soloed.bind(this),this.context.on("solo",this._soloBind),this.solo=e.solo},t.extend(t.Solo,t.AudioNode),t.Solo.defaults={solo:!1},Object.defineProperty(t.Solo.prototype,"solo",{get:function(){return this._isSoloed()},set:function(t){t?this._addSolo():this._removeSolo(),this.context.emit("solo",this)}}),Object.defineProperty(t.Solo.prototype,"muted",{get:function(){return 0===this.input.gain.value}}),t.Solo.prototype._addSolo=function(){t.isArray(this.context._currentSolo)||(this.context._currentSolo=[]),this._isSoloed()||this.context._currentSolo.push(this)},t.Solo.prototype._removeSolo=function(){if(this._isSoloed()){var t=this.context._currentSolo.indexOf(this);this.context._currentSolo.splice(t,1)}},t.Solo.prototype._isSoloed=function(){return!!t.isArray(this.context._currentSolo)&&0!==this.context._currentSolo.length&&-1!==this.context._currentSolo.indexOf(this)},t.Solo.prototype._noSolos=function(){return!t.isArray(this.context._currentSolo)||0===this.context._currentSolo.length},t.Solo.prototype._soloed=function(){this._isSoloed()?this.input.gain.value=1:this._noSolos()?this.input.gain.value=1:this.input.gain.value=0},t.Solo.prototype.dispose=function(){return this.context.off("solo",this._soloBind),this._removeSolo(),this._soloBind=null,t.AudioNode.prototype.dispose.call(this),this},t.Solo}),e(function(t){return t.Waveform=function(){var e=t.defaults(arguments,["size"],t.Waveform);e.type=t.Analyser.Type.Waveform,t.AudioNode.call(this),this._analyser=this.input=this.output=new t.Analyser(e)},t.extend(t.Waveform,t.AudioNode),t.Waveform.defaults={size:1024},t.Waveform.prototype.getValue=function(){return this._analyser.getValue()},Object.defineProperty(t.Waveform.prototype,"size",{get:function(){return this._analyser.size},set:function(t){this._analyser.size=t}}),t.Waveform.prototype.dispose=function(){t.AudioNode.prototype.dispose.call(this),this._analyser.dispose(),this._analyser=null},t.Waveform}),e(function(t){return t.CtrlInterpolate=function(){var e=t.defaults(arguments,["values","index"],t.CtrlInterpolate);t.call(this),this.values=e.values,this.index=e.index},t.extend(t.CtrlInterpolate),t.CtrlInterpolate.defaults={index:0,values:[]},Object.defineProperty(t.CtrlInterpolate.prototype,"value",{get:function(){var t=this.index;t=Math.min(t,this.values.length-1);var e=Math.floor(t),i=this.values[e],r=this.values[Math.ceil(t)];return this._interpolate(t-e,i,r)}}),t.CtrlInterpolate.prototype._interpolate=function(e,i,r){if(t.isArray(i)){for(var n=[],o=0;o<i.length;o++)n[o]=this._interpolate(e,i[o],r[o]);return n}if(t.isObject(i)){var s={};for(var a in i)s[a]=this._interpolate(e,i[a],r[a]);return s}return(1-e)*(i=this._toNumber(i))+e*(r=this._toNumber(r))},t.CtrlInterpolate.prototype._toNumber=function(e){return t.isNumber(e)?e:this.toSeconds(e)},t.CtrlInterpolate.prototype.dispose=function(){this.values=null},t.CtrlInterpolate}),e(function(t){return t.CtrlMarkov=function(e,i){t.call(this),this.values=t.defaultArg(e,{}),this.value=t.defaultArg(i,Object.keys(this.values)[0])},t.extend(t.CtrlMarkov),t.CtrlMarkov.prototype.next=function(){if(this.values.hasOwnProperty(this.value)){var e=this.values[this.value];if(t.isArray(e))for(var i=this._getProbDistribution(e),r=Math.random(),n=0,o=0;o<i.length;o++){var s=i[o];if(r>n&&r<n+s){var a=e[o];t.isObject(a)?this.value=a.value:this.value=a}n+=s}else this.value=e}return this.value},t.CtrlMarkov.prototype._getProbDistribution=function(e){for(var i=[],r=0,n=!1,o=0;o<e.length;o++){var s=e[o];t.isObject(s)?(n=!0,i[o]=s.probability):i[o]=1/e.length,r+=i[o]}if(n)for(var a=0;a<i.length;a++)i[a]=i[a]/r;return i},t.CtrlMarkov.prototype.dispose=function(){this.values=null},t.CtrlMarkov}),e(function(t){return t.CtrlPattern=function(){var e=t.defaults(arguments,["values","type"],t.CtrlPattern);t.call(this),this.values=e.values,this.index=0,this._type=null,this._shuffled=null,this._direction=null,this.type=e.type},t.extend(t.CtrlPattern),t.CtrlPattern.Type={Up:"up",Down:"down",UpDown:"upDown",DownUp:"downUp",AlternateUp:"alternateUp",AlternateDown:"alternateDown",Random:"random",RandomWalk:"randomWalk",RandomOnce:"randomOnce"},t.CtrlPattern.defaults={type:t.CtrlPattern.Type.Up,values:[]},Object.defineProperty(t.CtrlPattern.prototype,"value",{get:function(){if(0!==this.values.length){if(1===this.values.length)return this.values[0];this.index=Math.min(this.index,this.values.length-1);var e=this.values[this.index];return this.type===t.CtrlPattern.Type.RandomOnce&&(this.values.length!==this._shuffled.length&&this._shuffleValues(),e=this.values[this._shuffled[this.index]]),e}}}),Object.defineProperty(t.CtrlPattern.prototype,"type",{get:function(){return this._type},set:function(e){this._type=e,this._shuffled=null,this._type===t.CtrlPattern.Type.Up||this._type===t.CtrlPattern.Type.UpDown||this._type===t.CtrlPattern.Type.RandomOnce||this._type===t.CtrlPattern.Type.AlternateUp?this.index=0:this._type!==t.CtrlPattern.Type.Down&&this._type!==t.CtrlPattern.Type.DownUp&&this._type!==t.CtrlPattern.Type.AlternateDown||(this.index=this.values.length-1),this._type===t.CtrlPattern.Type.UpDown||this._type===t.CtrlPattern.Type.AlternateUp?this._direction=t.CtrlPattern.Type.Up:this._type!==t.CtrlPattern.Type.DownUp&&this._type!==t.CtrlPattern.Type.AlternateDown||(this._direction=t.CtrlPattern.Type.Down),this._type===t.CtrlPattern.Type.RandomOnce?this._shuffleValues():this._type===t.CtrlPattern.Random&&(this.index=Math.floor(Math.random()*this.values.length))}}),t.CtrlPattern.prototype.next=function(){var e=this.type;return e===t.CtrlPattern.Type.Up?(this.index++,this.index>=this.values.length&&(this.index=0)):e===t.CtrlPattern.Type.Down?(this.index--,this.index<0&&(this.index=this.values.length-1)):e===t.CtrlPattern.Type.UpDown||e===t.CtrlPattern.Type.DownUp?(this._direction===t.CtrlPattern.Type.Up?this.index++:this.index--,this.index<0?(this.index=1,this._direction=t.CtrlPattern.Type.Up):this.index>=this.values.length&&(this.index=this.values.length-2,this._direction=t.CtrlPattern.Type.Down)):e===t.CtrlPattern.Type.Random?this.index=Math.floor(Math.random()*this.values.length):e===t.CtrlPattern.Type.RandomWalk?Math.random()<.5?(this.index--,this.index=Math.max(this.index,0)):(this.index++,this.index=Math.min(this.index,this.values.length-1)):e===t.CtrlPattern.Type.RandomOnce?(this.index++,this.index>=this.values.length&&(this.index=0,this._shuffleValues())):e===t.CtrlPattern.Type.AlternateUp?(this._direction===t.CtrlPattern.Type.Up?(this.index+=2,this._direction=t.CtrlPattern.Type.Down):(this.index-=1,this._direction=t.CtrlPattern.Type.Up),this.index>=this.values.length&&(this.index=0,this._direction=t.CtrlPattern.Type.Up)):e===t.CtrlPattern.Type.AlternateDown&&(this._direction===t.CtrlPattern.Type.Up?(this.index+=1,this._direction=t.CtrlPattern.Type.Down):(this.index-=2,this._direction=t.CtrlPattern.Type.Up),this.index<0&&(this.index=this.values.length-1,this._direction=t.CtrlPattern.Type.Down)),this.value},t.CtrlPattern.prototype._shuffleValues=function(){var t=[];this._shuffled=[];for(var e=0;e<this.values.length;e++)t[e]=e;for(;t.length>0;){var i=t.splice(Math.floor(t.length*Math.random()),1);this._shuffled.push(i[0])}},t.CtrlPattern.prototype.dispose=function(){this._shuffled=null,this.values=null},t.CtrlPattern}),e(function(t){return t.CtrlRandom=function(){var e=t.defaults(arguments,["min","max"],t.CtrlRandom);t.call(this),this.min=e.min,this.max=e.max,this.integer=e.integer},t.extend(t.CtrlRandom),t.CtrlRandom.defaults={min:0,max:1,integer:!1},Object.defineProperty(t.CtrlRandom.prototype,"value",{get:function(){var t=this.toSeconds(this.min),e=this.toSeconds(this.max),i=Math.random(),r=i*t+(1-i)*e;return this.integer&&(r=Math.floor(r)),r}}),t.CtrlRandom}),e(function(t){return t.Buffers=function(e){var i=Array.prototype.slice.call(arguments);i.shift();var r=t.defaults(i,["onload","baseUrl"],t.Buffers);for(var n in t.call(this),this._buffers={},this.baseUrl=r.baseUrl,this._loadingCount=0,e)this._loadingCount++,this.add(n,e[n],this._bufferLoaded.bind(this,r.onload))},t.extend(t.Buffers),t.Buffers.defaults={onload:t.noOp,baseUrl:""},t.Buffers.prototype.has=function(t){return this._buffers.hasOwnProperty(t)},t.Buffers.prototype.get=function(t){if(this.has(t))return this._buffers[t];throw new Error("Tone.Buffers: no buffer named "+t)},t.Buffers.prototype._bufferLoaded=function(t){this._loadingCount--,0===this._loadingCount&&t&&t(this)},Object.defineProperty(t.Buffers.prototype,"loaded",{get:function(){var t=!0;for(var e in this._buffers){var i=this.get(e);t=t&&i.loaded}return t}}),t.Buffers.prototype.add=function(e,i,r){return r=t.defaultArg(r,t.noOp),i instanceof t.Buffer?(this._buffers[e]=i,r(this)):i instanceof AudioBuffer?(this._buffers[e]=new t.Buffer(i),r(this)):t.isString(i)&&(this._buffers[e]=new t.Buffer(this.baseUrl+i,r)),this},t.Buffers.prototype.dispose=function(){for(var e in t.prototype.dispose.call(this),this._buffers)this._buffers[e].dispose();return this._buffers=null,this},t.Buffers}),e(function(t){var e={};return t.prototype.send=function(i,r){e.hasOwnProperty(i)||(e[i]=this.context.createGain()),r=t.defaultArg(r,0);var n=new t.Gain(r,t.Type.Decibels);return this.connect(n),n.connect(e[i]),n},t.prototype.receive=function(t,i){return e.hasOwnProperty(t)||(e[t]=this.context.createGain()),e[t].connect(this,0,i),this},t.Context.on("init",function(t){t.Buses?e=t.Buses:(e={},t.Buses=e)}),t}),e(function(t){return t.Draw=function(){t.call(this),this._events=new t.Timeline,this.expiration=.25,this.anticipation=.008,this._boundDrawLoop=this._drawLoop.bind(this)},t.extend(t.Draw),t.Draw.prototype.schedule=function(t,e){return this._events.add({callback:t,time:this.toSeconds(e)}),1===this._events.length&&requestAnimationFrame(this._boundDrawLoop),this},t.Draw.prototype.cancel=function(t){return this._events.cancel(this.toSeconds(t)),this},t.Draw.prototype._drawLoop=function(){for(var e=t.now();this._events.length&&this._events.peek().time-this.anticipation<=e;){var i=this._events.shift();e-i.time<=this.expiration&&i.callback()}this._events.length>0&&requestAnimationFrame(this._boundDrawLoop)},t.Draw=new t.Draw,t.Draw}),e(function(t){t.Listener=function(){t.call(this),this._orientation=[0,0,0,0,0,0],this._position=[0,0,0],t.getContext(function(){this.set(e.defaults)}.bind(this))},t.extend(t.Listener),t.Listener.defaults={positionX:0,positionY:0,positionZ:0,forwardX:0,forwardY:0,forwardZ:1,upX:0,upY:1,upZ:0},t.Listener.prototype._rampTimeConstant=.01,t.Listener.prototype.setPosition=function(t,e,i){if(this.context.listener.positionX){var r=this.now();this.context.listener.positionX.setTargetAtTime(t,r,this._rampTimeConstant),this.context.listener.positionY.setTargetAtTime(e,r,this._rampTimeConstant),this.context.listener.positionZ.setTargetAtTime(i,r,this._rampTimeConstant)}else this.context.listener.setPosition(t,e,i);return this._position=Array.prototype.slice.call(arguments),this},t.Listener.prototype.setOrientation=function(t,e,i,r,n,o){if(this.context.listener.forwardX){var s=this.now();this.context.listener.forwardX.setTargetAtTime(t,s,this._rampTimeConstant),this.context.listener.forwardY.setTargetAtTime(e,s,this._rampTimeConstant),this.context.listener.forwardZ.setTargetAtTime(i,s,this._rampTimeConstant),this.context.listener.upX.setTargetAtTime(r,s,this._rampTimeConstant),this.context.listener.upY.setTargetAtTime(n,s,this._rampTimeConstant),this.context.listener.upZ.setTargetAtTime(o,s,this._rampTimeConstant)}else this.context.listener.setOrientation(t,e,i,r,n,o);return this._orientation=Array.prototype.slice.call(arguments),this},Object.defineProperty(t.Listener.prototype,"positionX",{set:function(t){this._position[0]=t,this.setPosition.apply(this,this._position)},get:function(){return this._position[0]}}),Object.defineProperty(t.Listener.prototype,"positionY",{set:function(t){this._position[1]=t,this.setPosition.apply(this,this._position)},get:function(){return this._position[1]}}),Object.defineProperty(t.Listener.prototype,"positionZ",{set:function(t){this._position[2]=t,this.setPosition.apply(this,this._position)},get:function(){return this._position[2]}}),Object.defineProperty(t.Listener.prototype,"forwardX",{set:function(t){this._orientation[0]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[0]}}),Object.defineProperty(t.Listener.prototype,"forwardY",{set:function(t){this._orientation[1]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[1]}}),Object.defineProperty(t.Listener.prototype,"forwardZ",{set:function(t){this._orientation[2]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[2]}}),Object.defineProperty(t.Listener.prototype,"upX",{set:function(t){this._orientation[3]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[3]}}),Object.defineProperty(t.Listener.prototype,"upY",{set:function(t){this._orientation[4]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[4]}}),Object.defineProperty(t.Listener.prototype,"upZ",{set:function(t){this._orientation[5]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[5]}}),t.Listener.prototype.dispose=function(){return this._orientation=null,this._position=null,this};var e=t.Listener;return t.Listener=new e,t.Context.on("init",function(i){i.Listener instanceof e?t.Listener=i.Listener:t.Listener=new e,i.Listener=t.Listener}),t.Listener}),e(function(t){return t.Offline=function(e,i){var r,n=t.context.sampleRate,o=t.context,s=function e(i,r,n,o){o=t.defaultArg(o,0);var s=new t.OfflineContext(2,r,n);t.context=s;var a=i(t.Transport);return s.currentTime>0&&o<1e3?e(i,r,n,++o):{response:a,context:s}}(e,i,n),a=s.response,h=s.context;return r=a instanceof Promise?a.then(function(){return h.render()}):h.render(),t.context=o,r.then(function(e){return new t.Buffer(e)})},t.Offline}),e(function(t){return t.Effect=function(){var e=t.defaults(arguments,["wet"],t.Effect);t.AudioNode.call(this),this.createInsOuts(1,1),this._dryWet=new t.CrossFade(e.wet),this.wet=this._dryWet.fade,this.effectSend=new t.Gain,this.effectReturn=new t.Gain,this.input.connect(this._dryWet.a),this.input.connect(this.effectSend),this.effectReturn.connect(this._dryWet.b),this._dryWet.connect(this.output),this._readOnly(["wet"])},t.extend(t.Effect,t.AudioNode),t.Effect.defaults={wet:1},t.Effect.prototype.connectEffect=function(t){return this.effectSend.chain(t,this.effectReturn),this},t.Effect.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._dryWet.dispose(),this._dryWet=null,this.effectSend.dispose(),this.effectSend=null,this.effectReturn.dispose(),this.effectReturn=null,this._writable(["wet"]),this.wet=null,this},t.Effect}),e(function(t){return t.AutoFilter=function(){var e=t.defaults(arguments,["frequency","baseFrequency","octaves"],t.AutoFilter);t.Effect.call(this,e),this._lfo=new t.LFO({frequency:e.frequency,amplitude:e.depth}),this.depth=this._lfo.amplitude,this.frequency=this._lfo.frequency,this.filter=new t.Filter(e.filter),this._octaves=0,this.connectEffect(this.filter),this._lfo.connect(this.filter.frequency),this.type=e.type,this._readOnly(["frequency","depth"]),this.octaves=e.octaves,this.baseFrequency=e.baseFrequency},t.extend(t.AutoFilter,t.Effect),t.AutoFilter.defaults={frequency:1,type:"sine",depth:1,baseFrequency:200,octaves:2.6,filter:{type:"lowpass",rolloff:-12,Q:1}},t.AutoFilter.prototype.start=function(t){return this._lfo.start(t),this},t.AutoFilter.prototype.stop=function(t){return this._lfo.stop(t),this},t.AutoFilter.prototype.sync=function(t){return this._lfo.sync(t),this},t.AutoFilter.prototype.unsync=function(){return this._lfo.unsync(),this},Object.defineProperty(t.AutoFilter.prototype,"type",{get:function(){return this._lfo.type},set:function(t){this._lfo.type=t}}),Object.defineProperty(t.AutoFilter.prototype,"baseFrequency",{get:function(){return this._lfo.min},set:function(t){this._lfo.min=this.toFrequency(t),this.octaves=this._octaves}}),Object.defineProperty(t.AutoFilter.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._lfo.max=this.baseFrequency*Math.pow(2,t)}}),t.AutoFilter.prototype.dispose=function(){return t.Effect.prototype.dispose.call(this),this._lfo.dispose(),this._lfo=null,this.filter.dispose(),this.filter=null,this._writable(["frequency","depth"]),this.frequency=null,this.depth=null,this},t.AutoFilter}),e(function(t){return t.AutoPanner=function(){var e=t.defaults(arguments,["frequency"],t.AutoPanner);t.Effect.call(this,e),this._lfo=new t.LFO({frequency:e.frequency,amplitude:e.depth,min:-1,max:1}),this.depth=this._lfo.amplitude,this._panner=new t.Panner,this.frequency=this._lfo.frequency,this.connectEffect(this._panner),this._lfo.connect(this._panner.pan),this.type=e.type,this._readOnly(["depth","frequency"])},t.extend(t.AutoPanner,t.Effect),t.AutoPanner.defaults={frequency:1,type:"sine",depth:1},t.AutoPanner.prototype.start=function(t){return this._lfo.start(t),this},t.AutoPanner.prototype.stop=function(t){return this._lfo.stop(t),this},t.AutoPanner.prototype.sync=function(t){return this._lfo.sync(t),this},t.AutoPanner.prototype.unsync=function(){return this._lfo.unsync(),this},Object.defineProperty(t.AutoPanner.prototype,"type",{get:function(){return this._lfo.type},set:function(t){this._lfo.type=t}}),t.AutoPanner.prototype.dispose=function(){return t.Effect.prototype.dispose.call(this),this._lfo.dispose(),this._lfo=null,this._panner.dispose(),this._panner=null,this._writable(["depth","frequency"]),this.frequency=null,this.depth=null,this},t.AutoPanner}),e(function(t){return t.AutoWah=function(){var e=t.defaults(arguments,["baseFrequency","octaves","sensitivity"],t.AutoWah);t.Effect.call(this,e),this.follower=new t.Follower(e.follower),this._sweepRange=new t.ScaleExp(0,1,.5),this._baseFrequency=e.baseFrequency,this._octaves=e.octaves,this._inputBoost=new t.Gain,this._bandpass=new t.Filter({rolloff:-48,frequency:0,Q:e.Q}),this._peaking=new t.Filter(0,"peaking"),this._peaking.gain.value=e.gain,this.gain=this._peaking.gain,this.Q=this._bandpass.Q,this.effectSend.chain(this._inputBoost,this.follower,this._sweepRange),this._sweepRange.connect(this._bandpass.frequency),this._sweepRange.connect(this._peaking.frequency),this.effectSend.chain(this._bandpass,this._peaking,this.effectReturn),this._setSweepRange(),this.sensitivity=e.sensitivity,this._readOnly(["gain","Q"])},t.extend(t.AutoWah,t.Effect),t.AutoWah.defaults={baseFrequency:100,octaves:6,sensitivity:0,Q:2,gain:2,follower:{attack:.3,release:.5}},Object.defineProperty(t.AutoWah.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._setSweepRange()}}),Object.defineProperty(t.AutoWah.prototype,"baseFrequency",{get:function(){return this._baseFrequency},set:function(t){this._baseFrequency=t,this._setSweepRange()}}),Object.defineProperty(t.AutoWah.prototype,"sensitivity",{get:function(){return t.gainToDb(1/this._inputBoost.gain.value)},set:function(e){this._inputBoost.gain.value=1/t.dbToGain(e)}}),t.AutoWah.prototype._setSweepRange=function(){this._sweepRange.min=this._baseFrequency,this._sweepRange.max=Math.min(this._baseFrequency*Math.pow(2,this._octaves),this.context.sampleRate/2)},t.AutoWah.prototype.dispose=function(){return t.Effect.prototype.dispose.call(this),this.follower.dispose(),this.follower=null,this._sweepRange.dispose(),this._sweepRange=null,this._bandpass.dispose(),this._bandpass=null,this._peaking.dispose(),this._peaking=null,this._inputBoost.dispose(),this._inputBoost=null,this._writable(["gain","Q"]),this.gain=null,this.Q=null,this},t.AutoWah}),e(function(t){return t.Modulo=function(e){t.SignalBase.call(this),this.createInsOuts(1,0),this._shaper=new t.WaveShaper(Math.pow(2,16)),this._multiply=new t.Multiply,this._subtract=this.output=new t.Subtract,this._modSignal=new t.Signal(e),this.input.fan(this._shaper,this._subtract),this._modSignal.connect(this._multiply,0,0),this._shaper.connect(this._multiply,0,1),this._multiply.connect(this._subtract,0,1),this._setWaveShaper(e)},t.extend(t.Modulo,t.SignalBase),t.Modulo.prototype._setWaveShaper=function(t){this._shaper.setMap(function(e){return Math.floor((e+1e-4)/t)})},Object.defineProperty(t.Modulo.prototype,"value",{get:function(){return this._modSignal.value},set:function(t){this._modSignal.value=t,this._setWaveShaper(t)}}),t.Modulo.prototype.dispose=function(){return t.SignalBase.prototype.dispose.call(this),this._shaper.dispose(),this._shaper=null,this._multiply.dispose(),this._multiply=null,this._subtract.dispose(),this._subtract=null,this._modSignal.dispose(),this._modSignal=null,this},t.Modulo}),e(function(t){return t.BitCrusher=function(){var e=t.defaults(arguments,["bits"],t.BitCrusher);t.Effect.call(this,e);var i=1/Math.pow(2,e.bits-1);this._subtract=new t.Subtract,this._modulo=new t.Modulo(i),this._bits=e.bits,this.effectSend.fan(this._subtract,this._modulo),this._modulo.connect(this._subtract,0,1),this._subtract.connect(this.effectReturn)},t.extend(t.BitCrusher,t.Effect),t.BitCrusher.defaults={bits:4},Object.defineProperty(t.BitCrusher.prototype,"bits",{get:function(){return this._bits},set:function(t){this._bits=t;var e=1/Math.pow(2,t-1);this._modulo.value=e}}),t.BitCrusher.prototype.dispose=function(){return t.Effect.prototype.dispose.call(this),this._subtract.dispose(),this._subtract=null,this._modulo.dispose(),this._modulo=null,this},t.BitCrusher}),e(function(t){return t.Chebyshev=function(){var e=t.defaults(arguments,["order"],t.Chebyshev);t.Effect.call(this,e),this._shaper=new t.WaveShaper(4096),this._order=e.order,this.connectEffect(this._shaper),this.order=e.order,this.oversample=e.oversample},t.extend(t.Chebyshev,t.Effect),t.Chebyshev.defaults={order:1,oversample:"none"},t.Chebyshev.prototype._getCoefficient=function(t,e,i){return i.hasOwnProperty(e)?i[e]:(i[e]=0===e?0:1===e?t:2*t*this._getCoefficient(t,e-1,i)-this._getCoefficient(t,e-2,i),i[e])},Object.defineProperty(t.Chebyshev.prototype,"order",{get:function(){return this._order},set:function(t){this._order=t;for(var e=new Array(4096),i=e.length,r=0;r<i;++r){var n=2*r/i-1;e[r]=0===n?0:this._getCoefficient(n,t,{})}this._shaper.curve=e}}),Object.defineProperty(t.Chebyshev.prototype,"oversample",{get:function(){return this._shaper.oversample},set:function(t){this._shaper.oversample=t}}),t.Chebyshev.prototype.dispose=function(){return t.Effect.prototype.dispose.call(this),this._shaper.dispose(),this._shaper=null,this},t.Chebyshev}),e(function(t){return t.StereoEffect=function(){t.AudioNode.call(this);var e=t.defaults(arguments,["wet"],t.Effect);this.createInsOuts(1,1),this._dryWet=new t.CrossFade(e.wet),this.wet=this._dryWet.fade,this._split=new t.Split,this.effectSendL=this._split.left,this.effectSendR=this._split.right,this._merge=new t.Merge,this.effectReturnL=this._merge.left,this.effectReturnR=this._merge.right,this.input.connect(this._split),this.input.connect(this._dryWet,0,0),this._merge.connect(this._dryWet,0,1),this._dryWet.connect(this.output),this._readOnly(["wet"])},t.extend(t.StereoEffect,t.Effect),t.StereoEffect.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._dryWet.dispose(),this._dryWet=null,this._split.dispose(),this._split=null,this._merge.dispose(),this._merge=null,this.effectSendL=null,this.effectSendR=null,this.effectReturnL=null,this.effectReturnR=null,this._writable(["wet"]),this.wet=null,this},t.StereoEffect}),e(function(t){return t.Chorus=function(){var e=t.defaults(arguments,["frequency","delayTime","depth"],t.Chorus);t.StereoEffect.call(this,e),this._depth=e.depth,this._delayTime=e.delayTime/1e3,this._lfoL=new t.LFO({frequency:e.frequency,min:0,max:1}),this._lfoR=new t.LFO({frequency:e.frequency,min:0,max:1,phase:180}),this._delayNodeL=new t.Delay,this._delayNodeR=new t.Delay,this.frequency=this._lfoL.frequency,this.effectSendL.chain(this._delayNodeL,this.effectReturnL),this.effectSendR.chain(this._delayNodeR,this.effectReturnR),this.effectSendL.connect(this.effectReturnL),this.effectSendR.connect(this.effectReturnR),this._lfoL.connect(this._delayNodeL.delayTime),this._lfoR.connect(this._delayNodeR.delayTime),this._lfoL.start(),this._lfoR.start(),this._lfoL.frequency.connect(this._lfoR.frequency),this.depth=this._depth,this.frequency.value=e.frequency,this.type=e.type,this._readOnly(["frequency"]),this.spread=e.spread},t.extend(t.Chorus,t.StereoEffect),t.Chorus.defaults={frequency:1.5,delayTime:3.5,depth:.7,type:"sine",spread:180},Object.defineProperty(t.Chorus.prototype,"depth",{get:function(){return this._depth},set:function(t){this._depth=t;var e=this._delayTime*t;this._lfoL.min=Math.max(this._delayTime-e,0),this._lfoL.max=this._delayTime+e,this._lfoR.min=Math.max(this._delayTime-e,0),this._lfoR.max=this._delayTime+e}}),Object.defineProperty(t.Chorus.prototype,"delayTime",{get:function(){return 1e3*this._delayTime},set:function(t){this._delayTime=t/1e3,this.depth=this._depth}}),Object.defineProperty(t.Chorus.prototype,"type",{get:function(){return this._lfoL.type},set:function(t){this._lfoL.type=t,this._lfoR.type=t}}),Object.defineProperty(t.Chorus.prototype,"spread",{get:function(){return this._lfoR.phase-this._lfoL.phase},set:function(t){this._lfoL.phase=90-t/2,this._lfoR.phase=t/2+90}}),t.Chorus.prototype.dispose=function(){return t.StereoEffect.prototype.dispose.call(this),this._lfoL.dispose(),this._lfoL=null,this._lfoR.dispose(),this._lfoR=null,this._delayNodeL.dispose(),this._delayNodeL=null,this._delayNodeR.dispose(),this._delayNodeR=null,this._writable("frequency"),this.frequency=null,this},t.Chorus}),e(function(t){return t.Convolver=function(){var e=t.defaults(arguments,["url","onload"],t.Convolver);t.Effect.call(this,e),this._convolver=this.context.createConvolver(),this._buffer=new t.Buffer(e.url,function(t){this._convolver.buffer=t.get(),e.onload()}.bind(this)),this.connectEffect(this._convolver)},t.extend(t.Convolver,t.Effect),t.Convolver.defaults={onload:t.noOp},Object.defineProperty(t.Convolver.prototype,"buffer",{get:function(){return this._buffer.get()},set:function(t){this._buffer.set(t),this._convolver.buffer=this._buffer.get()}}),t.Convolver.prototype.load=function(t,e){return this._buffer.load(t,function(t){this.buffer=t,e&&e()}.bind(this))},t.Convolver.prototype.dispose=function(){return t.Effect.prototype.dispose.call(this),this._convolver.disconnect(),this._convolver=null,this._buffer.dispose(),this._buffer=null,this},t.Convolver}),e(function(t){return t.Distortion=function(){var e=t.defaults(arguments,["distortion"],t.Distortion);t.Effect.call(this,e),this._shaper=new t.WaveShaper(4096),this._distortion=e.distortion,this.connectEffect(this._shaper),this.distortion=e.distortion,this.oversample=e.oversample},t.extend(t.Distortion,t.Effect),t.Distortion.defaults={distortion:.4,oversample:"none"},Object.defineProperty(t.Distortion.prototype,"distortion",{get:function(){return this._distortion},set:function(t){this._distortion=t;var e=100*t,i=Math.PI/180;this._shaper.setMap(function(t){return Math.abs(t)<.001?0:(3+e)*t*20*i/(Math.PI+e*Math.abs(t))})}}),Object.defineProperty(t.Distortion.prototype,"oversample",{get:function(){return this._shaper.oversample},set:function(t){this._shaper.oversample=t}}),t.Distortion.prototype.dispose=function(){return t.Effect.prototype.dispose.call(this),this._shaper.dispose(),this._shaper=null,this},t.Distortion}),e(function(t){return t.FeedbackEffect=function(){var e=t.defaults(arguments,["feedback"],t.FeedbackEffect);t.Effect.call(this,e),this._feedbackGain=new t.Gain(e.feedback,t.Type.NormalRange),this.feedback=this._feedbackGain.gain,this.effectReturn.chain(this._feedbackGain,this.effectSend),this._readOnly(["feedback"])},t.extend(t.FeedbackEffect,t.Effect),t.FeedbackEffect.defaults={feedback:.125},t.FeedbackEffect.prototype.dispose=function(){return t.Effect.prototype.dispose.call(this),this._writable(["feedback"]),this._feedbackGain.dispose(),this._feedbackGain=null,this.feedback=null,this},t.FeedbackEffect}),e(function(t){return t.FeedbackDelay=function(){var e=t.defaults(arguments,["delayTime","feedback"],t.FeedbackDelay);t.FeedbackEffect.call(this,e),this._delayNode=new t.Delay(e.delayTime,e.maxDelay),this.delayTime=this._delayNode.delayTime,this.connectEffect(this._delayNode),this._readOnly(["delayTime"])},t.extend(t.FeedbackDelay,t.FeedbackEffect),t.FeedbackDelay.defaults={delayTime:.25,maxDelay:1},t.FeedbackDelay.prototype.dispose=function(){return t.FeedbackEffect.prototype.dispose.call(this),this._delayNode.dispose(),this._delayNode=null,this._writable(["delayTime"]),this.delayTime=null,this},t.FeedbackDelay}),e(function(t){var e=[1557/44100,1617/44100,1491/44100,1422/44100,1277/44100,1356/44100,1188/44100,1116/44100],i=[225,556,441,341];return t.Freeverb=function(){var r=t.defaults(arguments,["roomSize","dampening"],t.Freeverb);t.StereoEffect.call(this,r),this.roomSize=new t.Signal(r.roomSize,t.Type.NormalRange),this.dampening=new t.Signal(r.dampening,t.Type.Frequency),this._combFilters=[],this._allpassFiltersL=[],this._allpassFiltersR=[];for(var n=0;n<i.length;n++){var o=this.context.createBiquadFilter();o.type="allpass",o.frequency.value=i[n],this._allpassFiltersL.push(o)}for(var s=0;s<i.length;s++){var a=this.context.createBiquadFilter();a.type="allpass",a.frequency.value=i[s],this._allpassFiltersR.push(a)}for(var h=0;h<e.length;h++){var l=new t.LowpassCombFilter(e[h]);h<e.length/2?this.effectSendL.chain(l,this._allpassFiltersL[0]):this.effectSendR.chain(l,this._allpassFiltersR[0]),this.roomSize.connect(l.resonance),this.dampening.connect(l.dampening),this._combFilters.push(l)}t.connectSeries.apply(t,this._allpassFiltersL),t.connectSeries.apply(t,this._allpassFiltersR),this._allpassFiltersL[this._allpassFiltersL.length-1].connect(this.effectReturnL),this._allpassFiltersR[this._allpassFiltersR.length-1].connect(this.effectReturnR),this._readOnly(["roomSize","dampening"])},t.extend(t.Freeverb,t.StereoEffect),t.Freeverb.defaults={roomSize:.7,dampening:3e3},t.Freeverb.prototype.dispose=function(){t.StereoEffect.prototype.dispose.call(this);for(var e=0;e<this._allpassFiltersL.length;e++)this._allpassFiltersL[e].disconnect(),this._allpassFiltersL[e]=null;this._allpassFiltersL=null;for(var i=0;i<this._allpassFiltersR.length;i++)this._allpassFiltersR[i].disconnect(),this._allpassFiltersR[i]=null;this._allpassFiltersR=null;for(var r=0;r<this._combFilters.length;r++)this._combFilters[r].dispose(),this._combFilters[r]=null;return this._combFilters=null,this._writable(["roomSize","dampening"]),this.roomSize.dispose(),this.roomSize=null,this.dampening.dispose(),this.dampening=null,this},t.Freeverb}),e(function(t){var e=[.06748,.06404,.08212,.09004],i=[.773,.802,.753,.733],r=[347,113,37];return t.JCReverb=function(){var n=t.defaults(arguments,["roomSize"],t.JCReverb);t.StereoEffect.call(this,n),this.roomSize=new t.Signal(n.roomSize,t.Type.NormalRange),this._scaleRoomSize=new t.Scale(-.733,.197),this._allpassFilters=[],this._feedbackCombFilters=[];for(var o=0;o<r.length;o++){var s=this.context.createBiquadFilter();s.type="allpass",s.frequency.value=r[o],this._allpassFilters.push(s)}for(var a=0;a<e.length;a++){var h=new t.FeedbackCombFilter(e[a],.1);this._scaleRoomSize.connect(h.resonance),h.resonance.value=i[a],this._allpassFilters[this._allpassFilters.length-1].connect(h),a<e.length/2?h.connect(this.effectReturnL):h.connect(this.effectReturnR),this._feedbackCombFilters.push(h)}this.roomSize.connect(this._scaleRoomSize),t.connectSeries.apply(t,this._allpassFilters),this.effectSendL.connect(this._allpassFilters[0]),this.effectSendR.connect(this._allpassFilters[0]),this._readOnly(["roomSize"])},t.extend(t.JCReverb,t.StereoEffect),t.JCReverb.defaults={roomSize:.5},t.JCReverb.prototype.dispose=function(){t.StereoEffect.prototype.dispose.call(this);for(var e=0;e<this._allpassFilters.length;e++)this._allpassFilters[e].disconnect(),this._allpassFilters[e]=null;this._allpassFilters=null;for(var i=0;i<this._feedbackCombFilters.length;i++)this._feedbackCombFilters[i].dispose(),this._feedbackCombFilters[i]=null;return this._feedbackCombFilters=null,this._writable(["roomSize"]),this.roomSize.dispose(),this.roomSize=null,this._scaleRoomSize.dispose(),this._scaleRoomSize=null,this},t.JCReverb}),e(function(t){return t.MidSideEffect=function(){t.Effect.apply(this,arguments),this._midSideSplit=new t.MidSideSplit,this._midSideMerge=new t.MidSideMerge,this.midSend=this._midSideSplit.mid,this.sideSend=this._midSideSplit.side,this.midReturn=this._midSideMerge.mid,this.sideReturn=this._midSideMerge.side,this.effectSend.connect(this._midSideSplit),this._midSideMerge.connect(this.effectReturn)},t.extend(t.MidSideEffect,t.Effect),t.MidSideEffect.prototype.dispose=function(){return t.Effect.prototype.dispose.call(this),this._midSideSplit.dispose(),this._midSideSplit=null,this._midSideMerge.dispose(),this._midSideMerge=null,this.midSend=null,this.sideSend=null,this.midReturn=null,this.sideReturn=null,this},t.MidSideEffect}),e(function(t){return t.Phaser=function(){var e=t.defaults(arguments,["frequency","octaves","baseFrequency"],t.Phaser);t.StereoEffect.call(this,e),this._lfoL=new t.LFO(e.frequency,0,1),this._lfoR=new t.LFO(e.frequency,0,1),this._lfoR.phase=180,this._baseFrequency=e.baseFrequency,this._octaves=e.octaves,this.Q=new t.Signal(e.Q,t.Type.Positive),this._filtersL=this._makeFilters(e.stages,this._lfoL,this.Q),this._filtersR=this._makeFilters(e.stages,this._lfoR,this.Q),this.frequency=this._lfoL.frequency,this.frequency.value=e.frequency,this.effectSendL.connect(this._filtersL[0]),this.effectSendR.connect(this._filtersR[0]),this._filtersL[e.stages-1].connect(this.effectReturnL),this._filtersR[e.stages-1].connect(this.effectReturnR),this._lfoL.frequency.connect(this._lfoR.frequency),this.baseFrequency=e.baseFrequency,this.octaves=e.octaves,this._lfoL.start(),this._lfoR.start(),this._readOnly(["frequency","Q"])},t.extend(t.Phaser,t.StereoEffect),t.Phaser.defaults={frequency:.5,octaves:3,stages:10,Q:10,baseFrequency:350},t.Phaser.prototype._makeFilters=function(e,i,r){for(var n=new Array(e),o=0;o<e;o++){var s=this.context.createBiquadFilter();s.type="allpass",r.connect(s.Q),i.connect(s.frequency),n[o]=s}return t.connectSeries.apply(t,n),n},Object.defineProperty(t.Phaser.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t;var e=this._baseFrequency*Math.pow(2,t);this._lfoL.max=e,this._lfoR.max=e}}),Object.defineProperty(t.Phaser.prototype,"baseFrequency",{get:function(){return this._baseFrequency},set:function(t){this._baseFrequency=t,this._lfoL.min=t,this._lfoR.min=t,this.octaves=this._octaves}}),t.Phaser.prototype.dispose=function(){t.StereoEffect.prototype.dispose.call(this),this._writable(["frequency","Q"]),this.Q.dispose(),this.Q=null,this._lfoL.dispose(),this._lfoL=null,this._lfoR.dispose(),this._lfoR=null;for(var e=0;e<this._filtersL.length;e++)this._filtersL[e].disconnect(),this._filtersL[e]=null;this._filtersL=null;for(var i=0;i<this._filtersR.length;i++)this._filtersR[i].disconnect(),this._filtersR[i]=null;return this._filtersR=null,this.frequency=null,this},t.Phaser}),e(function(t){return t.StereoXFeedbackEffect=function(){var e=t.defaults(arguments,["feedback"],t.FeedbackEffect);t.StereoEffect.call(this,e),this.feedback=new t.Signal(e.feedback,t.Type.NormalRange),this._feedbackLR=new t.Gain,this._feedbackRL=new t.Gain,this.effectReturnL.chain(this._feedbackLR,this.effectSendR),this.effectReturnR.chain(this._feedbackRL,this.effectSendL),this.feedback.fan(this._feedbackLR.gain,this._feedbackRL.gain),this._readOnly(["feedback"])},t.extend(t.StereoXFeedbackEffect,t.StereoEffect),t.StereoXFeedbackEffect.prototype.dispose=function(){return t.StereoEffect.prototype.dispose.call(this),this._writable(["feedback"]),this.feedback.dispose(),this.feedback=null,this._feedbackLR.dispose(),this._feedbackLR=null,this._feedbackRL.dispose(),this._feedbackRL=null,this},t.StereoXFeedbackEffect}),e(function(t){return t.PingPongDelay=function(){var e=t.defaults(arguments,["delayTime","feedback"],t.PingPongDelay);t.StereoXFeedbackEffect.call(this,e),this._leftDelay=new t.Delay(0,e.maxDelayTime),this._rightDelay=new t.Delay(0,e.maxDelayTime),this._rightPreDelay=new t.Delay(0,e.maxDelayTime),this.delayTime=new t.Signal(e.delayTime,t.Type.Time),this.effectSendL.chain(this._leftDelay,this.effectReturnL),this.effectSendR.chain(this._rightPreDelay,this._rightDelay,this.effectReturnR),this.delayTime.fan(this._leftDelay.delayTime,this._rightDelay.delayTime,this._rightPreDelay.delayTime),this._feedbackLR.disconnect(),this._feedbackLR.connect(this._rightDelay),this._readOnly(["delayTime"])},t.extend(t.PingPongDelay,t.StereoXFeedbackEffect),t.PingPongDelay.defaults={delayTime:.25,maxDelayTime:1},t.PingPongDelay.prototype.dispose=function(){return t.StereoXFeedbackEffect.prototype.dispose.call(this),this._leftDelay.dispose(),this._leftDelay=null,this._rightDelay.dispose(),this._rightDelay=null,this._rightPreDelay.dispose(),this._rightPreDelay=null,this._writable(["delayTime"]),this.delayTime.dispose(),this.delayTime=null,this},t.PingPongDelay}),e(function(t){return t.PitchShift=function(){var e=t.defaults(arguments,["pitch"],t.PitchShift);t.FeedbackEffect.call(this,e),this._frequency=new t.Signal(0),this._delayA=new t.Delay(0,1),this._lfoA=new t.LFO({min:0,max:.1,type:"sawtooth"}).connect(this._delayA.delayTime),this._delayB=new t.Delay(0,1),this._lfoB=new t.LFO({min:0,max:.1,type:"sawtooth",phase:180}).connect(this._delayB.delayTime),this._crossFade=new t.CrossFade,this._crossFadeLFO=new t.LFO({min:0,max:1,type:"triangle",phase:90}).connect(this._crossFade.fade),this._feedbackDelay=new t.Delay(e.delayTime),this.delayTime=this._feedbackDelay.delayTime,this._readOnly("delayTime"),this._pitch=e.pitch,this._windowSize=e.windowSize,this._delayA.connect(this._crossFade.a),this._delayB.connect(this._crossFade.b),this._frequency.fan(this._lfoA.frequency,this._lfoB.frequency,this._crossFadeLFO.frequency),this.effectSend.fan(this._delayA,this._delayB),this._crossFade.chain(this._feedbackDelay,this.effectReturn);var i=this.now();this._lfoA.start(i),this._lfoB.start(i),this._crossFadeLFO.start(i),this.windowSize=this._windowSize},t.extend(t.PitchShift,t.FeedbackEffect),t.PitchShift.defaults={pitch:0,windowSize:.1,delayTime:0,feedback:0},Object.defineProperty(t.PitchShift.prototype,"pitch",{get:function(){return this._pitch},set:function(e){this._pitch=e;var i=0;e<0?(this._lfoA.min=0,this._lfoA.max=this._windowSize,this._lfoB.min=0,this._lfoB.max=this._windowSize,i=t.intervalToFrequencyRatio(e-1)+1):(this._lfoA.min=this._windowSize,this._lfoA.max=0,this._lfoB.min=this._windowSize,this._lfoB.max=0,i=t.intervalToFrequencyRatio(e)-1),this._frequency.value=i*(1.2/this._windowSize)}}),Object.defineProperty(t.PitchShift.prototype,"windowSize",{get:function(){return this._windowSize},set:function(t){this._windowSize=this.toSeconds(t),this.pitch=this._pitch}}),t.PitchShift.prototype.dispose=function(){return t.FeedbackEffect.prototype.dispose.call(this),this._frequency.dispose(),this._frequency=null,this._delayA.disconnect(),this._delayA=null,this._delayB.disconnect(),this._delayB=null,this._lfoA.dispose(),this._lfoA=null,this._lfoB.dispose(),this._lfoB=null,this._crossFade.dispose(),this._crossFade=null,this._crossFadeLFO.dispose(),this._crossFadeLFO=null,this._writable("delayTime"),this._feedbackDelay.dispose(),this._feedbackDelay=null,this.delayTime=null,this},t.PitchShift}),e(function(t){return t.BufferSource=function(){var e=t.defaults(arguments,["buffer","onload"],t.BufferSource);t.AudioNode.call(this,e),this.onended=e.onended,this._startTime=-1,this._sourceStarted=!1,this._sourceStopped=!1,this._stopTime=-1,this._gainNode=this.output=new t.Gain,this._source=this.context.createBufferSource(),this._source.connect(this._gainNode),this._source.onended=this._onended.bind(this),this._buffer=new t.Buffer(e.buffer,e.onload),this.playbackRate=new t.Param(this._source.playbackRate,t.Type.Positive),this.fadeIn=e.fadeIn,this.fadeOut=e.fadeOut,this.curve=e.curve,this._gain=1,this._onendedTimeout=-1,this.loop=e.loop,this.loopStart=e.loopStart,this.loopEnd=e.loopEnd,this.playbackRate.value=e.playbackRate},t.extend(t.BufferSource,t.AudioNode),t.BufferSource.defaults={onended:t.noOp,onload:t.noOp,loop:!1,loopStart:0,loopEnd:0,fadeIn:0,fadeOut:0,curve:"linear",playbackRate:1},Object.defineProperty(t.BufferSource.prototype,"state",{get:function(){return this.getStateAtTime(this.now())}}),t.BufferSource.prototype.getStateAtTime=function(e){return e=this.toSeconds(e),-1!==this._startTime&&e>=this._startTime&&!this._sourceStopped?t.State.Started:t.State.Stopped},t.BufferSource.prototype.start=function(e,i,r,n,o){if(-1!==this._startTime)throw new Error("Tone.BufferSource can only be started once.");if(!this.buffer.loaded)throw new Error("Tone.BufferSource: buffer is either not set or not loaded.");e=this.toSeconds(e),i=this.loop?t.defaultArg(i,this.loopStart):t.defaultArg(i,0),i=this.toSeconds(i),n=t.defaultArg(n,1),this._gain=n,o=this.toSeconds(t.defaultArg(o,this.fadeIn)),this.fadeIn=o,o>0?(this._gainNode.gain.setValueAtTime(0,e),"linear"===this.curve?this._gainNode.gain.linearRampToValueAtTime(this._gain,e+o):this._gainNode.gain.exponentialApproachValueAtTime(this._gain,e,o)):this._gainNode.gain.setValueAtTime(n,e),this._startTime=e;var s=this.toSeconds(t.defaultArg(r,this.buffer.duration-i%this.buffer.duration));if(s=Math.max(s,0),t.isDefined(r)&&(this.loop||(s=Math.min(s,this.buffer.duration-i%this.buffer.duration)),this.stop(e+s,this.fadeOut)),this.loop){var a=this.loopEnd||this.buffer.duration,h=this.loopStart;i>=a&&(i=(i-h)%(a-h)+h)}return this._source.buffer=this.buffer.get(),this._source.loopEnd=this.loopEnd||this.buffer.duration,i<this.buffer.duration&&(this._sourceStarted=!0,this._source.start(e,i)),this},t.BufferSource.prototype.stop=function(e,i){if(!this.buffer.loaded)throw new Error("Tone.BufferSource: buffer is either not set or not loaded.");if(!this._sourceStopped){if(e=this.toSeconds(e),-1!==this._stopTime&&this.cancelStop(),e<=this._startTime)return this._gainNode.gain.cancelScheduledValues(e),this._gainNode.gain.value=0,this;e=Math.max(this._startTime+this.fadeIn+this.sampleTime,e),this._gainNode.gain.cancelScheduledValues(e),this._stopTime=e,i=this.toSeconds(t.defaultArg(i,this.fadeOut));var r=e-this._startTime-this.fadeIn-this.sampleTime;this.loop||(r=Math.min(r,this.buffer.duration));var n=e-(i=Math.min(r,i));return i>this.sampleTime?(this._gainNode.gain.setValueAtTime(this._gain,n),"linear"===this.curve?this._gainNode.gain.linearRampToValueAtTime(0,e):this._gainNode.gain.exponentialApproachValueAtTime(0,n,i)):this._gainNode.gain.setValueAtTime(0,e),t.context.clearTimeout(this._onendedTimeout),this._onendedTimeout=t.context.setTimeout(this._onended.bind(this),this._stopTime-this.now()),this}},t.BufferSource.prototype.cancelStop=function(){if(-1!==this._startTime&&!this._sourceStopped){var t=this.toSeconds(this.fadeIn);this._gainNode.gain.cancelScheduledValues(this._startTime+t+this.sampleTime),this._gainNode.gain.setValueAtTime(1,Math.max(this.now(),this._startTime+t+this.sampleTime)),this.context.clearTimeout(this._onendedTimeout),this._stopTime=-1}return this},t.BufferSource.prototype._onended=function(){if(!this._sourceStopped){this._sourceStopped=!0;var t="exponential"===this.curve?2*this.fadeOut:0;this._sourceStarted&&-1!==this._stopTime&&this._source.stop(this._stopTime+t),this.onended(this)}},Object.defineProperty(t.BufferSource.prototype,"loopStart",{get:function(){return this._source.loopStart},set:function(t){this._source.loopStart=this.toSeconds(t)}}),Object.defineProperty(t.BufferSource.prototype,"loopEnd",{get:function(){return this._source.loopEnd},set:function(t){this._source.loopEnd=this.toSeconds(t)}}),Object.defineProperty(t.BufferSource.prototype,"buffer",{get:function(){return this._buffer},set:function(t){this._buffer.set(t)}}),Object.defineProperty(t.BufferSource.prototype,"loop",{get:function(){return this._source.loop},set:function(t){this._source.loop=t,this.cancelStop()}}),t.BufferSource.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this.onended=null,this._source.onended=null,this._source.disconnect(),this._source=null,this._gainNode.dispose(),this._gainNode=null,this._buffer.dispose(),this._buffer=null,this._startTime=-1,this.playbackRate=null,t.context.clearTimeout(this._onendedTimeout),this},t.BufferSource}),e(function(t){t.Noise=function(){var e=t.defaults(arguments,["type"],t.Noise);t.Source.call(this,e),this._source=null,this._type=e.type,this._playbackRate=e.playbackRate},t.extend(t.Noise,t.Source),t.Noise.defaults={type:"white",playbackRate:1},Object.defineProperty(t.Noise.prototype,"type",{get:function(){return this._type},set:function(e){if(this._type!==e){if(!(e in i))throw new TypeError("Tone.Noise: invalid type: "+e);if(this._type=e,this.state===t.State.Started){var r=this.now();this._stop(r),this._start(r)}}}}),Object.defineProperty(t.Noise.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this._source&&(this._source.playbackRate.value=t)}}),t.Noise.prototype._start=function(e){var r=i[this._type];this._source=new t.BufferSource(r).connect(this.output),this._source.loop=!0,this._source.playbackRate.value=this._playbackRate,this._source.start(this.toSeconds(e),Math.random()*(r.duration-.001))},t.Noise.prototype._stop=function(t){this._source&&(this._source.stop(this.toSeconds(t)),this._source=null)},t.Noise.prototype.restart=function(t){this._stop(t),this._start(t)},t.Noise.prototype.dispose=function(){return t.Source.prototype.dispose.call(this),null!==this._source&&(this._source.disconnect(),this._source=null),this._buffer=null,this};var e={pink:function(){for(var t=[],e=0;e<2;e++){var i,r,n,o,s,a,h,l=new Float32Array(220500);t[e]=l,i=r=n=o=s=a=h=0;for(var u=0;u<220500;u++){var c=2*Math.random()-1;i=.99886*i+.0555179*c,r=.99332*r+.0750759*c,n=.969*n+.153852*c,o=.8665*o+.3104856*c,s=.55*s+.5329522*c,a=-.7616*a-.016898*c,l[u]=i+r+n+o+s+a+h+.5362*c,l[u]*=.11,h=.115926*c}}return t}(),brown:function(){for(var t=[],e=0;e<2;e++){var i=new Float32Array(220500);t[e]=i;for(var r=0,n=0;n<220500;n++){var o=2*Math.random()-1;i[n]=(r+.02*o)/1.02,r=i[n],i[n]*=3.5}}return t}(),white:function(){for(var t=[],e=0;e<2;e++){var i=new Float32Array(220500);t[e]=i;for(var r=0;r<220500;r++)i[r]=2*Math.random()-1}return t}()},i={};function r(){for(var r in e)i[r]=(new t.Buffer).fromArray(e[r])}return t.getContext(r),t.Context.on("init",r),t.Noise}),e(function(t){return t.Reverb=function(){var e=t.defaults(arguments,["decay"],t.Reverb);t.Effect.call(this,e),this._convolver=this.context.createConvolver(),this.decay=e.decay,this.preDelay=e.preDelay,this.connectEffect(this._convolver)},t.extend(t.Reverb,t.Effect),t.Reverb.defaults={decay:1.5,preDelay:.01},t.Reverb.prototype.generate=function(){return t.Offline(function(){var e=new t.Noise,i=new t.Noise,r=new t.Merge;e.connect(r.left),i.connect(r.right);var n=(new t.Gain).toMaster();r.connect(n),e.start(0),i.start(0),n.gain.setValueAtTime(0,0),n.gain.linearRampToValueAtTime(1,this.preDelay),n.gain.exponentialApproachValueAtTime(0,this.preDelay,this.decay-this.preDelay)}.bind(this),this.decay).then(function(t){return this._convolver.buffer=t.get(),this}.bind(this))},t.Reverb.prototype.dispose=function(){return t.Effect.prototype.dispose.call(this),this._convolver.disconnect(),this._convolver=null,this},t.Reverb}),e(function(t){return t.StereoFeedbackEffect=function(){var e=t.defaults(arguments,["feedback"],t.FeedbackEffect);t.StereoEffect.call(this,e),this.feedback=new t.Signal(e.feedback,t.Type.NormalRange),this._feedbackL=new t.Gain,this._feedbackR=new t.Gain,this.effectReturnL.chain(this._feedbackL,this.effectSendL),this.effectReturnR.chain(this._feedbackR,this.effectSendR),this.feedback.fan(this._feedbackL.gain,this._feedbackR.gain),this._readOnly(["feedback"])},t.extend(t.StereoFeedbackEffect,t.StereoEffect),t.StereoFeedbackEffect.prototype.dispose=function(){return t.StereoEffect.prototype.dispose.call(this),this._writable(["feedback"]),this.feedback.dispose(),this.feedback=null,this._feedbackL.dispose(),this._feedbackL=null,this._feedbackR.dispose(),this._feedbackR=null,this},t.StereoFeedbackEffect}),e(function(t){return t.StereoWidener=function(){var e=t.defaults(arguments,["width"],t.StereoWidener);t.MidSideEffect.call(this,e),this.width=new t.Signal(e.width,t.Type.NormalRange),this._readOnly(["width"]),this._twoTimesWidthMid=new t.Multiply(2),this._twoTimesWidthSide=new t.Multiply(2),this._midMult=new t.Multiply,this._twoTimesWidthMid.connect(this._midMult,0,1),this.midSend.chain(this._midMult,this.midReturn),this._oneMinusWidth=new t.Subtract,this._oneMinusWidth.connect(this._twoTimesWidthMid),this.context.getConstant(1).connect(this._oneMinusWidth,0,0),this.width.connect(this._oneMinusWidth,0,1),this._sideMult=new t.Multiply,this.width.connect(this._twoTimesWidthSide),this._twoTimesWidthSide.connect(this._sideMult,0,1),this.sideSend.chain(this._sideMult,this.sideReturn)},t.extend(t.StereoWidener,t.MidSideEffect),t.StereoWidener.defaults={width:.5},t.StereoWidener.prototype.dispose=function(){return t.MidSideEffect.prototype.dispose.call(this),this._writable(["width"]),this.width.dispose(),this.width=null,this._midMult.dispose(),this._midMult=null,this._sideMult.dispose(),this._sideMult=null,this._twoTimesWidthMid.dispose(),this._twoTimesWidthMid=null,this._twoTimesWidthSide.dispose(),this._twoTimesWidthSide=null,this._oneMinusWidth.dispose(),this._oneMinusWidth=null,this},t.StereoWidener}),e(function(t){return t.Tremolo=function(){var e=t.defaults(arguments,["frequency","depth"],t.Tremolo);t.StereoEffect.call(this,e),this._lfoL=new t.LFO({phase:e.spread,min:1,max:0}),this._lfoR=new t.LFO({phase:e.spread,min:1,max:0}),this._amplitudeL=new t.Gain,this._amplitudeR=new t.Gain,this.frequency=new t.Signal(e.frequency,t.Type.Frequency),this.depth=new t.Signal(e.depth,t.Type.NormalRange),this._readOnly(["frequency","depth"]),this.effectSendL.chain(this._amplitudeL,this.effectReturnL),this.effectSendR.chain(this._amplitudeR,this.effectReturnR),this._lfoL.connect(this._amplitudeL.gain),this._lfoR.connect(this._amplitudeR.gain),this.frequency.fan(this._lfoL.frequency,this._lfoR.frequency),this.depth.fan(this._lfoR.amplitude,this._lfoL.amplitude),this.type=e.type,this.spread=e.spread},t.extend(t.Tremolo,t.StereoEffect),t.Tremolo.defaults={frequency:10,type:"sine",depth:.5,spread:180},t.Tremolo.prototype.start=function(t){return this._lfoL.start(t),this._lfoR.start(t),this},t.Tremolo.prototype.stop=function(t){return this._lfoL.stop(t),this._lfoR.stop(t),this},t.Tremolo.prototype.sync=function(e){return this._lfoL.sync(e),this._lfoR.sync(e),t.Transport.syncSignal(this.frequency),this},t.Tremolo.prototype.unsync=function(){return this._lfoL.unsync(),this._lfoR.unsync(),t.Transport.unsyncSignal(this.frequency),this},Object.defineProperty(t.Tremolo.prototype,"type",{get:function(){return this._lfoL.type},set:function(t){this._lfoL.type=t,this._lfoR.type=t}}),Object.defineProperty(t.Tremolo.prototype,"spread",{get:function(){return this._lfoR.phase-this._lfoL.phase},set:function(t){this._lfoL.phase=90-t/2,this._lfoR.phase=t/2+90}}),t.Tremolo.prototype.dispose=function(){return t.StereoEffect.prototype.dispose.call(this),this._writable(["frequency","depth"]),this._lfoL.dispose(),this._lfoL=null,this._lfoR.dispose(),this._lfoR=null,this._amplitudeL.dispose(),this._amplitudeL=null,this._amplitudeR.dispose(),this._amplitudeR=null,this.frequency=null,this.depth=null,this},t.Tremolo}),e(function(t){return t.Vibrato=function(){var e=t.defaults(arguments,["frequency","depth"],t.Vibrato);t.Effect.call(this,e),this._delayNode=new t.Delay(0,e.maxDelay),this._lfo=new t.LFO({type:e.type,min:0,max:e.maxDelay,frequency:e.frequency,phase:-90}).start().connect(this._delayNode.delayTime),this.frequency=this._lfo.frequency,this.depth=this._lfo.amplitude,this.depth.value=e.depth,this._readOnly(["frequency","depth"]),this.effectSend.chain(this._delayNode,this.effectReturn)},t.extend(t.Vibrato,t.Effect),t.Vibrato.defaults={maxDelay:.005,frequency:5,depth:.1,type:"sine"},Object.defineProperty(t.Vibrato.prototype,"type",{get:function(){return this._lfo.type},set:function(t){this._lfo.type=t}}),t.Vibrato.prototype.dispose=function(){t.Effect.prototype.dispose.call(this),this._delayNode.dispose(),this._delayNode=null,this._lfo.dispose(),this._lfo=null,this._writable(["frequency","depth"]),this.frequency=null,this.depth=null},t.Vibrato}),e(function(t){return t.Event=function(){var e=t.defaults(arguments,["callback","value"],t.Event);t.call(this),this._loop=e.loop,this.callback=e.callback,this.value=e.value,this._loopStart=this.toTicks(e.loopStart),this._loopEnd=this.toTicks(e.loopEnd),this._state=new t.TimelineState(t.State.Stopped),this._playbackRate=1,this._startOffset=0,this._probability=e.probability,this._humanize=e.humanize,this.mute=e.mute,this.playbackRate=e.playbackRate},t.extend(t.Event),t.Event.defaults={callback:t.noOp,loop:!1,loopEnd:"1m",loopStart:0,playbackRate:1,value:null,probability:1,mute:!1,humanize:!1},t.Event.prototype._rescheduleEvents=function(e){return e=t.defaultArg(e,-1),this._state.forEachFrom(e,function(e){var i;if(e.state===t.State.Started){t.isDefined(e.id)&&t.Transport.clear(e.id);var r=e.time+Math.round(this.startOffset/this._playbackRate);if(this._loop){i=1/0,t.isNumber(this._loop)&&(i=this._loop*this._getLoopDuration());var n=this._state.getAfter(r);null!==n&&(i=Math.min(i,n.time-r)),i!==1/0&&(this._state.setStateAtTime(t.State.Stopped,r+i+1),i=t.Ticks(i));var o=t.Ticks(this._getLoopDuration());e.id=t.Transport.scheduleRepeat(this._tick.bind(this),o,t.Ticks(r),i)}else e.id=t.Transport.schedule(this._tick.bind(this),t.Ticks(r))}}.bind(this)),this},Object.defineProperty(t.Event.prototype,"state",{get:function(){return this._state.getValueAtTime(t.Transport.ticks)}}),Object.defineProperty(t.Event.prototype,"startOffset",{get:function(){return this._startOffset},set:function(t){this._startOffset=t}}),Object.defineProperty(t.Event.prototype,"probability",{get:function(){return this._probability},set:function(t){this._probability=t}}),Object.defineProperty(t.Event.prototype,"humanize",{get:function(){return this._humanize},set:function(t){this._humanize=t}}),t.Event.prototype.start=function(e){return e=this.toTicks(e),this._state.getValueAtTime(e)===t.State.Stopped&&(this._state.add({state:t.State.Started,time:e,id:void 0}),this._rescheduleEvents(e)),this},t.Event.prototype.stop=function(e){if(this.cancel(e),e=this.toTicks(e),this._state.getValueAtTime(e)===t.State.Started){this._state.setStateAtTime(t.State.Stopped,e);var i=this._state.getBefore(e),r=e;null!==i&&(r=i.time),this._rescheduleEvents(r)}return this},t.Event.prototype.cancel=function(e){return e=t.defaultArg(e,-1/0),e=this.toTicks(e),this._state.forEachFrom(e,function(e){t.Transport.clear(e.id)}),this._state.cancel(e),this},t.Event.prototype._tick=function(e){var i=t.Transport.getTicksAtTime(e);if(!this.mute&&this._state.getValueAtTime(i)===t.State.Started){if(this.probability<1&&Math.random()>this.probability)return;if(this.humanize){var r=.02;t.isBoolean(this.humanize)||(r=this.toSeconds(this.humanize)),e+=(2*Math.random()-1)*r}this.callback(e,this.value)}},t.Event.prototype._getLoopDuration=function(){return Math.round((this._loopEnd-this._loopStart)/this._playbackRate)},Object.defineProperty(t.Event.prototype,"loop",{get:function(){return this._loop},set:function(t){this._loop=t,this._rescheduleEvents()}}),Object.defineProperty(t.Event.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this._rescheduleEvents()}}),Object.defineProperty(t.Event.prototype,"loopEnd",{get:function(){return t.Ticks(this._loopEnd).toSeconds()},set:function(t){this._loopEnd=this.toTicks(t),this._loop&&this._rescheduleEvents()}}),Object.defineProperty(t.Event.prototype,"loopStart",{get:function(){return t.Ticks(this._loopStart).toSeconds()},set:function(t){this._loopStart=this.toTicks(t),this._loop&&this._rescheduleEvents()}}),Object.defineProperty(t.Event.prototype,"progress",{get:function(){if(this._loop){var e=t.Transport.ticks,i=this._state.get(e);if(null!==i&&i.state===t.State.Started){var r=this._getLoopDuration();return(e-i.time)%r/r}return 0}return 0}}),t.Event.prototype.dispose=function(){this.cancel(),this._state.dispose(),this._state=null,this.callback=null,this.value=null},t.Event}),e(function(t){return t.Loop=function(){var e=t.defaults(arguments,["callback","interval"],t.Loop);t.call(this),this._event=new t.Event({callback:this._tick.bind(this),loop:!0,loopEnd:e.interval,playbackRate:e.playbackRate,probability:e.probability}),this.callback=e.callback,this.iterations=e.iterations},t.extend(t.Loop),t.Loop.defaults={interval:"4n",callback:t.noOp,playbackRate:1,iterations:1/0,probability:!0,mute:!1},t.Loop.prototype.start=function(t){return this._event.start(t),this},t.Loop.prototype.stop=function(t){return this._event.stop(t),this},t.Loop.prototype.cancel=function(t){return this._event.cancel(t),this},t.Loop.prototype._tick=function(t){this.callback(t)},Object.defineProperty(t.Loop.prototype,"state",{get:function(){return this._event.state}}),Object.defineProperty(t.Loop.prototype,"progress",{get:function(){return this._event.progress}}),Object.defineProperty(t.Loop.prototype,"interval",{get:function(){return this._event.loopEnd},set:function(t){this._event.loopEnd=t}}),Object.defineProperty(t.Loop.prototype,"playbackRate",{get:function(){return this._event.playbackRate},set:function(t){this._event.playbackRate=t}}),Object.defineProperty(t.Loop.prototype,"humanize",{get:function(){return this._event.humanize},set:function(t){this._event.humanize=t}}),Object.defineProperty(t.Loop.prototype,"probability",{get:function(){return this._event.probability},set:function(t){this._event.probability=t}}),Object.defineProperty(t.Loop.prototype,"mute",{get:function(){return this._event.mute},set:function(t){this._event.mute=t}}),Object.defineProperty(t.Loop.prototype,"iterations",{get:function(){return!0===this._event.loop?1/0:this._event.loop},set:function(t){this._event.loop=t===1/0||t}}),t.Loop.prototype.dispose=function(){this._event.dispose(),this._event=null,this.callback=null},t.Loop}),e(function(t){return t.Part=function(){var e=t.defaults(arguments,["callback","events"],t.Part);t.Event.call(this,e),this._events=[];for(var i=0;i<e.events.length;i++)Array.isArray(e.events[i])?this.add(e.events[i][0],e.events[i][1]):this.add(e.events[i])},t.extend(t.Part,t.Event),t.Part.defaults={callback:t.noOp,loop:!1,loopEnd:"1m",loopStart:0,playbackRate:1,probability:1,humanize:!1,mute:!1,events:[]},t.Part.prototype.start=function(e,i){var r=this.toTicks(e);return this._state.getValueAtTime(r)!==t.State.Started&&(i=this._loop?t.defaultArg(i,this._loopStart):t.defaultArg(i,0),i=this.toTicks(i),this._state.add({state:t.State.Started,time:r,offset:i}),this._forEach(function(t){this._startNote(t,r,i)})),this},t.Part.prototype._startNote=function(e,i,r){i-=r,this._loop?e.startOffset>=this._loopStart&&e.startOffset<this._loopEnd?(e.startOffset<r&&(i+=this._getLoopDuration()),e.start(t.Ticks(i))):e.startOffset<this._loopStart&&e.startOffset>=r&&(e.loop=!1,e.start(t.Ticks(i))):e.startOffset>=r&&e.start(t.Ticks(i))},Object.defineProperty(t.Part.prototype,"startOffset",{get:function(){return this._startOffset},set:function(t){this._startOffset=t,this._forEach(function(t){t.startOffset+=this._startOffset})}}),t.Part.prototype.stop=function(e){var i=this.toTicks(e);return this._state.cancel(i),this._state.setStateAtTime(t.State.Stopped,i),this._forEach(function(t){t.stop(e)}),this},t.Part.prototype.at=function(e,i){e=t.TransportTime(e);for(var r=t.Ticks(1).toSeconds(),n=0;n<this._events.length;n++){var o=this._events[n];if(Math.abs(e.toTicks()-o.startOffset)<r)return t.isDefined(i)&&(o.value=i),o}return t.isDefined(i)?(this.add(e,i),this._events[this._events.length-1]):null},t.Part.prototype.add=function(e,i){var r;return e.hasOwnProperty("time")&&(e=(i=e).time),e=this.toTicks(e),i instanceof t.Event?(r=i).callback=this._tick.bind(this):r=new t.Event({callback:this._tick.bind(this),value:i}),r.startOffset=e,r.set({loopEnd:this.loopEnd,loopStart:this.loopStart,loop:this.loop,humanize:this.humanize,playbackRate:this.playbackRate,probability:this.probability}),this._events.push(r),this._restartEvent(r),this},t.Part.prototype._restartEvent=function(e){this._state.forEach(function(i){i.state===t.State.Started?this._startNote(e,i.time,i.offset):e.stop(t.Ticks(i.time))}.bind(this))},t.Part.prototype.remove=function(e,i){e.hasOwnProperty("time")&&(e=(i=e).time),e=this.toTicks(e);for(var r=this._events.length-1;r>=0;r--){var n=this._events[r];n instanceof t.Part?n.remove(e,i):n.startOffset===e&&(t.isUndef(i)||t.isDefined(i)&&n.value===i)&&(this._events.splice(r,1),n.dispose())}return this},t.Part.prototype.removeAll=function(){return this._forEach(function(t){t.dispose()}),this._events=[],this},t.Part.prototype.cancel=function(t){return this._forEach(function(e){e.cancel(t)}),this._state.cancel(this.toTicks(t)),this},t.Part.prototype._forEach=function(e,i){if(this._events){i=t.defaultArg(i,this);for(var r=this._events.length-1;r>=0;r--){var n=this._events[r];n instanceof t.Part?n._forEach(e,i):e.call(i,n)}}return this},t.Part.prototype._setAll=function(t,e){this._forEach(function(i){i[t]=e})},t.Part.prototype._tick=function(t,e){this.mute||this.callback(t,e)},t.Part.prototype._testLoopBoundries=function(e){e.startOffset<this._loopStart||e.startOffset>=this._loopEnd?e.cancel(0):e.state===t.State.Stopped&&this._restartEvent(e)},Object.defineProperty(t.Part.prototype,"probability",{get:function(){return this._probability},set:function(t){this._probability=t,this._setAll("probability",t)}}),Object.defineProperty(t.Part.prototype,"humanize",{get:function(){return this._humanize},set:function(t){this._humanize=t,this._setAll("humanize",t)}}),Object.defineProperty(t.Part.prototype,"loop",{get:function(){return this._loop},set:function(t){this._loop=t,this._forEach(function(e){e._loopStart=this._loopStart,e._loopEnd=this._loopEnd,e.loop=t,this._testLoopBoundries(e)})}}),Object.defineProperty(t.Part.prototype,"loopEnd",{get:function(){return t.Ticks(this._loopEnd).toSeconds()},set:function(t){this._loopEnd=this.toTicks(t),this._loop&&this._forEach(function(e){e.loopEnd=t,this._testLoopBoundries(e)})}}),Object.defineProperty(t.Part.prototype,"loopStart",{get:function(){return t.Ticks(this._loopStart).toSeconds()},set:function(t){this._loopStart=this.toTicks(t),this._loop&&this._forEach(function(t){t.loopStart=this.loopStart,this._testLoopBoundries(t)})}}),Object.defineProperty(t.Part.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this._setAll("playbackRate",t)}}),Object.defineProperty(t.Part.prototype,"length",{get:function(){return this._events.length}}),t.Part.prototype.dispose=function(){return this.removeAll(),this._state.dispose(),this._state=null,this.callback=null,this._events=null,this},t.Part}),e(function(t){return t.Pattern=function(){var e=t.defaults(arguments,["callback","values","pattern"],t.Pattern);t.Loop.call(this,e),this._pattern=new t.CtrlPattern({values:e.values,type:e.pattern,index:e.index})},t.extend(t.Pattern,t.Loop),t.Pattern.defaults={pattern:t.CtrlPattern.Type.Up,callback:t.noOp,values:[]},t.Pattern.prototype._tick=function(t){this.callback(t,this._pattern.value),this._pattern.next()},Object.defineProperty(t.Pattern.prototype,"index",{get:function(){return this._pattern.index},set:function(t){this._pattern.index=t}}),Object.defineProperty(t.Pattern.prototype,"values",{get:function(){return this._pattern.values},set:function(t){this._pattern.values=t}}),Object.defineProperty(t.Pattern.prototype,"value",{get:function(){return this._pattern.value}}),Object.defineProperty(t.Pattern.prototype,"pattern",{get:function(){return this._pattern.type},set:function(t){this._pattern.type=t}}),t.Pattern.prototype.dispose=function(){t.Loop.prototype.dispose.call(this),this._pattern.dispose(),this._pattern=null},t.Pattern}),e(function(t){return t.Sequence=function(){var e=t.defaults(arguments,["callback","events","subdivision"],t.Sequence),i=e.events;if(delete e.events,t.Part.call(this,e),this._subdivision=this.toTicks(e.subdivision),t.isUndef(e.loopEnd)&&t.isDefined(i)&&(this._loopEnd=i.length*this._subdivision),this._loop=!0,t.isDefined(i))for(var r=0;r<i.length;r++)this.add(r,i[r])},t.extend(t.Sequence,t.Part),t.Sequence.defaults={subdivision:"4n"},Object.defineProperty(t.Sequence.prototype,"subdivision",{get:function(){return t.Ticks(this._subdivision).toSeconds()}}),t.Sequence.prototype.at=function(e,i){return t.isArray(i)&&this.remove(e),t.Part.prototype.at.call(this,this._indexTime(e),i)},t.Sequence.prototype.add=function(e,i){if(null===i)return this;if(t.isArray(i)){var r=Math.round(this._subdivision/i.length);i=new t.Sequence(this._tick.bind(this),i,t.Ticks(r))}return t.Part.prototype.add.call(this,this._indexTime(e),i),this},t.Sequence.prototype.remove=function(e,i){return t.Part.prototype.remove.call(this,this._indexTime(e),i),this},t.Sequence.prototype._indexTime=function(e){return e instanceof t.TransportTime?e:t.Ticks(e*this._subdivision+this.startOffset).toSeconds()},t.Sequence.prototype.dispose=function(){return t.Part.prototype.dispose.call(this),this},t.Sequence}),e(function(t){return t.PulseOscillator=function(){var e=t.defaults(arguments,["frequency","width"],t.Oscillator);t.Source.call(this,e),this.width=new t.Signal(e.width,t.Type.NormalRange),this._widthGate=new t.Gain,this._sawtooth=new t.Oscillator({frequency:e.frequency,detune:e.detune,type:"sawtooth",phase:e.phase}),this.frequency=this._sawtooth.frequency,this.detune=this._sawtooth.detune,this._thresh=new t.WaveShaper(function(t){return t<0?-1:1}),this._sawtooth.chain(this._thresh,this.output),this.width.chain(this._widthGate,this._thresh),this._readOnly(["width","frequency","detune"])},t.extend(t.PulseOscillator,t.Source),t.PulseOscillator.defaults={frequency:440,detune:0,phase:0,width:.2},t.PulseOscillator.prototype._start=function(t){t=this.toSeconds(t),this._sawtooth.start(t),this._widthGate.gain.setValueAtTime(1,t)},t.PulseOscillator.prototype._stop=function(t){t=this.toSeconds(t),this._sawtooth.stop(t),this._widthGate.gain.setValueAtTime(0,t)},t.PulseOscillator.prototype.restart=function(t){this._sawtooth.restart(t)},Object.defineProperty(t.PulseOscillator.prototype,"phase",{get:function(){return this._sawtooth.phase},set:function(t){this._sawtooth.phase=t}}),Object.defineProperty(t.PulseOscillator.prototype,"type",{get:function(){return"pulse"}}),Object.defineProperty(t.PulseOscillator.prototype,"partials",{get:function(){return[]}}),t.PulseOscillator.prototype.dispose=function(){return t.Source.prototype.dispose.call(this),this._sawtooth.dispose(),this._sawtooth=null,this._writable(["width","frequency","detune"]),this.width.dispose(),this.width=null,this._widthGate.dispose(),this._widthGate=null,this._thresh.dispose(),this._thresh=null,this.frequency=null,this.detune=null,this},t.PulseOscillator}),e(function(t){return t.PWMOscillator=function(){var e=t.defaults(arguments,["frequency","modulationFrequency"],t.PWMOscillator);t.Source.call(this,e),this._pulse=new t.PulseOscillator(e.modulationFrequency),this._pulse._sawtooth.type="sine",this._modulator=new t.Oscillator({frequency:e.frequency,detune:e.detune,phase:e.phase}),this._scale=new t.Multiply(2),this.frequency=this._modulator.frequency,this.detune=this._modulator.detune,this.modulationFrequency=this._pulse.frequency,this._modulator.chain(this._scale,this._pulse.width),this._pulse.connect(this.output),this._readOnly(["modulationFrequency","frequency","detune"])},t.extend(t.PWMOscillator,t.Source),t.PWMOscillator.defaults={frequency:440,detune:0,phase:0,modulationFrequency:.4},t.PWMOscillator.prototype._start=function(t){t=this.toSeconds(t),this._modulator.start(t),this._pulse.start(t)},t.PWMOscillator.prototype._stop=function(t){t=this.toSeconds(t),this._modulator.stop(t),this._pulse.stop(t)},t.PWMOscillator.prototype.restart=function(t){this._modulator.restart(t),this._pulse.restart(t)},Object.defineProperty(t.PWMOscillator.prototype,"type",{get:function(){return"pwm"}}),Object.defineProperty(t.PWMOscillator.prototype,"partials",{get:function(){return[]}}),Object.defineProperty(t.PWMOscillator.prototype,"phase",{get:function(){return this._modulator.phase},set:function(t){this._modulator.phase=t}}),t.PWMOscillator.prototype.dispose=function(){return t.Source.prototype.dispose.call(this),this._pulse.dispose(),this._pulse=null,this._scale.dispose(),this._scale=null,this._modulator.dispose(),this._modulator=null,this._writable(["modulationFrequency","frequency","detune"]),this.frequency=null,this.detune=null,this.modulationFrequency=null,this},t.PWMOscillator}),e(function(t){return t.FMOscillator=function(){var e=t.defaults(arguments,["frequency","type","modulationType"],t.FMOscillator);t.Source.call(this,e),this._carrier=new t.Oscillator(e.frequency,e.type),this.frequency=new t.Signal(e.frequency,t.Type.Frequency),this.detune=this._carrier.detune,this.detune.value=e.detune,this.modulationIndex=new t.Multiply(e.modulationIndex),this.modulationIndex.units=t.Type.Positive,this._modulator=new t.Oscillator(e.frequency,e.modulationType),this.harmonicity=new t.Multiply(e.harmonicity),this.harmonicity.units=t.Type.Positive,this._modulationNode=new t.Gain(0),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output),this.detune.connect(this._modulator.detune),this.phase=e.phase,this._readOnly(["modulationIndex","frequency","detune","harmonicity"])},t.extend(t.FMOscillator,t.Source),t.FMOscillator.defaults={frequency:440,detune:0,phase:0,modulationIndex:2,modulationType:"square",harmonicity:1},t.FMOscillator.prototype._start=function(t){this._modulator.start(t),this._carrier.start(t)},t.FMOscillator.prototype._stop=function(t){this._modulator.stop(t),this._carrier.stop(t)},t.FMOscillator.prototype.restart=function(t){this._modulator.restart(t),this._carrier.restart(t)},Object.defineProperty(t.FMOscillator.prototype,"type",{get:function(){return this._carrier.type},set:function(t){this._carrier.type=t}}),Object.defineProperty(t.FMOscillator.prototype,"modulationType",{get:function(){return this._modulator.type},set:function(t){this._modulator.type=t}}),Object.defineProperty(t.FMOscillator.prototype,"phase",{get:function(){return this._carrier.phase},set:function(t){this._carrier.phase=t,this._modulator.phase=t}}),Object.defineProperty(t.FMOscillator.prototype,"partials",{get:function(){return this._carrier.partials},set:function(t){this._carrier.partials=t}}),t.FMOscillator.prototype.dispose=function(){return t.Source.prototype.dispose.call(this),this._writable(["modulationIndex","frequency","detune","harmonicity"]),this.frequency.dispose(),this.frequency=null,this.detune=null,this.harmonicity.dispose(),this.harmonicity=null,this._carrier.dispose(),this._carrier=null,this._modulator.dispose(),this._modulator=null,this._modulationNode.dispose(),this._modulationNode=null,this.modulationIndex.dispose(),this.modulationIndex=null,this},t.FMOscillator}),e(function(t){return t.AMOscillator=function(){var e=t.defaults(arguments,["frequency","type","modulationType"],t.AMOscillator);t.Source.call(this,e),this._carrier=new t.Oscillator(e.frequency,e.type),this.frequency=this._carrier.frequency,this.detune=this._carrier.detune,this.detune.value=e.detune,this._modulator=new t.Oscillator(e.frequency,e.modulationType),this._modulationScale=new t.AudioToGain,this.harmonicity=new t.Multiply(e.harmonicity),this.harmonicity.units=t.Type.Positive,this._modulationNode=new t.Gain(0),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.detune.connect(this._modulator.detune),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output),this.phase=e.phase,this._readOnly(["frequency","detune","harmonicity"])},t.extend(t.AMOscillator,t.Oscillator),t.AMOscillator.defaults={frequency:440,detune:0,phase:0,modulationType:"square",harmonicity:1},t.AMOscillator.prototype._start=function(t){this._modulator.start(t),this._carrier.start(t)},t.AMOscillator.prototype._stop=function(t){this._modulator.stop(t),this._carrier.stop(t)},t.AMOscillator.prototype.restart=function(t){this._modulator.restart(t),this._carrier.restart(t)},Object.defineProperty(t.AMOscillator.prototype,"type",{get:function(){return this._carrier.type},set:function(t){this._carrier.type=t}}),Object.defineProperty(t.AMOscillator.prototype,"modulationType",{get:function(){return this._modulator.type},set:function(t){this._modulator.type=t}}),Object.defineProperty(t.AMOscillator.prototype,"phase",{get:function(){return this._carrier.phase},set:function(t){this._carrier.phase=t,this._modulator.phase=t}}),Object.defineProperty(t.AMOscillator.prototype,"partials",{get:function(){return this._carrier.partials},set:function(t){this._carrier.partials=t}}),t.AMOscillator.prototype.dispose=function(){return t.Source.prototype.dispose.call(this),this._writable(["frequency","detune","harmonicity"]),this.frequency=null,this.detune=null,this.harmonicity.dispose(),this.harmonicity=null,this._carrier.dispose(),this._carrier=null,this._modulator.dispose(),this._modulator=null,this._modulationNode.dispose(),this._modulationNode=null,this._modulationScale.dispose(),this._modulationScale=null,this},t.AMOscillator}),e(function(t){return t.FatOscillator=function(){var e=t.defaults(arguments,["frequency","type","spread"],t.FatOscillator);t.Source.call(this,e),this.frequency=new t.Signal(e.frequency,t.Type.Frequency),this.detune=new t.Signal(e.detune,t.Type.Cents),this._oscillators=[],this._spread=e.spread,this._type=e.type,this._phase=e.phase,this._partials=t.defaultArg(e.partials,[]),this.count=e.count,this._readOnly(["frequency","detune"])},t.extend(t.FatOscillator,t.Source),t.FatOscillator.defaults={frequency:440,detune:0,phase:0,spread:20,count:3,type:"sawtooth"},t.FatOscillator.prototype._start=function(t){t=this.toSeconds(t),this._forEach(function(e){e.start(t)})},t.FatOscillator.prototype._stop=function(t){t=this.toSeconds(t),this._forEach(function(e){e.stop(t)})},t.FatOscillator.prototype.restart=function(t){t=this.toSeconds(t),this._forEach(function(e){e.restart(t)})},t.FatOscillator.prototype._forEach=function(t){for(var e=0;e<this._oscillators.length;e++)t.call(this,this._oscillators[e],e)},Object.defineProperty(t.FatOscillator.prototype,"type",{get:function(){return this._type},set:function(t){this._type=t,this._forEach(function(e){e.type=t})}}),Object.defineProperty(t.FatOscillator.prototype,"spread",{get:function(){return this._spread},set:function(t){if(this._spread=t,this._oscillators.length>1){var e=-t/2,i=t/(this._oscillators.length-1);this._forEach(function(t,r){t.detune.value=e+i*r})}}}),Object.defineProperty(t.FatOscillator.prototype,"count",{get:function(){return this._oscillators.length},set:function(e){if(e=Math.max(e,1),this._oscillators.length!==e){this._forEach(function(t){t.dispose()}),this._oscillators=[];for(var i=0;i<e;i++){var r=new t.Oscillator;this.type===t.Oscillator.Type.Custom?r.partials=this._partials:r.type=this._type,r.phase=this._phase,r.volume.value=-6-1.1*e,this.frequency.connect(r.frequency),this.detune.connect(r.detune),r.connect(this.output),this._oscillators[i]=r}this.spread=this._spread,this.state===t.State.Started&&this._forEach(function(t){t.start()})}}}),Object.defineProperty(t.FatOscillator.prototype,"phase",{get:function(){return this._phase},set:function(t){this._phase=t,this._forEach(function(e){e.phase=t})}}),Object.defineProperty(t.FatOscillator.prototype,"partials",{get:function(){return this._partials},set:function(e){this._partials=e,this._type=t.Oscillator.Type.Custom,this._forEach(function(t){t.partials=e})}}),t.FatOscillator.prototype.dispose=function(){return t.Source.prototype.dispose.call(this),this._writable(["frequency","detune"]),this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null,this._forEach(function(t){t.dispose()}),this._oscillators=null,this._partials=null,this},t.FatOscillator}),e(function(t){t.OmniOscillator=function(){var e=t.defaults(arguments,["frequency","type"],t.OmniOscillator);t.Source.call(this,e),this.frequency=new t.Signal(e.frequency,t.Type.Frequency),this.detune=new t.Signal(e.detune,t.Type.Cents),this._sourceType=void 0,this._oscillator=null,this.type=e.type,this._readOnly(["frequency","detune"]),this.set(e)},t.extend(t.OmniOscillator,t.Source),t.OmniOscillator.defaults={frequency:440,detune:0,type:"sine",phase:0};var e="PulseOscillator",i="PWMOscillator",r="Oscillator",n="FMOscillator",o="AMOscillator",s="FatOscillator";return t.OmniOscillator.prototype._start=function(t){this._oscillator.start(t)},t.OmniOscillator.prototype._stop=function(t){this._oscillator.stop(t)},t.OmniOscillator.prototype.restart=function(t){this._oscillator.restart(t)},Object.defineProperty(t.OmniOscillator.prototype,"type",{get:function(){var t="";return this._sourceType===n?t="fm":this._sourceType===o?t="am":this._sourceType===s&&(t="fat"),t+this._oscillator.type},set:function(t){"fm"===t.substr(0,2)?(this._createNewOscillator(n),this._oscillator.type=t.substr(2)):"am"===t.substr(0,2)?(this._createNewOscillator(o),this._oscillator.type=t.substr(2)):"fat"===t.substr(0,3)?(this._createNewOscillator(s),this._oscillator.type=t.substr(3)):"pwm"===t?this._createNewOscillator(i):"pulse"===t?this._createNewOscillator(e):(this._createNewOscillator(r),this._oscillator.type=t)}}),Object.defineProperty(t.OmniOscillator.prototype,"partials",{get:function(){return this._oscillator.partials},set:function(t){this._oscillator.partials=t}}),t.OmniOscillator.prototype.set=function(e,i){return"type"===e?this.type=i:t.isObject(e)&&e.hasOwnProperty("type")&&(this.type=e.type),t.prototype.set.apply(this,arguments),this},t.OmniOscillator.prototype._createNewOscillator=function(e){if(e!==this._sourceType){this._sourceType=e;var i=t[e],r=this.now();if(null!==this._oscillator){var n=this._oscillator;n.stop(r),this.context.setTimeout(function(){n.dispose(),n=null},this.blockTime)}this._oscillator=new i,this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.connect(this.output),this.state===t.State.Started&&this._oscillator.start(r)}},Object.defineProperty(t.OmniOscillator.prototype,"phase",{get:function(){return this._oscillator.phase},set:function(t){this._oscillator.phase=t}}),Object.defineProperty(t.OmniOscillator.prototype,"width",{get:function(){if(this._sourceType===e)return this._oscillator.width}}),Object.defineProperty(t.OmniOscillator.prototype,"count",{get:function(){if(this._sourceType===s)return this._oscillator.count},set:function(t){this._sourceType===s&&(this._oscillator.count=t)}}),Object.defineProperty(t.OmniOscillator.prototype,"spread",{get:function(){if(this._sourceType===s)return this._oscillator.spread},set:function(t){this._sourceType===s&&(this._oscillator.spread=t)}}),Object.defineProperty(t.OmniOscillator.prototype,"modulationType",{get:function(){if(this._sourceType===n||this._sourceType===o)return this._oscillator.modulationType},set:function(t){this._sourceType!==n&&this._sourceType!==o||(this._oscillator.modulationType=t)}}),Object.defineProperty(t.OmniOscillator.prototype,"modulationIndex",{get:function(){if(this._sourceType===n)return this._oscillator.modulationIndex}}),Object.defineProperty(t.OmniOscillator.prototype,"harmonicity",{get:function(){if(this._sourceType===n||this._sourceType===o)return this._oscillator.harmonicity}}),Object.defineProperty(t.OmniOscillator.prototype,"modulationFrequency",{get:function(){if(this._sourceType===i)return this._oscillator.modulationFrequency}}),t.OmniOscillator.prototype.dispose=function(){return t.Source.prototype.dispose.call(this),this._writable(["frequency","detune"]),this.detune.dispose(),this.detune=null,this.frequency.dispose(),this.frequency=null,this._oscillator.dispose(),this._oscillator=null,this._sourceType=null,this},t.OmniOscillator}),e(function(t){return t.Instrument=function(e){e=t.defaultArg(e,t.Instrument.defaults),t.AudioNode.call(this),this._volume=this.output=new t.Volume(e.volume),this.volume=this._volume.volume,this._readOnly("volume"),this._scheduledEvents=[]},t.extend(t.Instrument,t.AudioNode),t.Instrument.defaults={volume:0},t.Instrument.prototype.triggerAttack=t.noOp,t.Instrument.prototype.triggerRelease=t.noOp,t.Instrument.prototype.sync=function(){return this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",0),this},t.Instrument.prototype._syncMethod=function(e,i){var r=this["_original_"+e]=this[e];this[e]=function(){var e=Array.prototype.slice.call(arguments),n=e[i],o=t.Transport.schedule(function(t){e[i]=t,r.apply(this,e)}.bind(this),n);this._scheduledEvents.push(o)}.bind(this)},t.Instrument.prototype.unsync=function(){return this._scheduledEvents.forEach(function(e){t.Transport.clear(e)}),this._scheduledEvents=[],this._original_triggerAttack&&(this.triggerAttack=this._original_triggerAttack,this.triggerRelease=this._original_triggerRelease),this},t.Instrument.prototype.triggerAttackRelease=function(t,e,i,r){return i=this.toSeconds(i),e=this.toSeconds(e),this.triggerAttack(t,i,r),this.triggerRelease(i+e),this},t.Instrument.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._volume.dispose(),this._volume=null,this._writable(["volume"]),this.volume=null,this.unsync(),this._scheduledEvents=null,this},t.Instrument}),e(function(t){return t.Monophonic=function(e){e=t.defaultArg(e,t.Monophonic.defaults),t.Instrument.call(this,e),this.portamento=e.portamento},t.extend(t.Monophonic,t.Instrument),t.Monophonic.defaults={portamento:0},t.Monophonic.prototype.triggerAttack=function(t,e,i){return e=this.toSeconds(e),this._triggerEnvelopeAttack(e,i),this.setNote(t,e),this},t.Monophonic.prototype.triggerRelease=function(t){return t=this.toSeconds(t),this._triggerEnvelopeRelease(t),this},t.Monophonic.prototype._triggerEnvelopeAttack=function(){},t.Monophonic.prototype._triggerEnvelopeRelease=function(){},t.Monophonic.prototype.getLevelAtTime=function(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)},t.Monophonic.prototype.setNote=function(t,e){if(e=this.toSeconds(e),this.portamento>0&&this.getLevelAtTime(e)>.05){var i=this.toSeconds(this.portamento);this.frequency.exponentialRampTo(t,i,e)}else this.frequency.setValueAtTime(t,e);return this},t.Monophonic}),e(function(t){return t.Synth=function(e){e=t.defaultArg(e,t.Synth.defaults),t.Monophonic.call(this,e),this.oscillator=new t.OmniOscillator(e.oscillator),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.envelope=new t.AmplitudeEnvelope(e.envelope),this.oscillator.chain(this.envelope,this.output),this._readOnly(["oscillator","frequency","detune","envelope"])},t.extend(t.Synth,t.Monophonic),t.Synth.defaults={oscillator:{type:"triangle"},envelope:{attack:.005,decay:.1,sustain:.3,release:1}},t.Synth.prototype._triggerEnvelopeAttack=function(t,e){return this.envelope.triggerAttack(t,e),this.oscillator.start(t),0===this.envelope.sustain&&this.oscillator.stop(t+this.envelope.attack+this.envelope.decay),this},t.Synth.prototype._triggerEnvelopeRelease=function(t){return t=this.toSeconds(t),this.envelope.triggerRelease(t),this.oscillator.stop(t+this.envelope.release),this},t.Synth.prototype.dispose=function(){return t.Monophonic.prototype.dispose.call(this),this._writable(["oscillator","frequency","detune","envelope"]),this.oscillator.dispose(),this.oscillator=null,this.envelope.dispose(),this.envelope=null,this.frequency=null,this.detune=null,this},t.Synth}),e(function(t){return t.AMSynth=function(e){e=t.defaultArg(e,t.AMSynth.defaults),t.Monophonic.call(this,e),this._carrier=new t.Synth,this._carrier.volume.value=-10,this.oscillator=this._carrier.oscillator,this.envelope=this._carrier.envelope.set(e.envelope),this._modulator=new t.Synth,this._modulator.volume.value=-10,this.modulation=this._modulator.oscillator.set(e.modulation),this.modulationEnvelope=this._modulator.envelope.set(e.modulationEnvelope),this.frequency=new t.Signal(440,t.Type.Frequency),this.detune=new t.Signal(e.detune,t.Type.Cents),this.harmonicity=new t.Multiply(e.harmonicity),this.harmonicity.units=t.Type.Positive,this._modulationScale=new t.AudioToGain,this._modulationNode=new t.Gain,this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.detune.fan(this._carrier.detune,this._modulator.detune),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output),this._readOnly(["frequency","harmonicity","oscillator","envelope","modulation","modulationEnvelope","detune"])},t.extend(t.AMSynth,t.Monophonic),t.AMSynth.defaults={harmonicity:3,detune:0,oscillator:{type:"sine"},envelope:{attack:.01,decay:.01,sustain:1,release:.5},modulation:{type:"square"},modulationEnvelope:{attack:.5,decay:0,sustain:1,release:.5}},t.AMSynth.prototype._triggerEnvelopeAttack=function(t,e){return t=this.toSeconds(t),this._carrier._triggerEnvelopeAttack(t,e),this._modulator._triggerEnvelopeAttack(t),this},t.AMSynth.prototype._triggerEnvelopeRelease=function(t){return this._carrier._triggerEnvelopeRelease(t),this._modulator._triggerEnvelopeRelease(t),this},t.AMSynth.prototype.dispose=function(){return t.Monophonic.prototype.dispose.call(this),this._writable(["frequency","harmonicity","oscillator","envelope","modulation","modulationEnvelope","detune"]),this._carrier.dispose(),this._carrier=null,this._modulator.dispose(),this._modulator=null,this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null,this.harmonicity.dispose(),this.harmonicity=null,this._modulationScale.dispose(),this._modulationScale=null,this._modulationNode.dispose(),this._modulationNode=null,this.oscillator=null,this.envelope=null,this.modulationEnvelope=null,this.modulation=null,this},t.AMSynth}),e(function(t){return t.MonoSynth=function(e){e=t.defaultArg(e,t.MonoSynth.defaults),t.Monophonic.call(this,e),this.oscillator=new t.OmniOscillator(e.oscillator),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.filter=new t.Filter(e.filter),this.filterEnvelope=new t.FrequencyEnvelope(e.filterEnvelope),this.envelope=new t.AmplitudeEnvelope(e.envelope),this.oscillator.chain(this.filter,this.envelope,this.output),this.filterEnvelope.connect(this.filter.frequency),this._readOnly(["oscillator","frequency","detune","filter","filterEnvelope","envelope"])},t.extend(t.MonoSynth,t.Monophonic),t.MonoSynth.defaults={frequency:"C4",detune:0,oscillator:{type:"square"},filter:{Q:6,type:"lowpass",rolloff:-24},envelope:{attack:.005,decay:.1,sustain:.9,release:1},filterEnvelope:{attack:.06,decay:.2,sustain:.5,release:2,baseFrequency:200,octaves:7,exponent:2}},t.MonoSynth.prototype._triggerEnvelopeAttack=function(t,e){return t=this.toSeconds(t),this.envelope.triggerAttack(t,e),this.filterEnvelope.triggerAttack(t),this.oscillator.start(t),0===this.envelope.sustain&&this.oscillator.stop(t+this.envelope.attack+this.envelope.decay),this},t.MonoSynth.prototype._triggerEnvelopeRelease=function(t){return this.envelope.triggerRelease(t),this.filterEnvelope.triggerRelease(t),this.oscillator.stop(t+this.envelope.release),this},t.MonoSynth.prototype.dispose=function(){return t.Monophonic.prototype.dispose.call(this),this._writable(["oscillator","frequency","detune","filter","filterEnvelope","envelope"]),this.oscillator.dispose(),this.oscillator=null,this.envelope.dispose(),this.envelope=null,this.filterEnvelope.dispose(),this.filterEnvelope=null,this.filter.dispose(),this.filter=null,this.frequency=null,this.detune=null,this},t.MonoSynth}),e(function(t){return t.DuoSynth=function(e){e=t.defaultArg(e,t.DuoSynth.defaults),t.Monophonic.call(this,e),this.voice0=new t.MonoSynth(e.voice0),this.voice0.volume.value=-10,this.voice1=new t.MonoSynth(e.voice1),this.voice1.volume.value=-10,this._vibrato=new t.LFO(e.vibratoRate,-50,50),this._vibrato.start(),this.vibratoRate=this._vibrato.frequency,this._vibratoGain=new t.Gain(e.vibratoAmount,t.Type.Positive),this.vibratoAmount=this._vibratoGain.gain,this.frequency=new t.Signal(440,t.Type.Frequency),this.harmonicity=new t.Multiply(e.harmonicity),this.harmonicity.units=t.Type.Positive,this.frequency.connect(this.voice0.frequency),this.frequency.chain(this.harmonicity,this.voice1.frequency),this._vibrato.connect(this._vibratoGain),this._vibratoGain.fan(this.voice0.detune,this.voice1.detune),this.voice0.connect(this.output),this.voice1.connect(this.output),this._readOnly(["voice0","voice1","frequency","vibratoAmount","vibratoRate"])},t.extend(t.DuoSynth,t.Monophonic),t.DuoSynth.defaults={vibratoAmount:.5,vibratoRate:5,harmonicity:1.5,voice0:{volume:-10,portamento:0,oscillator:{type:"sine"},filterEnvelope:{attack:.01,decay:0,sustain:1,release:.5},envelope:{attack:.01,decay:0,sustain:1,release:.5}},voice1:{volume:-10,portamento:0,oscillator:{type:"sine"},filterEnvelope:{attack:.01,decay:0,sustain:1,release:.5},envelope:{attack:.01,decay:0,sustain:1,release:.5}}},t.DuoSynth.prototype._triggerEnvelopeAttack=function(t,e){return t=this.toSeconds(t),this.voice0._triggerEnvelopeAttack(t,e),this.voice1._triggerEnvelopeAttack(t,e),this},t.DuoSynth.prototype._triggerEnvelopeRelease=function(t){return this.voice0._triggerEnvelopeRelease(t),this.voice1._triggerEnvelopeRelease(t),this},t.DuoSynth.prototype.getLevelAtTime=function(t){return(this.voice0.getLevelAtTime(t)+this.voice1.getLevelAtTime(t))/2},t.DuoSynth.prototype.dispose=function(){return t.Monophonic.prototype.dispose.call(this),this._writable(["voice0","voice1","frequency","vibratoAmount","vibratoRate"]),this.voice0.dispose(),this.voice0=null,this.voice1.dispose(),this.voice1=null,this.frequency.dispose(),this.frequency=null,this._vibratoGain.dispose(),this._vibratoGain=null,this._vibrato=null,this.harmonicity.dispose(),this.harmonicity=null,this.vibratoAmount.dispose(),this.vibratoAmount=null,this.vibratoRate=null,this},t.DuoSynth}),e(function(t){return t.FMSynth=function(e){e=t.defaultArg(e,t.FMSynth.defaults),t.Monophonic.call(this,e),this._carrier=new t.Synth(e.carrier),this._carrier.volume.value=-10,this.oscillator=this._carrier.oscillator,this.envelope=this._carrier.envelope.set(e.envelope),this._modulator=new t.Synth(e.modulator),this._modulator.volume.value=-10,this.modulation=this._modulator.oscillator.set(e.modulation),this.modulationEnvelope=this._modulator.envelope.set(e.modulationEnvelope),this.frequency=new t.Signal(440,t.Type.Frequency),this.detune=new t.Signal(e.detune,t.Type.Cents),this.harmonicity=new t.Multiply(e.harmonicity),this.harmonicity.units=t.Type.Positive,this.modulationIndex=new t.Multiply(e.modulationIndex),this.modulationIndex.units=t.Type.Positive,this._modulationNode=new t.Gain(0),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this.detune.fan(this._carrier.detune,this._modulator.detune),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output),this._readOnly(["frequency","harmonicity","modulationIndex","oscillator","envelope","modulation","modulationEnvelope","detune"])},t.extend(t.FMSynth,t.Monophonic),t.FMSynth.defaults={harmonicity:3,modulationIndex:10,detune:0,oscillator:{type:"sine"},envelope:{attack:.01,decay:.01,sustain:1,release:.5},modulation:{type:"square"},modulationEnvelope:{attack:.5,decay:0,sustain:1,release:.5}},t.FMSynth.prototype._triggerEnvelopeAttack=function(t,e){return t=this.toSeconds(t),this._carrier._triggerEnvelopeAttack(t,e),this._modulator._triggerEnvelopeAttack(t),this},t.FMSynth.prototype._triggerEnvelopeRelease=function(t){return t=this.toSeconds(t),this._carrier._triggerEnvelopeRelease(t),this._modulator._triggerEnvelopeRelease(t),this},t.FMSynth.prototype.dispose=function(){return t.Monophonic.prototype.dispose.call(this),this._writable(["frequency","harmonicity","modulationIndex","oscillator","envelope","modulation","modulationEnvelope","detune"]),this._carrier.dispose(),this._carrier=null,this._modulator.dispose(),this._modulator=null,this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null,this.modulationIndex.dispose(),this.modulationIndex=null,this.harmonicity.dispose(),this.harmonicity=null,this._modulationNode.dispose(),this._modulationNode=null,this.oscillator=null,this.envelope=null,this.modulationEnvelope=null,this.modulation=null,this},t.FMSynth}),e(function(t){return t.MembraneSynth=function(e){e=t.defaultArg(e,t.MembraneSynth.defaults),t.Instrument.call(this,e),this.oscillator=new t.OmniOscillator(e.oscillator),this.envelope=new t.AmplitudeEnvelope(e.envelope),this.octaves=e.octaves,this.pitchDecay=e.pitchDecay,this.oscillator.chain(this.envelope,this.output),this._readOnly(["oscillator","envelope"])},t.extend(t.MembraneSynth,t.Instrument),t.MembraneSynth.defaults={pitchDecay:.05,octaves:10,oscillator:{type:"sine"},envelope:{attack:.001,decay:.4,sustain:.01,release:1.4,attackCurve:"exponential"}},t.MembraneSynth.prototype.triggerAttack=function(t,e,i){e=this.toSeconds(e);var r=(t=this.toFrequency(t))*this.octaves;return this.oscillator.frequency.setValueAtTime(r,e),this.oscillator.frequency.exponentialRampToValueAtTime(t,e+this.toSeconds(this.pitchDecay)),this.envelope.triggerAttack(e,i),this.oscillator.start(e),this},t.MembraneSynth.prototype.triggerRelease=function(t){return t=this.toSeconds(t),this.envelope.triggerRelease(t),this.oscillator.stop(t+this.envelope.release),this},t.MembraneSynth.prototype.dispose=function(){return t.Instrument.prototype.dispose.call(this),this._writable(["oscillator","envelope"]),this.oscillator.dispose(),this.oscillator=null,this.envelope.dispose(),this.envelope=null,this},t.MembraneSynth}),e(function(t){var e=[1,1.483,1.932,2.546,2.63,3.897];return t.MetalSynth=function(i){i=t.defaultArg(i,t.MetalSynth.defaults),t.Instrument.call(this,i),this.frequency=new t.Signal(i.frequency,t.Type.Frequency),this._oscillators=[],this._freqMultipliers=[],this._amplitue=new t.Gain(0).connect(this.output),this._highpass=new t.Filter({type:"highpass",Q:-3.0102999566398125}).connect(this._amplitue),this._octaves=i.octaves,this._filterFreqScaler=new t.Scale(i.resonance,7e3),this.envelope=new t.Envelope({attack:i.envelope.attack,attackCurve:"linear",decay:i.envelope.decay,sustain:0,release:i.envelope.release}).chain(this._filterFreqScaler,this._highpass.frequency),this.envelope.connect(this._amplitue.gain);for(var r=0;r<e.length;r++){var n=new t.FMOscillator({type:"square",modulationType:"square",harmonicity:i.harmonicity,modulationIndex:i.modulationIndex});n.connect(this._highpass),this._oscillators[r]=n;var o=new t.Multiply(e[r]);this._freqMultipliers[r]=o,this.frequency.chain(o,n.frequency)}this.octaves=i.octaves},t.extend(t.MetalSynth,t.Instrument),t.MetalSynth.defaults={frequency:200,envelope:{attack:.001,decay:1.4,release:.2},harmonicity:5.1,modulationIndex:32,resonance:4e3,octaves:1.5},t.MetalSynth.prototype.triggerAttack=function(e,i){return e=this.toSeconds(e),i=t.defaultArg(i,1),this.envelope.triggerAttack(e,i),this._oscillators.forEach(function(t){t.start(e)}),0===this.envelope.sustain&&this._oscillators.forEach(function(t){t.stop(e+this.envelope.attack+this.envelope.decay)}.bind(this)),this},t.MetalSynth.prototype.triggerRelease=function(t){return t=this.toSeconds(t),this.envelope.triggerRelease(t),this._oscillators.forEach(function(e){e.stop(t+this.envelope.release)}.bind(this)),this},t.MetalSynth.prototype.sync=function(){return this._syncMethod("triggerAttack",0),this._syncMethod("triggerRelease",0),this},t.MetalSynth.prototype.triggerAttackRelease=function(t,e,i){return e=this.toSeconds(e),t=this.toSeconds(t),this.triggerAttack(e,i),this.triggerRelease(e+t),this},Object.defineProperty(t.MetalSynth.prototype,"modulationIndex",{get:function(){return this._oscillators[0].modulationIndex.value},set:function(t){for(var e=0;e<this._oscillators.length;e++)this._oscillators[e].modulationIndex.value=t}}),Object.defineProperty(t.MetalSynth.prototype,"harmonicity",{get:function(){return this._oscillators[0].harmonicity.value},set:function(t){for(var e=0;e<this._oscillators.length;e++)this._oscillators[e].harmonicity.value=t}}),Object.defineProperty(t.MetalSynth.prototype,"resonance",{get:function(){return this._filterFreqScaler.min},set:function(t){this._filterFreqScaler.min=t,this.octaves=this._octaves}}),Object.defineProperty(t.MetalSynth.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._filterFreqScaler.max=this._filterFreqScaler.min*Math.pow(2,t)}}),t.MetalSynth.prototype.dispose=function(){t.Instrument.prototype.dispose.call(this);for(var e=0;e<this._oscillators.length;e++)this._oscillators[e].dispose(),this._freqMultipliers[e].dispose();this._oscillators=null,this._freqMultipliers=null,this.frequency.dispose(),this.frequency=null,this._filterFreqScaler.dispose(),this._filterFreqScaler=null,this._amplitue.dispose(),this._amplitue=null,this.envelope.dispose(),this.envelope=null,this._highpass.dispose(),this._highpass=null},t.MetalSynth}),e(function(t){return t.NoiseSynth=function(e){e=t.defaultArg(e,t.NoiseSynth.defaults),t.Instrument.call(this,e),this.noise=new t.Noise,this.envelope=new t.AmplitudeEnvelope(e.envelope),this.noise.chain(this.envelope,this.output),this._readOnly(["noise","envelope"])},t.extend(t.NoiseSynth,t.Instrument),t.NoiseSynth.defaults={noise:{type:"white"},envelope:{attack:.005,decay:.1,sustain:0}},t.NoiseSynth.prototype.triggerAttack=function(t,e){return this.envelope.triggerAttack(t,e),this.noise.start(t),0===this.envelope.sustain&&this.noise.stop(t=this.envelope.attack+this.envelope.decay),this},t.NoiseSynth.prototype.triggerRelease=function(t){return this.envelope.triggerRelease(t),this.noise.stop(t+this.envelope.release),this},t.NoiseSynth.prototype.sync=function(){return this._syncMethod("triggerAttack",0),this._syncMethod("triggerRelease",0),this},t.NoiseSynth.prototype.triggerAttackRelease=function(t,e,i){return e=this.toSeconds(e),t=this.toSeconds(t),this.triggerAttack(e,i),this.triggerRelease(e+t),this},t.NoiseSynth.prototype.dispose=function(){return t.Instrument.prototype.dispose.call(this),this._writable(["noise","envelope"]),this.noise.dispose(),this.noise=null,this.envelope.dispose(),this.envelope=null,this},t.NoiseSynth}),e(function(t){return t.PluckSynth=function(e){e=t.defaultArg(e,t.PluckSynth.defaults),t.Instrument.call(this,e),this._noise=new t.Noise("pink"),this.attackNoise=e.attackNoise,this._lfcf=new t.LowpassCombFilter({resonance:e.resonance,dampening:e.dampening}),this.resonance=this._lfcf.resonance,this.dampening=this._lfcf.dampening,this._noise.connect(this._lfcf),this._lfcf.connect(this.output),this._readOnly(["resonance","dampening"])},t.extend(t.PluckSynth,t.Instrument),t.PluckSynth.defaults={attackNoise:1,dampening:4e3,resonance:.7},t.PluckSynth.prototype.triggerAttack=function(t,e){t=this.toFrequency(t),e=this.toSeconds(e);var i=1/t;return this._lfcf.delayTime.setValueAtTime(i,e),this._noise.start(e),this._noise.stop(e+i*this.attackNoise),this},t.PluckSynth.prototype.dispose=function(){return t.Instrument.prototype.dispose.call(this),this._noise.dispose(),this._lfcf.dispose(),this._noise=null,this._lfcf=null,this._writable(["resonance","dampening"]),this.dampening=null,this.resonance=null,this},t.PluckSynth}),e(function(t){return t.PolySynth=function(){var e=t.defaults(arguments,["polyphony","voice"],t.PolySynth);t.Instrument.call(this,e),(e=t.defaultArg(e,t.Instrument.defaults)).polyphony=Math.min(t.PolySynth.MAX_POLYPHONY,e.polyphony),this.voices=new Array(e.polyphony),this._triggers=new Array(e.polyphony),this.detune=new t.Signal(e.detune,t.Type.Cents),this._readOnly("detune");for(var i=0;i<e.polyphony;i++){var r=new e.voice(arguments[2],arguments[3]);if(!(r instanceof t.Monophonic))throw new Error("Synth constructor must be instance of Tone.Monophonic");this.voices[i]=r,r.connect(this.output),r.hasOwnProperty("detune")&&this.detune.connect(r.detune),this._triggers[i]={release:-1,note:null,voice:r}}},t.extend(t.PolySynth,t.Instrument),t.PolySynth.defaults={polyphony:4,volume:0,detune:0,voice:t.Synth},t.PolySynth.prototype.triggerAttack=function(t,e,i){Array.isArray(t)||(t=[t]),e=this.toSeconds(e);for(var r=0;r<t.length;r++){for(var n=t[r],o=this._triggers[0],s=1;s<this._triggers.length;s++)this._triggers[s].release<o.release&&(o=this._triggers[s]);o.release=1/0,o.note=JSON.stringify(n),o.voice.triggerAttack(n,e,i)}return this},t.PolySynth.prototype.triggerAttackRelease=function(e,i,r,n){if(r=this.toSeconds(r),this.triggerAttack(e,r,n),t.isArray(i)&&t.isArray(e))for(var o=0;o<e.length;o++){var s=i[Math.min(o,i.length-1)];this.triggerRelease(e[o],r+this.toSeconds(s))}else this.triggerRelease(e,r+this.toSeconds(i));return this},t.PolySynth.prototype.triggerRelease=function(t,e){Array.isArray(t)||(t=[t]),e=this.toSeconds(e);for(var i=0;i<t.length;i++)for(var r=JSON.stringify(t[i]),n=0;n<this._triggers.length;n++){var o=this._triggers[n];o.note===r&&o.release>e&&(o.voice.triggerRelease(e),o.release=e)}return this},t.PolySynth.prototype.sync=function(){return this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1),this},t.PolySynth.prototype.set=function(t,e,i){for(var r=0;r<this.voices.length;r++)this.voices[r].set(t,e,i);return this},t.PolySynth.prototype.get=function(t){return this.voices[0].get(t)},t.PolySynth.prototype.releaseAll=function(t){t=this.toSeconds(t);for(var e=0;e<this._triggers.length;e++){var i=this._triggers[e];i.release>t&&(i.release=t,i.voice.triggerRelease(t))}return this},t.PolySynth.prototype.dispose=function(){t.Instrument.prototype.dispose.call(this);for(var e=0;e<this.voices.length;e++)this.voices[e].dispose(),this.voices[e]=null;return this._writable("detune"),this.detune.dispose(),this.detune=null,this.voices=null,this._triggers=null,this},t.PolySynth.MAX_POLYPHONY=20,t.PolySynth}),e(function(t){return t.Sampler=function(e){var i=Array.prototype.slice.call(arguments);i.shift();var r=t.defaults(i,["onload","baseUrl"],t.Sampler);t.Instrument.call(this,r);var n={};for(var o in e)if(t.isNote(o))n[t.Frequency(o).toMidi()]=e[o];else{if(isNaN(parseFloat(o)))throw new Error("Tone.Sampler: url keys must be the note's pitch");n[o]=e[o]}this._buffers=new t.Buffers(n,r.onload,r.baseUrl),this._activeSources={},this.attack=r.attack,this.release=r.release},t.extend(t.Sampler,t.Instrument),t.Sampler.defaults={attack:0,release:.1,onload:t.noOp,baseUrl:""},t.Sampler.prototype._findClosest=function(t){for(var e=0;e<96;){if(this._buffers.has(t+e))return-e;if(this._buffers.has(t-e))return e;e++}return null},t.Sampler.prototype.triggerAttack=function(e,i,r){var n=t.Frequency(e).toMidi(),o=this._findClosest(n);if(null!==o){var s=n-o,a=this._buffers.get(s),h=new t.BufferSource({buffer:a,playbackRate:t.intervalToFrequencyRatio(o),fadeIn:this.attack,fadeOut:this.release,curve:"exponential"}).connect(this.output);h.start(i,0,a.duration,r),t.isArray(this._activeSources[n])||(this._activeSources[n]=[]),this._activeSources[n].push({note:n,source:h})}return this},t.Sampler.prototype.triggerRelease=function(e,i){var r=t.Frequency(e).toMidi();if(this._activeSources[r]&&this._activeSources[r].length){var n=this._activeSources[r].shift().source;i=this.toSeconds(i),n.stop(i+this.release,this.release)}return this},t.Sampler.prototype.releaseAll=function(t){for(var e in t=this.toSeconds(t),this._activeSources)for(var i=this._activeSources[e];i.length;)i.shift().source.stop(t+this.release,this.release);return this},t.Sampler.prototype.sync=function(){return this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1),this},t.Sampler.prototype.triggerAttackRelease=function(t,e,i,r){return i=this.toSeconds(i),e=this.toSeconds(e),this.triggerAttack(t,i,r),this.triggerRelease(t,i+e),this},t.Sampler.prototype.add=function(e,i,r){if(t.isNote(e)){var n=t.Frequency(e).toMidi();this._buffers.add(n,i,r)}else{if(isNaN(parseFloat(e)))throw new Error("Tone.Sampler: note must be the note's pitch. Instead got "+e);this._buffers.add(e,i,r)}},Object.defineProperty(t.Sampler.prototype,"loaded",{get:function(){return this._buffers.loaded}}),t.Sampler.prototype.dispose=function(){for(var e in t.Instrument.prototype.dispose.call(this),this._buffers.dispose(),this._buffers=null,this._activeSources)this._activeSources[e].forEach(function(t){t.source.dispose()});return this._activeSources=null,this},t.Sampler}),e(function(t){t.supported&&(OscillatorNode.prototype.setPeriodicWave||(OscillatorNode.prototype.setPeriodicWave=OscillatorNode.prototype.setWaveTable),AudioContext.prototype.createPeriodicWave||(AudioContext.prototype.createPeriodicWave=AudioContext.prototype.createWaveTable))}),e(function(t){return t.GainToAudio=function(){t.SignalBase.call(this),this._norm=this.input=this.output=new t.WaveShaper(function(t){return 2*Math.abs(t)-1})},t.extend(t.GainToAudio,t.SignalBase),t.GainToAudio.prototype.dispose=function(){return t.SignalBase.prototype.dispose.call(this),this._norm.dispose(),this._norm=null,this},t.GainToAudio}),e(function(t){return t.Normalize=function(e,i){t.SignalBase.call(this),this._inputMin=t.defaultArg(e,0),this._inputMax=t.defaultArg(i,1),this._sub=this.input=new t.Add(0),this._div=this.output=new t.Multiply(1),this._sub.connect(this._div),this._setRange()},t.extend(t.Normalize,t.SignalBase),Object.defineProperty(t.Normalize.prototype,"min",{get:function(){return this._inputMin},set:function(t){this._inputMin=t,this._setRange()}}),Object.defineProperty(t.Normalize.prototype,"max",{get:function(){return this._inputMax},set:function(t){this._inputMax=t,this._setRange()}}),t.Normalize.prototype._setRange=function(){this._sub.value=-this._inputMin,this._div.value=1/(this._inputMax-this._inputMin)},t.Normalize.prototype.dispose=function(){return t.SignalBase.prototype.dispose.call(this),this._sub.dispose(),this._sub=null,this._div.dispose(),this._div=null,this},t.Normalize}),e(function(t){return t.TransportTimelineSignal=function(){t.Signal.apply(this,arguments),this.output=this._outputSig=new t.Signal(this._initialValue),this._lastVal=this.value,this._synced=t.Transport.scheduleRepeat(this._onTick.bind(this),"1i"),this._bindAnchorValue=this._anchorValue.bind(this),t.Transport.on("start stop pause",this._bindAnchorValue),this._events.memory=1/0},t.extend(t.TransportTimelineSignal,t.Signal),t.TransportTimelineSignal.prototype._onTick=function(e){var i=this.getValueAtTime(t.Transport.seconds);this._lastVal!==i&&(this._lastVal=i,this._outputSig.linearRampToValueAtTime(i,e))},t.TransportTimelineSignal.prototype._anchorValue=function(e){var i=this.getValueAtTime(t.Transport.seconds);return this._lastVal=i,this._outputSig.cancelScheduledValues(e),this._outputSig.setValueAtTime(i,e),this},t.TransportTimelineSignal.prototype.getValueAtTime=function(e){return e=t.TransportTime(e),t.Signal.prototype.getValueAtTime.call(this,e)},t.TransportTimelineSignal.prototype.setValueAtTime=function(e,i){return i=t.TransportTime(i),t.Signal.prototype.setValueAtTime.call(this,e,i),this},t.TransportTimelineSignal.prototype.linearRampToValueAtTime=function(e,i){return i=t.TransportTime(i),t.Signal.prototype.linearRampToValueAtTime.call(this,e,i),this},t.TransportTimelineSignal.prototype.exponentialRampToValueAtTime=function(e,i){return i=t.TransportTime(i),t.Signal.prototype.exponentialRampToValueAtTime.call(this,e,i),this},t.TransportTimelineSignal.prototype.setTargetAtTime=function(e,i,r){return i=t.TransportTime(i),t.Signal.prototype.setTargetAtTime.call(this,e,i,r),this},t.TransportTimelineSignal.prototype.cancelScheduledValues=function(e){return e=t.TransportTime(e),t.Signal.prototype.cancelScheduledValues.call(this,e),this},t.TransportTimelineSignal.prototype.setValueCurveAtTime=function(e,i,r,n){return i=t.TransportTime(i),r=t.TransportTime(r),t.Signal.prototype.setValueCurveAtTime.call(this,e,i,r,n),this},t.TransportTimelineSignal.prototype.cancelAndHoldAtTime=function(e){return t.Signal.prototype.cancelAndHoldAtTime.call(this,t.TransportTime(e))},t.TransportTimelineSignal.prototype.dispose=function(){t.Transport.clear(this._synced),t.Transport.off("start stop pause",this._syncedCallback),this._events.cancel(0),t.Signal.prototype.dispose.call(this),this._outputSig.dispose(),this._outputSig=null},t.TransportTimelineSignal}),e(function(t){return t.GrainPlayer=function(){var e=t.defaults(arguments,["url","onload"],t.GrainPlayer);t.Source.call(this,e),this.buffer=new t.Buffer(e.url,e.onload),this._clock=new t.Clock(this._tick.bind(this),e.grainSize),this._loopStart=0,this._loopEnd=0,this._activeSources=[],this._playbackRate=e.playbackRate,this._grainSize=e.grainSize,this._overlap=e.overlap,this.detune=e.detune,this.overlap=e.overlap,this.loop=e.loop,this.playbackRate=e.playbackRate,this.grainSize=e.grainSize,this.loopStart=e.loopStart,this.loopEnd=e.loopEnd,this.reverse=e.reverse,this._clock.on("stop",this._onstop.bind(this))},t.extend(t.GrainPlayer,t.Source),t.GrainPlayer.defaults={onload:t.noOp,overlap:.1,grainSize:.2,playbackRate:1,detune:0,loop:!1,loopStart:0,loopEnd:0,reverse:!1},t.GrainPlayer.prototype._start=function(e,i,r){i=t.defaultArg(i,0),i=this.toSeconds(i),e=this.toSeconds(e),this._offset=i,this._clock.start(e),r&&this.stop(e+this.toSeconds(r))},t.GrainPlayer.prototype._stop=function(t){this._clock.stop(t)},t.GrainPlayer.prototype._onstop=function(t){this._activeSources.forEach(function(e){e.stop(t,0)})},t.GrainPlayer.prototype._tick=function(e){var i=this._offset<this._overlap?0:this._overlap,r=new t.BufferSource({buffer:this.buffer,fadeIn:i,fadeOut:this._overlap,loop:this.loop,loopStart:this._loopStart,loopEnd:this._loopEnd,playbackRate:t.intervalToFrequencyRatio(this.detune/100)}).connect(this.output);r.start(e,this._offset),this._offset+=this.grainSize,r.stop(e+this.grainSize),this._activeSources.push(r),r.onended=function(){var t=this._activeSources.indexOf(r);-1!==t&&this._activeSources.splice(t,1)}.bind(this)},t.GrainPlayer.prototype.seek=function(t,e){return this._offset=this.toSeconds(t),this._tick(this.toSeconds(e)),this},Object.defineProperty(t.GrainPlayer.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this.grainSize=this._grainSize}}),Object.defineProperty(t.GrainPlayer.prototype,"loopStart",{get:function(){return this._loopStart},set:function(t){this._loopStart=this.toSeconds(t)}}),Object.defineProperty(t.GrainPlayer.prototype,"loopEnd",{get:function(){return this._loopEnd},set:function(t){this._loopEnd=this.toSeconds(t)}}),Object.defineProperty(t.GrainPlayer.prototype,"reverse",{get:function(){return this.buffer.reverse},set:function(t){this.buffer.reverse=t}}),Object.defineProperty(t.GrainPlayer.prototype,"grainSize",{get:function(){return this._grainSize},set:function(t){this._grainSize=this.toSeconds(t),this._clock.frequency.value=this._playbackRate/this._grainSize}}),Object.defineProperty(t.GrainPlayer.prototype,"overlap",{get:function(){return this._overlap},set:function(t){this._overlap=this.toSeconds(t)}}),t.GrainPlayer.prototype.dispose=function(){return t.Source.prototype.dispose.call(this),this.buffer.dispose(),this.buffer=null,this._clock.dispose(),this._clock=null,this._activeSources.forEach(function(t){t.dispose()}),this._activeSources=null,this},t.GrainPlayer}),e(function(t){return t.Player=function(e){var i;e instanceof t.Buffer&&e.loaded?(e=e.get(),i=t.Player.defaults):i=t.defaults(arguments,["url","onload"],t.Player),t.Source.call(this,i),this.autostart=i.autostart,this._buffer=new t.Buffer({url:i.url,onload:this._onload.bind(this,i.onload),reverse:i.reverse}),e instanceof AudioBuffer&&this._buffer.set(e),this._loop=i.loop,this._loopStart=i.loopStart,this._loopEnd=i.loopEnd,this._playbackRate=i.playbackRate,this._activeSources=[],this._elapsedTime=new t.TickSource(i.playbackRate),this.fadeIn=i.fadeIn,this.fadeOut=i.fadeOut},t.extend(t.Player,t.Source),t.Player.defaults={onload:t.noOp,playbackRate:1,loop:!1,autostart:!1,loopStart:0,loopEnd:0,retrigger:!1,reverse:!1,fadeIn:0,fadeOut:0},t.Player.prototype.load=function(t,e){return this._buffer.load(t,this._onload.bind(this,e))},t.Player.prototype._onload=function(e){(e=t.defaultArg(e,t.noOp))(this),this.autostart&&this.start()},t.Player.prototype._onSourceEnd=function(t){var e=this._activeSources.indexOf(t);this._activeSources.splice(e,1)},t.Player.prototype._start=function(e,i,r){i=this._loop?t.defaultArg(i,this._loopStart):t.defaultArg(i,0),i=this.toSeconds(i);var n=t.defaultArg(r,Math.max(this._buffer.duration-i,0));n=this.toSeconds(n),e=this.toSeconds(e),this._elapsedTime.start(e,i);var o=new t.BufferSource({buffer:this._buffer,loop:this._loop,loopStart:this._loopStart,loopEnd:this._loopEnd,onended:this._onSourceEnd.bind(this),playbackRate:this._playbackRate,fadeIn:this.fadeIn,fadeOut:this.fadeOut}).connect(this.output);return this._loop||this._synced||this._state.setStateAtTime(t.State.Stopped,e+n/this._playbackRate),this._activeSources.push(o),this._loop&&t.isUndef(r)?o.start(e,i):o.start(e,i,n),this},t.Player.prototype._stop=function(t){return t=this.toSeconds(t),this._elapsedTime.stop(t),this._activeSources.forEach(function(e){e.stop(t)}),this},t.Player.prototype.restart=function(t,e,i){return this._stop(t),this._start(t,e,i),this},t.Player.prototype.seek=function(e,i){return i=this.toSeconds(i),this._state.getValueAtTime(i)===t.State.Started&&(e=this.toSeconds(e),this._stop(i),this._start(i,e)),this},t.Player.prototype.setLoopPoints=function(t,e){return this.loopStart=t,this.loopEnd=e,this},Object.defineProperty(t.Player.prototype,"loopStart",{get:function(){return this._loopStart},set:function(t){this._loopStart=t,this._activeSources.forEach(function(e){e.loopStart=t})}}),Object.defineProperty(t.Player.prototype,"loopEnd",{get:function(){return this._loopEnd},set:function(t){this._loopEnd=t,this._activeSources.forEach(function(e){e.loopEnd=t})}}),Object.defineProperty(t.Player.prototype,"buffer",{get:function(){return this._buffer},set:function(t){this._buffer.set(t)}}),Object.defineProperty(t.Player.prototype,"loop",{get:function(){return this._loop},set:function(e){if(this._loop!==e){this._loop=e;var i=this.now();if(e){var r=this._state.getNextState(t.State.Stopped,i);r&&(this._activeSources.forEach(function(t){t.loop=e}),this._state.cancel(r.time),this._elapsedTime.cancel(r.time))}else this._stopAtNextIteration(i)}}}),t.Player.prototype._stopAtNextIteration=function(e){if(this._state.getValueAtTime(e)===t.State.Started){var i=this._state.getNextState(t.State.Stopped,e),r=this._elapsedTime.getTicksAtTime(e),n=Math.max(Math.ceil(r/this.buffer.duration),1),o=this._elapsedTime.getTimeOfTick(n*this.buffer.duration,i?i.time-this.sampleTime:1/0);this.stop(o)}},Object.defineProperty(t.Player.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t;var e=this.now();this._elapsedTime.frequency.setValueAtTime(t,e),this._loop||this._stopAtNextIteration(e),this._activeSources.forEach(function(i){i.playbackRate.setValueAtTime(t,e)})}}),Object.defineProperty(t.Player.prototype,"position",{get:function(){var e=this.now();if(this._state.getValueAtTime(e)===t.State.Started&&this.loaded){var i=this.buffer.duration;return this._elapsedTime.getTicksAtTime(e)%i}return 0}}),Object.defineProperty(t.Player.prototype,"reverse",{get:function(){return this._buffer.reverse},set:function(t){this._buffer.reverse=t}}),Object.defineProperty(t.Player.prototype,"loaded",{get:function(){return this._buffer.loaded}}),t.Player.prototype.dispose=function(){return this._activeSources.forEach(function(t){t.dispose()}),this._activeSources=null,t.Source.prototype.dispose.call(this),this._buffer.dispose(),this._buffer=null,this._elapsedTime.dispose(),this._elapsedTime=null,this},t.Player}),e(function(t){return t.Players=function(e){var i=Array.prototype.slice.call(arguments);i.shift();var r=t.defaults(i,["onload"],t.Players);for(var n in t.call(this),this._volume=this.output=new t.Volume(r.volume),this.volume=this._volume.volume,this._readOnly("volume"),this._volume.output.output.channelCount=2,this._volume.output.output.channelCountMode="explicit",this.mute=r.mute,this._players={},this._loadingCount=0,this._fadeIn=r.fadeIn,this._fadeOut=r.fadeOut,e)this._loadingCount++,this.add(n,e[n],this._bufferLoaded.bind(this,r.onload))},t.extend(t.Players,t.AudioNode),t.Players.defaults={volume:0,mute:!1,onload:t.noOp,fadeIn:0,fadeOut:0},t.Players.prototype._bufferLoaded=function(t){this._loadingCount--,0===this._loadingCount&&t&&t(this)},Object.defineProperty(t.Players.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t}}),Object.defineProperty(t.Players.prototype,"fadeIn",{get:function(){return this._fadeIn},set:function(t){this._fadeIn=t,this._forEach(function(e){e.fadeIn=t})}}),Object.defineProperty(t.Players.prototype,"fadeOut",{get:function(){return this._fadeOut},set:function(t){this._fadeOut=t,this._forEach(function(e){e.fadeOut=t})}}),Object.defineProperty(t.Players.prototype,"state",{get:function(){var e=!1;return this._forEach(function(i){e=e||i.state===t.State.Started}),e?t.State.Started:t.State.Stopped}}),t.Players.prototype.has=function(t){return this._players.hasOwnProperty(t)},t.Players.prototype.get=function(t){if(this.has(t))return this._players[t];throw new Error("Tone.Players: no player named "+t)},t.Players.prototype._forEach=function(t){for(var e in this._players)t(this._players[e],e);return this},Object.defineProperty(t.Players.prototype,"loaded",{get:function(){var t=!0;return this._forEach(function(e){t=t&&e.loaded}),t}}),t.Players.prototype.add=function(e,i,r){return this._players[e]=new t.Player(i,r).connect(this.output),this._players[e].fadeIn=this._fadeIn,this._players[e].fadeOut=this._fadeOut,this},t.Players.prototype.stopAll=function(t){this._forEach(function(e){e.stop(t)})},t.Players.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this._volume.dispose(),this._volume=null,this._writable("volume"),this.volume=null,this.output=null,this._forEach(function(t){t.dispose()}),this._players=null,this},t.Players}),e(function(t){return t.UserMedia=function(){var e=t.defaults(arguments,["volume"],t.UserMedia);t.AudioNode.call(this),this._mediaStream=null,this._stream=null,this._device=null,this._volume=this.output=new t.Volume(e.volume),this.volume=this._volume.volume,this._readOnly("volume"),this.mute=e.mute},t.extend(t.UserMedia,t.AudioNode),t.UserMedia.defaults={volume:0,mute:!1},t.UserMedia.prototype.open=function(e){return t.UserMedia.enumerateDevices().then(function(i){var r;if(t.isNumber(e))r=i[e];else if(!(r=i.find(function(t){return t.label===e||t.deviceId===e}))&&i.length>0)r=i[0];else if(!r&&t.isDefined(e))throw new Error("Tone.UserMedia: no matching device: "+e);this._device=r;var n={audio:{echoCancellation:!1,sampleRate:this.context.sampleRate}};return r&&(n.audio.deviceId=r.deviceId),navigator.mediaDevices.getUserMedia(n).then(function(t){return this._stream||(this._stream=t,this._mediaStream=this.context.createMediaStreamSource(t),this._mediaStream.connect(this.output)),this}.bind(this))}.bind(this))},t.UserMedia.prototype.close=function(){return this._stream&&(this._stream.getAudioTracks().forEach(function(t){t.stop()}),this._stream=null,this._mediaStream.disconnect(),this._mediaStream=null),this._device=null,this},t.UserMedia.enumerateDevices=function(){return navigator.mediaDevices.enumerateDevices().then(function(t){return t.filter(function(t){return"audioinput"===t.kind})})},Object.defineProperty(t.UserMedia.prototype,"state",{get:function(){return this._stream&&this._stream.active?t.State.Started:t.State.Stopped}}),Object.defineProperty(t.UserMedia.prototype,"deviceId",{get:function(){if(this._device)return this._device.deviceId}}),Object.defineProperty(t.UserMedia.prototype,"groupId",{get:function(){if(this._device)return this._device.groupId}}),Object.defineProperty(t.UserMedia.prototype,"label",{get:function(){if(this._device)return this._device.label}}),Object.defineProperty(t.UserMedia.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t}}),t.UserMedia.prototype.dispose=function(){return t.AudioNode.prototype.dispose.call(this),this.close(),this._writable("volume"),this._volume.dispose(),this._volume=null,this.volume=null,this},Object.defineProperty(t.UserMedia,"supported",{get:function(){return t.isDefined(navigator.mediaDevices)&&t.isFunction(navigator.mediaDevices.getUserMedia)}}),t.UserMedia}),e(function(t){return t.Midi=function(e,i){if(!(this instanceof t.Midi))return new t.Midi(e,i);t.Frequency.call(this,e,i)},t.extend(t.Midi,t.Frequency),t.Midi.prototype._defaultUnits="midi",t.Midi.prototype._frequencyToUnits=function(e){return t.Frequency.ftom(t.Frequency.prototype._frequencyToUnits.call(this,e))},t.Midi.prototype._ticksToUnits=function(e){return t.Frequency.ftom(t.Frequency.prototype._ticksToUnits.call(this,e))},t.Midi.prototype._beatsToUnits=function(e){return t.Frequency.ftom(t.Frequency.prototype._beatsToUnits.call(this,e))},t.Midi.prototype._secondsToUnits=function(e){return t.Frequency.ftom(t.Frequency.prototype._secondsToUnits.call(this,e))},t.Midi.prototype.toMidi=function(){return this.valueOf()},t.Midi.prototype.toFrequency=function(){return t.Frequency.mtof(this.toMidi())},t.Midi.prototype.transpose=function(t){return new this.constructor(this.toMidi()+t)},t.Midi}),t}()}.call(e,i,e,t))||(t.exports=r)},function(t,e,i){(function(e){var i;t.exports=function t(e,r,n){function o(a,h){if(!r[a]){if(!e[a]){var l="function"==typeof i&&i;if(!h&&l)return i(a,!0);if(s)return s(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var c=r[a]={exports:{}};e[a][0].call(c.exports,function(t){var i=e[a][1][t];return o(i||t)},c,c.exports,t,e,r,n)}return r[a].exports}for(var s="function"==typeof i&&i,a=0;a<n.length;a++)o(n[a]);return o}({1:[function(t,e,i){!function(t){"use strict";function e(t){var e=t.charCodeAt(0);return e===r||e===h?62:e===n||e===l?63:e<o?-1:e<o+10?e-o+26+26:e<a+26?e-a:e<s+26?e-s+26:void 0}var i="undefined"!=typeof Uint8Array?Uint8Array:Array,r="+".charCodeAt(0),n="/".charCodeAt(0),o="0".charCodeAt(0),s="a".charCodeAt(0),a="A".charCodeAt(0),h="-".charCodeAt(0),l="_".charCodeAt(0);t.toByteArray=function(t){function r(t){l[c++]=t}var n,o,s,a,h,l;if(t.length%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var u=t.length;h="="===t.charAt(u-2)?2:"="===t.charAt(u-1)?1:0,l=new i(3*t.length/4-h),s=h>0?t.length-4:t.length;var c=0;for(n=0,o=0;n<s;n+=4,o+=3)r((16711680&(a=e(t.charAt(n))<<18|e(t.charAt(n+1))<<12|e(t.charAt(n+2))<<6|e(t.charAt(n+3))))>>16),r((65280&a)>>8),r(255&a);return 2===h?r(255&(a=e(t.charAt(n))<<2|e(t.charAt(n+1))>>4)):1===h&&(r((a=e(t.charAt(n))<<10|e(t.charAt(n+1))<<4|e(t.charAt(n+2))>>2)>>8&255),r(255&a)),l},t.fromByteArray=function(t){function e(t){return"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(t)}function i(t){return e(t>>18&63)+e(t>>12&63)+e(t>>6&63)+e(63&t)}var r,n,o,s=t.length%3,a="";for(r=0,o=t.length-s;r<o;r+=3)n=(t[r]<<16)+(t[r+1]<<8)+t[r+2],a+=i(n);switch(s){case 1:n=t[t.length-1],a+=e(n>>2),a+=e(n<<4&63),a+="==";break;case 2:n=(t[t.length-2]<<8)+t[t.length-1],a+=e(n>>10),a+=e(n>>4&63),a+=e(n<<2&63),a+="="}return a}}(void 0===i?this.base64js={}:i)},{}],2:[function(t,e,i){},{}],3:[function(t,i,r){(function(e){"use strict";function i(){return n.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function n(t){return this instanceof n?(n.TYPED_ARRAY_SUPPORT||(this.length=0,this.parent=void 0),"number"==typeof t?function(t,e){if(t=s(t,e<0?0:0|a(e)),!n.TYPED_ARRAY_SUPPORT)for(var i=0;i<e;i++)t[i]=0;return t}(this,t):"string"==typeof t?function(t,e,i){return"string"==typeof i&&""!==i||(i="utf8"),(t=s(t,0|h(e,i))).write(e,i),t}(this,t,arguments.length>1?arguments[1]:"utf8"):function(t,e){if(n.isBuffer(e))return function(t,e){var i=0|a(e.length);return t=s(t,i),e.copy(t,0,0,i),t}(t,e);if(F(e))return function(t,e){var i=0|a(e.length);t=s(t,i);for(var r=0;r<i;r+=1)t[r]=255&e[r];return t}(t,e);if(null==e)throw new TypeError("must start with number, buffer, array or string");if("undefined"!=typeof ArrayBuffer){if(e.buffer instanceof ArrayBuffer)return o(t,e);if(e instanceof ArrayBuffer)return function(t,e){return n.TYPED_ARRAY_SUPPORT?(e.byteLength,t=n._augment(new Uint8Array(e))):t=o(t,new Uint8Array(e)),t}(t,e)}return e.length?function(t,e){var i=0|a(e.length);t=s(t,i);for(var r=0;r<i;r+=1)t[r]=255&e[r];return t}(t,e):function(t,e){var i,r=0;"Buffer"===e.type&&F(e.data)&&(i=e.data,r=0|a(i.length)),t=s(t,r);for(var n=0;n<r;n+=1)t[n]=255&i[n];return t}(t,e)}(this,t)):arguments.length>1?new n(t,arguments[1]):new n(t)}function o(t,e){var i=0|a(e.length);t=s(t,i);for(var r=0;r<i;r+=1)t[r]=255&e[r];return t}function s(t,e){return n.TYPED_ARRAY_SUPPORT?(t=n._augment(new Uint8Array(e))).__proto__=n.prototype:(t.length=e,t._isBuffer=!0),0!==e&&e<=n.poolSize>>>1&&(t.parent=I),t}function a(t){if(t>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|t}function h(t,e){"string"!=typeof t&&(t=""+t);var i=t.length;if(0===i)return 0;for(var r=!1;;)switch(e){case"ascii":case"binary":case"raw":case"raws":return i;case"utf8":case"utf-8":return k(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*i;case"hex":return i>>>1;case"base64":return C(t).length;default:if(r)return k(t).length;e=(""+e).toLowerCase(),r=!0}}function l(t,e,i,r){i=Number(i)||0;var n=t.length-i;r?(r=Number(r))>n&&(r=n):r=n;var o=e.length;if(o%2!=0)throw new Error("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;s++){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))throw new Error("Invalid hex string");t[i+s]=a}return s}function u(t,e,i,r){return R(k(e,t.length-i),t,i,r)}function c(t,e,i,r){return R(function(t){for(var e=[],i=0;i<t.length;i++)e.push(255&t.charCodeAt(i));return e}(e),t,i,r)}function p(t,e,i,r){return c(t,e,i,r)}function d(t,e,i,r){return R(C(e),t,i,r)}function f(t,e,i,r){return R(function(t,e){for(var i,r,n,o=[],s=0;s<t.length&&!((e-=2)<0);s++)i=t.charCodeAt(s),r=i>>8,n=i%256,o.push(n),o.push(r);return o}(e,t.length-i),t,i,r)}function m(t,e,i){return 0===e&&i===t.length?O.fromByteArray(t):O.fromByteArray(t.slice(e,i))}function y(t,e,i){i=Math.min(t.length,i);for(var r=[],n=e;n<i;){var o,s,a,h,l=t[n],u=null,c=l>239?4:l>223?3:l>191?2:1;if(n+c<=i)switch(c){case 1:l<128&&(u=l);break;case 2:128==(192&(o=t[n+1]))&&(h=(31&l)<<6|63&o)>127&&(u=h);break;case 3:o=t[n+1],s=t[n+2],128==(192&o)&&128==(192&s)&&(h=(15&l)<<12|(63&o)<<6|63&s)>2047&&(h<55296||h>57343)&&(u=h);break;case 4:o=t[n+1],s=t[n+2],a=t[n+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(h=(15&l)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&h<1114112&&(u=h)}null===u?(u=65533,c=1):u>65535&&(u-=65536,r.push(u>>>10&1023|55296),u=56320|1023&u),r.push(u),n+=c}return function(t){var e=t.length;if(e<=D)return String.fromCharCode.apply(String,t);for(var i="",r=0;r<e;)i+=String.fromCharCode.apply(String,t.slice(r,r+=D));return i}(r)}function v(t,e,i){var r="";i=Math.min(t.length,i);for(var n=e;n<i;n++)r+=String.fromCharCode(127&t[n]);return r}function g(t,e,i){var r="";i=Math.min(t.length,i);for(var n=e;n<i;n++)r+=String.fromCharCode(t[n]);return r}function _(t,e,i){var r=t.length;(!e||e<0)&&(e=0),(!i||i<0||i>r)&&(i=r);for(var n="",o=e;o<i;o++)n+=E(t[o]);return n}function b(t,e,i){for(var r=t.slice(e,i),n="",o=0;o<r.length;o+=2)n+=String.fromCharCode(r[o]+256*r[o+1]);return n}function S(t,e,i){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>i)throw new RangeError("Trying to access beyond buffer length")}function x(t,e,i,r,o,s){if(!n.isBuffer(t))throw new TypeError("buffer must be a Buffer instance");if(e>o||e<s)throw new RangeError("value is out of bounds");if(i+r>t.length)throw new RangeError("index out of range")}function w(t,e,i,r){e<0&&(e=65535+e+1);for(var n=0,o=Math.min(t.length-i,2);n<o;n++)t[i+n]=(e&255<<8*(r?n:1-n))>>>8*(r?n:1-n)}function T(t,e,i,r){e<0&&(e=4294967295+e+1);for(var n=0,o=Math.min(t.length-i,4);n<o;n++)t[i+n]=e>>>8*(r?n:3-n)&255}function A(t,e,i,r,n,o){if(e>n||e<o)throw new RangeError("value is out of bounds");if(i+r>t.length)throw new RangeError("index out of range");if(i<0)throw new RangeError("index out of range")}function M(t,e,i,r,n){return n||A(t,e,i,4,3.4028234663852886e38,-3.4028234663852886e38),L.write(t,e,i,r,23,4),i+4}function P(t,e,i,r,n){return n||A(t,e,i,8,1.7976931348623157e308,-1.7976931348623157e308),L.write(t,e,i,r,52,8),i+8}function E(t){return t<16?"0"+t.toString(16):t.toString(16)}function k(t,e){e=e||1/0;for(var i,r=t.length,n=null,o=[],s=0;s<r;s++){if((i=t.charCodeAt(s))>55295&&i<57344){if(!n){if(i>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&o.push(239,191,189);continue}n=i;continue}if(i<56320){(e-=3)>-1&&o.push(239,191,189),n=i;continue}i=65536+(n-55296<<10|i-56320)}else n&&(e-=3)>-1&&o.push(239,191,189);if(n=null,i<128){if((e-=1)<0)break;o.push(i)}else if(i<2048){if((e-=2)<0)break;o.push(i>>6|192,63&i|128)}else if(i<65536){if((e-=3)<0)break;o.push(i>>12|224,i>>6&63|128,63&i|128)}else{if(!(i<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}}return o}function C(t){return O.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(B,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function R(t,e,i,r){for(var n=0;n<r&&!(n+i>=e.length||n>=t.length);n++)e[n+i]=t[n];return n}var O=t("base64-js"),L=t("ieee754"),F=t("isarray");r.Buffer=n,r.SlowBuffer=function t(e,i){if(!(this instanceof t))return new t(e,i);var r=new n(e,i);return delete r.parent,r},r.INSPECT_MAX_BYTES=50,n.poolSize=8192;var I={};n.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){function t(){}try{var e=new Uint8Array(1);return e.foo=function(){return 42},e.constructor=t,42===e.foo()&&e.constructor===t&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(t){return!1}}(),n.TYPED_ARRAY_SUPPORT?(n.prototype.__proto__=Uint8Array.prototype,n.__proto__=Uint8Array):(n.prototype.length=void 0,n.prototype.parent=void 0),n.isBuffer=function(t){return!(null==t||!t._isBuffer)},n.compare=function(t,e){if(!n.isBuffer(t)||!n.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var i=t.length,r=e.length,o=0,s=Math.min(i,r);o<s&&t[o]===e[o];)++o;return o!==s&&(i=t[o],r=e[o]),i<r?-1:r<i?1:0},n.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},n.concat=function(t,e){if(!F(t))throw new TypeError("list argument must be an Array of Buffers.");if(0===t.length)return new n(0);var i;if(void 0===e)for(e=0,i=0;i<t.length;i++)e+=t[i].length;var r=new n(e),o=0;for(i=0;i<t.length;i++){var s=t[i];s.copy(r,o),o+=s.length}return r},n.byteLength=h,n.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?y(this,0,t):function(t,e,i){var r=!1;if(e|=0,i=void 0===i||i===1/0?this.length:0|i,t||(t="utf8"),e<0&&(e=0),i>this.length&&(i=this.length),i<=e)return"";for(;;)switch(t){case"hex":return _(this,e,i);case"utf8":case"utf-8":return y(this,e,i);case"ascii":return v(this,e,i);case"binary":return g(this,e,i);case"base64":return m(this,e,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return b(this,e,i);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},n.prototype.equals=function(t){if(!n.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===n.compare(this,t)},n.prototype.inspect=function(){var t="",e=r.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,e).match(/.{2}/g).join(" "),this.length>e&&(t+=" ... ")),"<Buffer "+t+">"},n.prototype.compare=function(t){if(!n.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t?0:n.compare(this,t)},n.prototype.indexOf=function(t,e){function i(t,e,i){for(var r=-1,n=0;i+n<t.length;n++)if(t[i+n]===e[-1===r?0:n-r]){if(-1===r&&(r=n),n-r+1===e.length)return i+r}else r=-1;return-1}if(e>2147483647?e=2147483647:e<-2147483648&&(e=-2147483648),e>>=0,0===this.length)return-1;if(e>=this.length)return-1;if(e<0&&(e=Math.max(this.length+e,0)),"string"==typeof t)return 0===t.length?-1:String.prototype.indexOf.call(this,t,e);if(n.isBuffer(t))return i(this,t,e);if("number"==typeof t)return n.TYPED_ARRAY_SUPPORT&&"function"===Uint8Array.prototype.indexOf?Uint8Array.prototype.indexOf.call(this,t,e):i(this,[t],e);throw new TypeError("val must be string, number or Buffer")},n.prototype.get=function(t){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(t)},n.prototype.set=function(t,e){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(t,e)},n.prototype.write=function(t,e,i,r){if(void 0===e)r="utf8",i=this.length,e=0;else if(void 0===i&&"string"==typeof e)r=e,i=this.length,e=0;else if(isFinite(e))e|=0,isFinite(i)?(i|=0,void 0===r&&(r="utf8")):(r=i,i=void 0);else{var n=r;r=e,e=0|i,i=n}var o=this.length-e;if((void 0===i||i>o)&&(i=o),t.length>0&&(i<0||e<0)||e>this.length)throw new RangeError("attempt to write outside buffer bounds");r||(r="utf8");for(var s=!1;;)switch(r){case"hex":return l(this,t,e,i);case"utf8":case"utf-8":return u(this,t,e,i);case"ascii":return c(this,t,e,i);case"binary":return p(this,t,e,i);case"base64":return d(this,t,e,i);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return f(this,t,e,i);default:if(s)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),s=!0}},n.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var D=4096;n.prototype.slice=function(t,e){var i,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),n.TYPED_ARRAY_SUPPORT)i=n._augment(this.subarray(t,e));else{var o=e-t;i=new n(o,void 0);for(var s=0;s<o;s++)i[s]=this[s+t]}return i.length&&(i.parent=this.parent||this),i},n.prototype.readUIntLE=function(t,e,i){t|=0,e|=0,i||S(t,e,this.length);for(var r=this[t],n=1,o=0;++o<e&&(n*=256);)r+=this[t+o]*n;return r},n.prototype.readUIntBE=function(t,e,i){t|=0,e|=0,i||S(t,e,this.length);for(var r=this[t+--e],n=1;e>0&&(n*=256);)r+=this[t+--e]*n;return r},n.prototype.readUInt8=function(t,e){return e||S(t,1,this.length),this[t]},n.prototype.readUInt16LE=function(t,e){return e||S(t,2,this.length),this[t]|this[t+1]<<8},n.prototype.readUInt16BE=function(t,e){return e||S(t,2,this.length),this[t]<<8|this[t+1]},n.prototype.readUInt32LE=function(t,e){return e||S(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},n.prototype.readUInt32BE=function(t,e){return e||S(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},n.prototype.readIntLE=function(t,e,i){t|=0,e|=0,i||S(t,e,this.length);for(var r=this[t],n=1,o=0;++o<e&&(n*=256);)r+=this[t+o]*n;return r>=(n*=128)&&(r-=Math.pow(2,8*e)),r},n.prototype.readIntBE=function(t,e,i){t|=0,e|=0,i||S(t,e,this.length);for(var r=e,n=1,o=this[t+--r];r>0&&(n*=256);)o+=this[t+--r]*n;return o>=(n*=128)&&(o-=Math.pow(2,8*e)),o},n.prototype.readInt8=function(t,e){return e||S(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},n.prototype.readInt16LE=function(t,e){e||S(t,2,this.length);var i=this[t]|this[t+1]<<8;return 32768&i?4294901760|i:i},n.prototype.readInt16BE=function(t,e){e||S(t,2,this.length);var i=this[t+1]|this[t]<<8;return 32768&i?4294901760|i:i},n.prototype.readInt32LE=function(t,e){return e||S(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},n.prototype.readInt32BE=function(t,e){return e||S(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},n.prototype.readFloatLE=function(t,e){return e||S(t,4,this.length),L.read(this,t,!0,23,4)},n.prototype.readFloatBE=function(t,e){return e||S(t,4,this.length),L.read(this,t,!1,23,4)},n.prototype.readDoubleLE=function(t,e){return e||S(t,8,this.length),L.read(this,t,!0,52,8)},n.prototype.readDoubleBE=function(t,e){return e||S(t,8,this.length),L.read(this,t,!1,52,8)},n.prototype.writeUIntLE=function(t,e,i,r){t=+t,e|=0,i|=0,r||x(this,t,e,i,Math.pow(2,8*i),0);var n=1,o=0;for(this[e]=255&t;++o<i&&(n*=256);)this[e+o]=t/n&255;return e+i},n.prototype.writeUIntBE=function(t,e,i,r){t=+t,e|=0,i|=0,r||x(this,t,e,i,Math.pow(2,8*i),0);var n=i-1,o=1;for(this[e+n]=255&t;--n>=0&&(o*=256);)this[e+n]=t/o&255;return e+i},n.prototype.writeUInt8=function(t,e,i){return t=+t,e|=0,i||x(this,t,e,1,255,0),n.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},n.prototype.writeUInt16LE=function(t,e,i){return t=+t,e|=0,i||x(this,t,e,2,65535,0),n.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):w(this,t,e,!0),e+2},n.prototype.writeUInt16BE=function(t,e,i){return t=+t,e|=0,i||x(this,t,e,2,65535,0),n.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):w(this,t,e,!1),e+2},n.prototype.writeUInt32LE=function(t,e,i){return t=+t,e|=0,i||x(this,t,e,4,4294967295,0),n.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):T(this,t,e,!0),e+4},n.prototype.writeUInt32BE=function(t,e,i){return t=+t,e|=0,i||x(this,t,e,4,4294967295,0),n.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):T(this,t,e,!1),e+4},n.prototype.writeIntLE=function(t,e,i,r){if(t=+t,e|=0,!r){var n=Math.pow(2,8*i-1);x(this,t,e,i,n-1,-n)}var o=0,s=1,a=t<0?1:0;for(this[e]=255&t;++o<i&&(s*=256);)this[e+o]=(t/s>>0)-a&255;return e+i},n.prototype.writeIntBE=function(t,e,i,r){if(t=+t,e|=0,!r){var n=Math.pow(2,8*i-1);x(this,t,e,i,n-1,-n)}var o=i-1,s=1,a=t<0?1:0;for(this[e+o]=255&t;--o>=0&&(s*=256);)this[e+o]=(t/s>>0)-a&255;return e+i},n.prototype.writeInt8=function(t,e,i){return t=+t,e|=0,i||x(this,t,e,1,127,-128),n.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},n.prototype.writeInt16LE=function(t,e,i){return t=+t,e|=0,i||x(this,t,e,2,32767,-32768),n.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):w(this,t,e,!0),e+2},n.prototype.writeInt16BE=function(t,e,i){return t=+t,e|=0,i||x(this,t,e,2,32767,-32768),n.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):w(this,t,e,!1),e+2},n.prototype.writeInt32LE=function(t,e,i){return t=+t,e|=0,i||x(this,t,e,4,2147483647,-2147483648),n.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):T(this,t,e,!0),e+4},n.prototype.writeInt32BE=function(t,e,i){return t=+t,e|=0,i||x(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),n.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):T(this,t,e,!1),e+4},n.prototype.writeFloatLE=function(t,e,i){return M(this,t,e,!0,i)},n.prototype.writeFloatBE=function(t,e,i){return M(this,t,e,!1,i)},n.prototype.writeDoubleLE=function(t,e,i){return P(this,t,e,!0,i)},n.prototype.writeDoubleBE=function(t,e,i){return P(this,t,e,!1,i)},n.prototype.copy=function(t,e,i,r){if(i||(i=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<i&&(r=i),r===i)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(i<0||i>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-i&&(r=t.length-e+i);var o,s=r-i;if(this===t&&i<e&&e<r)for(o=s-1;o>=0;o--)t[o+e]=this[o+i];else if(s<1e3||!n.TYPED_ARRAY_SUPPORT)for(o=0;o<s;o++)t[o+e]=this[o+i];else t._set(this.subarray(i,i+s),e);return s},n.prototype.fill=function(t,e,i){if(t||(t=0),e||(e=0),i||(i=this.length),i<e)throw new RangeError("end < start");if(i!==e&&0!==this.length){if(e<0||e>=this.length)throw new RangeError("start out of bounds");if(i<0||i>this.length)throw new RangeError("end out of bounds");var r;if("number"==typeof t)for(r=e;r<i;r++)this[r]=t;else{var n=k(t.toString()),o=n.length;for(r=e;r<i;r++)this[r]=n[r%o]}return this}},n.prototype.toArrayBuffer=function(){if("undefined"!=typeof Uint8Array){if(n.TYPED_ARRAY_SUPPORT)return new n(this).buffer;for(var t=new Uint8Array(this.length),e=0,i=t.length;e<i;e+=1)t[e]=this[e];return t.buffer}throw new TypeError("Buffer.toArrayBuffer not supported in this browser")};var U=n.prototype;n._augment=function(t){return t.constructor=n,t._isBuffer=!0,t._set=t.set,t.get=U.get,t.set=U.set,t.write=U.write,t.toString=U.toString,t.toLocaleString=U.toString,t.toJSON=U.toJSON,t.equals=U.equals,t.compare=U.compare,t.indexOf=U.indexOf,t.copy=U.copy,t.slice=U.slice,t.readUIntLE=U.readUIntLE,t.readUIntBE=U.readUIntBE,t.readUInt8=U.readUInt8,t.readUInt16LE=U.readUInt16LE,t.readUInt16BE=U.readUInt16BE,t.readUInt32LE=U.readUInt32LE,t.readUInt32BE=U.readUInt32BE,t.readIntLE=U.readIntLE,t.readIntBE=U.readIntBE,t.readInt8=U.readInt8,t.readInt16LE=U.readInt16LE,t.readInt16BE=U.readInt16BE,t.readInt32LE=U.readInt32LE,t.readInt32BE=U.readInt32BE,t.readFloatLE=U.readFloatLE,t.readFloatBE=U.readFloatBE,t.readDoubleLE=U.readDoubleLE,t.readDoubleBE=U.readDoubleBE,t.writeUInt8=U.writeUInt8,t.writeUIntLE=U.writeUIntLE,t.writeUIntBE=U.writeUIntBE,t.writeUInt16LE=U.writeUInt16LE,t.writeUInt16BE=U.writeUInt16BE,t.writeUInt32LE=U.writeUInt32LE,t.writeUInt32BE=U.writeUInt32BE,t.writeIntLE=U.writeIntLE,t.writeIntBE=U.writeIntBE,t.writeInt8=U.writeInt8,t.writeInt16LE=U.writeInt16LE,t.writeInt16BE=U.writeInt16BE,t.writeInt32LE=U.writeInt32LE,t.writeInt32BE=U.writeInt32BE,t.writeFloatLE=U.writeFloatLE,t.writeFloatBE=U.writeFloatBE,t.writeDoubleLE=U.writeDoubleLE,t.writeDoubleBE=U.writeDoubleBE,t.fill=U.fill,t.inspect=U.inspect,t.toArrayBuffer=U.toArrayBuffer,t};var B=/[^+\/0-9A-Za-z-_]/g}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"base64-js":1,ieee754:7,isarray:8}],4:[function(t,i,r){(function(e,n){!function(t,e){"object"==typeof r&&void 0!==i?i.exports=e():t.ES6Promise=e()}(this,function(){"use strict";function i(t){return"function"==typeof t}function r(){var t=setTimeout;return function(){return t(o,1)}}function o(){for(var t=0;t<w;t+=2)(0,O[t])(O[t+1]),O[t]=void 0,O[t+1]=void 0;w=0}function s(t,e){var i=arguments,r=this,n=new this.constructor(h);void 0===n[F]&&_(n);var o=r._state;return o?function(){var t=i[o-1];M(function(){return g(o,n,t,r._result)})}():m(r,n,t,e),n}function a(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(h);return c(e,t),e}function h(){}function l(t){try{return t.then}catch(t){return B.error=t,B}}function u(t,e,r){e.constructor===t.constructor&&r===s&&e.constructor.resolve===a?function(t,e){e._state===D?d(t,e._result):e._state===U?f(t,e._result):m(e,void 0,function(e){return c(t,e)},function(e){return f(t,e)})}(t,e):r===B?(f(t,B.error),B.error=null):void 0===r?d(t,e):i(r)?function(t,e,i){M(function(t){var r=!1,n=function(t,e,i,r){try{t.call(e,i,r)}catch(t){return t}}(i,e,function(i){r||(r=!0,e!==i?c(t,i):d(t,i))},function(e){r||(r=!0,f(t,e))},t._label);!r&&n&&(r=!0,f(t,n))},t)}(t,e,r):d(t,e)}function c(t,e){t===e?f(t,new TypeError("You cannot resolve a promise with itself")):function(t){var e=typeof t;return null!==t&&("object"===e||"function"===e)}(e)?u(t,e,l(e)):d(t,e)}function p(t){t._onerror&&t._onerror(t._result),y(t)}function d(t,e){t._state===I&&(t._result=e,t._state=D,0!==t._subscribers.length&&M(y,t))}function f(t,e){t._state===I&&(t._state=U,t._result=e,M(p,t))}function m(t,e,i,r){var n=t._subscribers,o=n.length;t._onerror=null,n[o]=e,n[o+D]=i,n[o+U]=r,0===o&&t._state&&M(y,t)}function y(t){var e=t._subscribers,i=t._state;if(0!==e.length){for(var r=void 0,n=void 0,o=t._result,s=0;s<e.length;s+=3)r=e[s],n=e[s+i],r?g(i,r,n,o):n(o);t._subscribers.length=0}}function v(){this.error=null}function g(t,e,r,n){var o=i(r),s=void 0,a=void 0,h=void 0,l=void 0;if(o){if((s=function(t,e){try{return t(e)}catch(t){return N.error=t,N}}(r,n))===N?(l=!0,a=s.error,s.error=null):h=!0,e===s)return void f(e,new TypeError("A promises callback cannot return that same promise."))}else s=n,h=!0;e._state!==I||(o&&h?c(e,s):l?f(e,a):t===D?d(e,s):t===U&&f(e,s))}function _(t){t[F]=G++,t._state=void 0,t._result=void 0,t._subscribers=[]}function b(t,e){this._instanceConstructor=t,this.promise=new t(h),this.promise[F]||_(this.promise),x(e)?(this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?d(this.promise,this._result):(this.length=this.length||0,this._enumerate(e),0===this._remaining&&d(this.promise,this._result))):f(this.promise,new Error("Array Methods must be provided an Array"))}function S(t){this[F]=G++,this._result=this._state=void 0,this._subscribers=[],h!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof S?function(t,e){try{e(function(e){c(t,e)},function(e){f(t,e)})}catch(e){f(t,e)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}var x=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},w=0,T=void 0,A=void 0,M=function(t,e){O[w]=t,O[w+1]=e,2===(w+=2)&&(A?A(o):L())},P="undefined"!=typeof window?window:void 0,E=P||{},k=E.MutationObserver||E.WebKitMutationObserver,C="undefined"==typeof self&&void 0!==e&&"[object process]"==={}.toString.call(e),R="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,O=new Array(1e3),L=void 0;L=C?function(){return e.nextTick(o)}:k?function(){var t=0,e=new k(o),i=document.createTextNode("");return e.observe(i,{characterData:!0}),function(){i.data=t=++t%2}}():R?function(){var t=new MessageChannel;return t.port1.onmessage=o,function(){return t.port2.postMessage(0)}}():void 0===P&&"function"==typeof t?function(){try{var e=t,i=e("vertx");return void 0!==(T=i.runOnLoop||i.runOnContext)?function(){T(o)}:r()}catch(e){return r()}}():r();var F=Math.random().toString(36).substring(16),I=void 0,D=1,U=2,B=new v,N=new v,G=0;return b.prototype._enumerate=function(t){for(var e=0;this._state===I&&e<t.length;e++)this._eachEntry(t[e],e)},b.prototype._eachEntry=function(t,e){var i=this._instanceConstructor,r=i.resolve;if(r===a){var n=l(t);if(n===s&&t._state!==I)this._settledAt(t._state,e,t._result);else if("function"!=typeof n)this._remaining--,this._result[e]=t;else if(i===S){var o=new i(h);u(o,t,n),this._willSettleAt(o,e)}else this._willSettleAt(new i(function(e){return e(t)}),e)}else this._willSettleAt(r(t),e)},b.prototype._settledAt=function(t,e,i){var r=this.promise;r._state===I&&(this._remaining--,t===U?f(r,i):this._result[e]=i),0===this._remaining&&d(r,this._result)},b.prototype._willSettleAt=function(t,e){var i=this;m(t,void 0,function(t){return i._settledAt(D,e,t)},function(t){return i._settledAt(U,e,t)})},S.all=function(t){return new b(this,t).promise},S.race=function(t){var e=this;return new e(x(t)?function(i,r){for(var n=t.length,o=0;o<n;o++)e.resolve(t[o]).then(i,r)}:function(t,e){return e(new TypeError("You must pass an array to race."))})},S.resolve=a,S.reject=function(t){var e=new this(h);return f(e,t),e},S._setScheduler=function(t){A=t},S._setAsap=function(t){M=t},S._asap=M,S.prototype={constructor:S,then:s,catch:function(t){return this.then(null,t)}},S.polyfill=function(){var t=void 0;if(void 0!==n)t=n;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var i=null;try{i=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===i&&!e.cast)return}t.Promise=S},S.Promise=S,S})}).call(this,t("_process"),void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:11}],5:[function(t,e,i){!function(t,r){if(void 0!==i&&void 0!==e)r(0,e);else{var n={exports:{}};r(0,n),t.fetchJsonp=n.exports}}(this,function(t,e){"use strict";function i(t){try{delete window[t]}catch(e){window[t]=void 0}}function r(t){var e=document.getElementById(t);e&&document.getElementsByTagName("head")[0].removeChild(e)}var n={timeout:5e3,jsonpCallback:"callback",jsonpCallbackFunction:null};e.exports=function(t){var e=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=t,s=e.timeout||n.timeout,a=e.jsonpCallback||n.jsonpCallback,h=void 0;return new Promise(function(n,l){var u=e.jsonpCallbackFunction||"jsonp_"+Date.now()+"_"+Math.ceil(1e5*Math.random()),c=a+"_"+u;window[u]=function(t){n({ok:!0,json:function(){return Promise.resolve(t)}}),h&&clearTimeout(h),r(c),i(u)},o+=-1===o.indexOf("?")?"?":"&";var p=document.createElement("script");p.setAttribute("src",""+o+a+"="+u),e.charset&&p.setAttribute("charset",e.charset),p.id=c,document.getElementsByTagName("head")[0].appendChild(p),h=setTimeout(function(){l(new Error("JSONP request to "+t+" timed out")),i(u),r(c),window[u]=function(){i(u)}},s),p.onerror=function(){l(new Error("JSONP request to "+t+" failed")),i(u),r(c),h&&clearTimeout(h)}})}})},{}],6:[function(t,e,i){var r=r||function(t){"use strict";if(!(void 0===t||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var e=t.document,i=function(){return t.URL||t.webkitURL||t},r=e.createElementNS("http://www.w3.org/1999/xhtml","a"),n="download"in r,o=/constructor/i.test(t.HTMLElement)||t.safari,s=/CriOS\/[\d]+/.test(navigator.userAgent),a=function(e){(t.setImmediate||t.setTimeout)(function(){throw e},0)},h=function(t){setTimeout(function(){"string"==typeof t?i().revokeObjectURL(t):t.remove()},4e4)},l=function(t,e,i){for(var r=(e=[].concat(e)).length;r--;){var n=t["on"+e[r]];if("function"==typeof n)try{n.call(t,i||t)}catch(t){a(t)}}},u=function(t){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob([String.fromCharCode(65279),t],{type:t.type}):t},c=function(e,a,c){c||(e=u(e));var p,d=this,f=e.type,m="application/octet-stream"===f,y=function(){l(d,"writestart progress write writeend".split(" "))};if(d.readyState=d.INIT,n)return p=i().createObjectURL(e),void setTimeout(function(){r.href=p,r.download=a,function(t){var e=new MouseEvent("click");t.dispatchEvent(e)}(r),y(),h(p),d.readyState=d.DONE});!function(){if((s||m&&o)&&t.FileReader){var r=new FileReader;return r.onloadend=function(){var e=s?r.result:r.result.replace(/^data:[^;]*;/,"data:attachment/file;");t.open(e,"_blank")||(t.location.href=e),e=void 0,d.readyState=d.DONE,y()},r.readAsDataURL(e),void(d.readyState=d.INIT)}p||(p=i().createObjectURL(e)),m?t.location.href=p:t.open(p,"_blank")||(t.location.href=p),d.readyState=d.DONE,y(),h(p)}()},p=c.prototype;return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(t,e,i){return e=e||t.name||"download",i||(t=u(t)),navigator.msSaveOrOpenBlob(t,e)}:(p.abort=function(){},p.readyState=p.INIT=0,p.WRITING=1,p.DONE=2,p.error=p.onwritestart=p.onprogress=p.onwrite=p.onabort=p.onerror=p.onwriteend=null,function(t,e,i){return new c(t,e||t.name||"download",i)})}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);void 0!==e&&e.exports&&(e.exports.saveAs=r)},{}],7:[function(t,e,i){i.read=function(t,e,i,r,n){var o,s,a=8*n-r-1,h=(1<<a)-1,l=h>>1,u=-7,c=i?n-1:0,p=i?-1:1,d=t[e+c];for(c+=p,o=d&(1<<-u)-1,d>>=-u,u+=a;u>0;o=256*o+t[e+c],c+=p,u-=8);for(s=o&(1<<-u)-1,o>>=-u,u+=r;u>0;s=256*s+t[e+c],c+=p,u-=8);if(0===o)o=1-l;else{if(o===h)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),o-=l}return(d?-1:1)*s*Math.pow(2,o-r)},i.write=function(t,e,i,r,n,o){var s,a,h,l=8*o-n-1,u=(1<<l)-1,c=u>>1,p=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:o-1,f=r?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=u):(s=Math.floor(Math.log(e)/Math.LN2),e*(h=Math.pow(2,-s))<1&&(s--,h*=2),(e+=s+c>=1?p/h:p*Math.pow(2,1-c))*h>=2&&(s++,h/=2),s+c>=u?(a=0,s=u):s+c>=1?(a=(e*h-1)*Math.pow(2,n),s+=c):(a=e*Math.pow(2,c-1)*Math.pow(2,n),s=0));n>=8;t[i+d]=255&a,d+=f,a/=256,n-=8);for(s=s<<n|a,l+=n;l>0;t[i+d]=255&s,d+=f,s/=256,l-=8);t[i+d-f]|=128*m}},{}],8:[function(t,e,i){var r={}.toString;e.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},{}],9:[function(t,e,i){"use strict";function r(t,e){return t.b===e.b&&t.a===e.a}function n(t,e){return t.b<e.b||t.b===e.b&&t.a<=e.a}function o(t,e,i){var r=e.b-t.b,n=i.b-e.b;return 0<r+n?r<n?e.a-t.a+r/(r+n)*(t.a-i.a):e.a-i.a+n/(r+n)*(i.a-t.a):0}function s(t,e,i){var r=e.b-t.b,n=i.b-e.b;return 0<r+n?(e.a-i.a)*r+(e.a-t.a)*n:0}function a(t,e){return t.a<e.a||t.a===e.a&&t.b<=e.b}function h(t,e,i){var r=e.a-t.a,n=i.a-e.a;return 0<r+n?r<n?e.b-t.b+r/(r+n)*(t.b-i.b):e.b-i.b+n/(r+n)*(i.b-t.b):0}function l(t,e,i){var r=e.a-t.a,n=i.a-e.a;return 0<r+n?(e.b-i.b)*r+(e.b-t.b)*n:0}function u(t){return n(t.b.a,t.a)}function c(t){return n(t.a,t.b.a)}function p(t,e,i,r){return(t=0>t?0:t)<=(i=0>i?0:i)?0===i?(e+r)/2:e+t/(t+i)*(r-e):r+i/(t+i)*(e-r)}function d(t){var e=g(t.b);return b(e,t.c),b(e.b,t.c),S(e,t.a),e}function f(t,e){var i=!1,r=!1;t!==e&&(e.a!==t.a&&(r=!0,w(e.a,t.a)),e.d!==t.d&&(i=!0,T(e.d,t.d)),_(e,t),r||(b(e,t.a),t.a.c=t),i||(S(e,t.d),t.d.a=t))}function m(t){var e=t.b,i=!1;t.d!==t.b.d&&(i=!0,T(t.d,t.b.d)),t.c===t?w(t.a,null):(t.b.d.a=J(t),t.a.c=t.c,_(t,J(t)),i||S(t,t.d)),e.c===e?(w(e.a,null),T(e.d,null)):(t.d.a=J(e),e.a.c=e.c,_(e,J(e))),x(t)}function y(t){var e=g(t),i=e.b;return _(e,t.e),e.a=t.b.a,b(i,e.a),e.d=i.d=t.d,e=e.b,_(t.b,J(t.b)),_(t.b,e),t.b.a=e.a,e.b.a.c=e.b,e.b.d=t.b.d,e.f=t.f,e.b.f=t.b.f,e}function v(t,e){var i=!1,r=g(t),n=r.b;return e.d!==t.d&&(i=!0,T(e.d,t.d)),_(r,t.e),_(n,e),r.a=t.b.a,n.a=e.a,r.d=n.d=t.d,t.d.a=n,i||S(r,t.d),r}function g(t){var e=new Z,i=new Z,r=t.b.h;return i.h=r,r.b.h=e,e.h=t,t.b.h=i,e.b=i,e.c=e,e.e=i,i.b=e,i.c=i,i.e=e}function _(t,e){var i=t.c,r=e.c;i.b.e=e,r.b.e=t,t.c=r,e.c=i}function b(t,e){var i=e.f,r=new K(e,i);i.e=r,e.f=r,i=r.c=t;do{i.a=r,i=i.c}while(i!==t)}function S(t,e){var i=e.d,r=new Q(e,i);i.b=r,e.d=r,r.a=t,r.c=e.c,i=t;do{i.d=r,i=i.e}while(i!==t)}function x(t){var e=t.h;t=t.b.h,e.b.h=t,t.b.h=e}function w(t,e){var i=t.c,r=i;do{r.a=e,r=r.c}while(r!==i);i=t.f,(r=t.e).f=i,i.e=r}function T(t,e){var i=t.a,r=i;do{r.d=e,r=r.e}while(r!==i);i=t.d,(r=t.b).d=i,i.b=r}function A(t){var e=0;return Math.abs(t[1])>Math.abs(t[0])&&(e=1),Math.abs(t[2])>Math.abs(t[e])&&(e=2),e}function M(t,e){t.f+=e.f,t.b.f+=e.b.f}function P(t,e,i){return t=t.a,e=e.a,i=i.a,e.b.a===t?i.b.a===t?n(e.a,i.a)?0>=s(i.b.a,e.a,i.a):0<=s(e.b.a,i.a,e.a):0>=s(i.b.a,t,i.a):i.b.a===t?0<=s(e.b.a,t,e.a):(e=o(e.b.a,t,e.a),t=o(i.b.a,t,i.a),e>=t)}function E(t){t.a.i=null;var e=t.e;e.a.c=e.c,e.c.a=e.a,t.e=null}function k(t,e){m(t.a),t.c=!1,t.a=e,e.i=t}function C(t){var e=t.a.a;do{t=ut(t)}while(t.a.a===e);return t.c&&(e=v(lt(t).a.b,t.a.e),k(t,e),t=ut(t)),t}function R(t,e,i){var r=new ht;return r.a=i,r.e=z(t.f,e.e,r),i.i=r}function O(t,e){switch(t.s){case 100130:return 0!=(1&e);case 100131:return 0!==e;case 100132:return 0<e;case 100133:return 0>e;case 100134:return 2<=e||-2>=e}return!1}function L(t){var e=t.a,i=e.d;i.c=t.d,i.a=e,E(t)}function F(t,e,i){for(t=e,e=e.a;t!==i;){t.c=!1;var r=lt(t),n=r.a;if(n.a!==e.a){if(!r.c){L(t);break}n=v(e.c.b,n.b),k(r,n)}e.c!==n&&(f(J(n),n),f(e,n)),L(t),e=r.a,t=r}return e}function I(t,e,i,r,n,o){var s=!0;do{R(t,e,i.b),i=i.c}while(i!==r);for(null===n&&(n=lt(e).a.b.c);r=lt(e),(i=r.a.b).a===n.a;)i.c!==n&&(f(J(i),i),f(J(n),i)),r.f=e.f-i.f,r.d=O(t,r.f),e.b=!0,!s&&N(t,e)&&(M(i,n),E(e),m(n)),s=!1,e=r,n=i;e.b=!0,o&&q(t,e)}function D(t,e,i,r,n){var o=[e.g[0],e.g[1],e.g[2]];e.d=null,e.d=t.o&&t.o(o,i,r,t.c)||null,null===e.d&&(n?t.n||(Y(t,100156),t.n=!0):e.d=i[0])}function U(t,e,i){var r=[null,null,null,null];r[0]=e.a.d,r[1]=i.a.d,D(t,e.a,r,[.5,.5,0,0],!1),f(e,i)}function B(t,e,i,r,n){var o=Math.abs(e.b-t.b)+Math.abs(e.a-t.a),s=Math.abs(i.b-t.b)+Math.abs(i.a-t.a),a=n+1;r[n]=.5*s/(o+s),r[a]=.5*o/(o+s),t.g[0]+=r[n]*e.g[0]+r[a]*i.g[0],t.g[1]+=r[n]*e.g[1]+r[a]*i.g[1],t.g[2]+=r[n]*e.g[2]+r[a]*i.g[2]}function N(t,e){var i=lt(e),o=e.a,a=i.a;if(n(o.a,a.a)){if(0<s(a.b.a,o.a,a.a))return!1;if(r(o.a,a.a)){if(o.a!==a.a){var i=t.e,h=o.a.h;if(0<=h){var i=i.b,l=i.d,u=i.e,c=i.c,p=c[h];l[p]=l[i.a],c[l[p]]=p,p<=--i.a&&(1>=p?st(i,p):n(u[l[p>>1]],u[l[p]])?st(i,p):at(i,p)),u[h]=null,c[h]=i.b,i.b=h}else for(i.c[-(h+1)]=null;0<i.a&&null===i.c[i.d[i.a-1]];)--i.a;U(t,J(a),o)}}else y(a.b),f(o,J(a)),e.b=i.b=!0}else{if(0>s(o.b.a,a.a,o.a))return!1;ut(e).b=e.b=!0,y(o.b),f(J(a),o)}return!0}function G(t,e){var i=lt(e),u=e.a,c=i.a,d=u.a,m=c.a,v=u.b.a,g=c.b.a,_=new K;if(s(v,t.a,d),s(g,t.a,m),d===m||Math.min(d.a,v.a)>Math.max(m.a,g.a))return!1;if(n(d,m)){if(0<s(g,d,m))return!1}else if(0>s(v,m,d))return!1;var b,S,x=v,w=d,T=g,A=m;if(n(x,w)||(b=x,x=w,w=b),n(T,A)||(b=T,T=A,A=b),n(x,T)||(b=x,x=T,T=b,b=w,w=A,A=b),n(T,w)?n(w,A)?(b=o(x,T,w),S=o(T,w,A),0>b+S&&(b=-b,S=-S),_.b=p(b,T.b,S,w.b)):(b=s(x,T,w),S=-s(x,A,w),0>b+S&&(b=-b,S=-S),_.b=p(b,T.b,S,A.b)):_.b=(T.b+w.b)/2,a(x,w)||(b=x,x=w,w=b),a(T,A)||(b=T,T=A,A=b),a(x,T)||(b=x,x=T,T=b,b=w,w=A,A=b),a(T,w)?a(w,A)?(b=h(x,T,w),S=h(T,w,A),0>b+S&&(b=-b,S=-S),_.a=p(b,T.a,S,w.a)):(b=l(x,T,w),S=-l(x,A,w),0>b+S&&(b=-b,S=-S),_.a=p(b,T.a,S,A.a)):_.a=(T.a+w.a)/2,n(_,t.a)&&(_.b=t.a.b,_.a=t.a.a),n(x=n(d,m)?d:m,_)&&(_.b=x.b,_.a=x.a),r(_,d)||r(_,m))return N(t,e),!1;if(!r(v,t.a)&&0<=s(v,t.a,_)||!r(g,t.a)&&0>=s(g,t.a,_)){if(g===t.a)return y(u.b),f(c.b,u),e=C(e),u=lt(e).a,F(t,lt(e),i),I(t,e,J(u),u,u,!0),!0;if(v===t.a){y(c.b),f(u.e,J(c)),d=i=e,m=d.a.b.a;do{d=ut(d)}while(d.a.b.a===m);return d=lt(e=d).a.b.c,i.a=J(c),c=F(t,i,null),I(t,e,c.c,u.b.c,d,!0),!0}return 0<=s(v,t.a,_)&&(ut(e).b=e.b=!0,y(u.b),u.a.b=t.a.b,u.a.a=t.a.a),0>=s(g,t.a,_)&&(e.b=i.b=!0,y(c.b),c.a.b=t.a.b,c.a.a=t.a.a),!1}return y(u.b),y(c.b),f(J(c),u),u.a.b=_.b,u.a.a=_.a,u.a.h=et(t.e,u.a),u=u.a,c=[0,0,0,0],_=[d.d,v.d,m.d,g.d],u.g[0]=u.g[1]=u.g[2]=0,B(u,d,v,c,0),B(u,m,g,c,2),D(t,u,_,c,!0),ut(e).b=e.b=i.b=!0,!1}function q(t,e){for(var i=lt(e);;){for(;i.b;)e=i,i=lt(i);if(!e.b&&(i=e,null===(e=ut(e))||!e.b))break;e.b=!1;var r,o=e.a,a=i.a;if(r=o.b.a!==a.b.a)t:{var h=lt(r=e),l=r.a,u=h.a,c=void 0;if(n(l.b.a,u.b.a)){if(0>s(l.b.a,u.b.a,l.a)){r=!1;break t}ut(r).b=r.b=!0,c=y(l),f(u.b,c),c.d.c=r.d}else{if(0<s(u.b.a,l.b.a,u.a)){r=!1;break t}r.b=h.b=!0,c=y(u),f(l.e,u.b),c.b.d.c=r.d}r=!0}if(r&&(i.c?(E(i),m(a),i=lt(e),a=i.a):e.c&&(E(e),m(o),e=ut(i),o=e.a)),o.a!==a.a)if(o.b.a===a.b.a||e.c||i.c||o.b.a!==t.a&&a.b.a!==t.a)N(t,e);else if(G(t,e))break;o.a===a.a&&o.b.a===a.b.a&&(M(a,o),E(e),m(o),e=ut(i))}}function V(t,e){t.a=e;for(var i=e.c;null===i.i;)if((i=i.c)===e.c){var i=t,o=e,a=new ht;a.a=o.c.b;var h=i.f,l=h.a;do{l=l.a}while(null!==l.b&&!h.c(h.b,a,l.b));var h=l.b,u=lt(h),a=h.a,l=u.a;if(0===s(a.b.a,o,a.a))r((a=h.a).a,o)||r(a.b.a,o)||(y(a.b),h.c&&(m(a.c),h.c=!1),f(o.c,a),V(i,o));else{var c=n(l.b.a,a.b.a)?h:u,u=void 0;h.d||c.c?(u=c===h?v(o.c.b,a.e):v(l.b.c.b,o.c).b,c.c?k(c,u):(a=i,(h=R(i,h,u)).f=ut(h).f+h.a.f,h.d=O(a,h.f)),V(i,o)):I(i,h,o.c,o.c,null,!0)}return}if(i=C(i.i),a=lt(i),h=a.a,(a=F(t,a,null)).c===h){var h=a,a=h.c,l=lt(i),u=i.a,c=l.a,p=!1;u.b.a!==c.b.a&&G(t,i),r(u.a,t.a)&&(f(J(a),u),i=C(i),a=lt(i).a,F(t,lt(i),l),p=!0),r(c.a,t.a)&&(f(h,J(c)),h=F(t,l,null),p=!0),p?I(t,i,h.c,a,a,!0):(o=n(c.a,u.a)?J(c):u,o=v(h.c.b,o),I(t,i,o,o.c,o.c,!1),o.b.i.c=!0,q(t,i))}else I(t,i,a.c,h,h,!0)}function j(t,e){var i=new ht,r=d(t.b);r.a.b=pt,r.a.a=e,r.b.a.b=-pt,r.b.a.a=e,t.a=r.b.a,i.a=r,i.f=0,i.d=!1,i.c=!1,i.h=!0,i.b=!1,r=z(r=t.f,r.a,i),i.e=r}function z(t,e,i){do{e=e.c}while(null!==e.b&&!t.c(t.b,e.b,i));return t=new W(i,e.a,e),e.a.c=t,e.a=t}function W(t,e,i){this.b=t||null,this.a=e||this,this.c=i||this}function H(){this.d=dt,this.p=this.b=this.q=null,this.j=[0,0,0],this.s=100130,this.n=!1,this.o=this.a=this.e=this.f=null,this.m=!1,this.c=this.r=this.i=this.k=this.l=this.h=null}function X(t,e){if(t.d!==e)for(;t.d!==e;)if(t.d<e)switch(t.d){case dt:Y(t,100151),t.u(null);break;case 1:Y(t,100152),t.t()}else switch(t.d){case 2:Y(t,100154),t.v();break;case 1:Y(t,100153),t.w()}}function Y(t,e){t.p&&t.p(e,t.c)}function Q(t,e){this.b=t||this,this.d=e||this,this.a=null,this.c=!1}function Z(){this.h=this,this.i=this.d=this.a=this.e=this.c=this.b=null,this.f=0}function J(t){return t.b.e}function K(t,e){this.e=t||this,this.f=e||this,this.d=this.c=null,this.g=[0,0,0],this.h=this.a=this.b=0}function $(){this.c=[],this.d=null,this.a=0,this.e=!1,this.b=new function(){this.d=rt([0],33),this.e=[null,null],this.c=[0,0],this.a=0,this.f=32,this.b=0,this.h=!1,this.d[1]=1}}function tt(t){t.d=[];for(var e=0;e<t.a;e++)t.d[e]=e;t.d.sort(function(t){return function(e,i){return n(t[e],t[i])?1:-1}}(t.c)),t.e=!0,function(t){for(var e=t.a;1<=e;--e)st(t,e);t.h=!0}(t.b)}function et(t,e){if(t.e){var i,r=t.b,n=++r.a;return 2*n>r.f&&(r.f*=2,r.c=rt(r.c,r.f+1)),0===r.b?i=n:(i=r.b,r.b=r.c[r.b]),r.e[i]=e,r.c[i]=n,r.d[n]=i,r.h&&at(r,n),i}return r=t.a++,t.c[r]=e,-(r+1)}function it(t){if(0===t.a)return ot(t.b);var e=t.c[t.d[t.a-1]];if(0!==t.b.a&&n(nt(t.b),e))return ot(t.b);do{--t.a}while(0<t.a&&null===t.c[t.d[t.a-1]]);return e}function rt(t,e){for(var i=Array(e),r=0;r<t.length;r++)i[r]=t[r];for(;r<e;r++)i[r]=0;return i}function nt(t){return t.e[t.d[1]]}function ot(t){var e=t.d,i=t.e,r=t.c,n=e[1],o=i[n];return 0<t.a&&(e[1]=e[t.a],r[e[1]]=1,i[n]=null,r[n]=t.b,t.b=n,0<--t.a&&st(t,1)),o}function st(t,e){for(var i=t.d,r=t.e,o=t.c,s=e,a=i[s];;){var h=s<<1;h<t.a&&n(r[i[h+1]],r[i[h]])&&(h+=1);var l=i[h];if(h>t.a||n(r[a],r[l])){i[s]=a,o[a]=s;break}i[s]=l,o[l]=s,s=h}}function at(t,e){for(var i=t.d,r=t.e,o=t.c,s=e,a=i[s];;){var h=s>>1,l=i[h];if(0===h||n(r[l],r[a])){i[s]=a,o[a]=s;break}i[s]=l,o[l]=s,s=h}}function ht(){this.e=this.a=null,this.f=0,this.c=this.b=this.h=this.d=!1}function lt(t){return t.e.c.b}function ut(t){return t.e.a.b}var ct,pt=4e150,dt=0;(ct=H.prototype).x=function(){X(this,dt)},ct.B=function(t,e){switch(t){case 100142:return;case 100140:switch(e){case 100130:case 100131:case 100132:case 100133:case 100134:return void(this.s=e)}break;case 100141:return void(this.m=!!e);default:return void Y(this,100900)}Y(this,100901)},ct.y=function(t){switch(t){case 100142:return 0;case 100140:return this.s;case 100141:return this.m;default:Y(this,100900)}return!1},ct.A=function(t,e,i){this.j[0]=t,this.j[1]=e,this.j[2]=i},ct.z=function(t,e){var i=e||null;switch(t){case 100100:case 100106:this.h=i;break;case 100104:case 100110:this.l=i;break;case 100101:case 100107:this.k=i;break;case 100102:case 100108:this.i=i;break;case 100103:case 100109:this.p=i;break;case 100105:case 100111:this.o=i;break;case 100112:this.r=i;break;default:Y(this,100900)}},ct.C=function(t,e){var i=!1,r=[0,0,0];X(this,2);for(var n=0;3>n;++n){var o=t[n];-1e150>o&&(o=-1e150,i=!0),1e150<o&&(o=1e150,i=!0),r[n]=o}i&&Y(this,100155),null===(i=this.q)?f(i=d(this.b),i.b):(y(i),i=i.e),i.a.d=e,i.a.g[0]=r[0],i.a.g[1]=r[1],i.a.g[2]=r[2],i.f=1,i.b.f=-1,this.q=i},ct.u=function(t){X(this,dt),this.d=1,this.b=new function(){this.c=new K,this.a=new Q,this.b=new Z,this.d=new Z,this.b.b=this.d,this.d.b=this.b},this.c=t},ct.t=function(){X(this,1),this.d=2,this.q=null},ct.v=function(){X(this,2),this.d=1},ct.w=function(){X(this,1),this.d=dt;var t=this.j[0],e=this.j[1],i=this.j[2],o=!1,a=[t,e,i];if(0===t&&0===e&&0===i){for(var e=[-2e150,-2e150,-2e150],h=[2e150,2e150,2e150],i=[],l=[],o=this.b.c,t=o.e;t!==o;t=t.e)for(var p=0;3>p;++p){var d=t.g[p];d<h[p]&&(h[p]=d,l[p]=t),d>e[p]&&(e[p]=d,i[p]=t)}if(t=0,e[1]-h[1]>e[0]-h[0]&&(t=1),e[2]-h[2]>e[t]-h[t]&&(t=2),h[t]>=e[t])a[0]=0,a[1]=0,a[2]=1;else{for(e=0,h=l[t],i=i[t],l=[0,0,0],h=[h.g[0]-i.g[0],h.g[1]-i.g[1],h.g[2]-i.g[2]],p=[0,0,0],t=o.e;t!==o;t=t.e)p[0]=t.g[0]-i.g[0],p[1]=t.g[1]-i.g[1],p[2]=t.g[2]-i.g[2],l[0]=h[1]*p[2]-h[2]*p[1],l[1]=h[2]*p[0]-h[0]*p[2],l[2]=h[0]*p[1]-h[1]*p[0],(d=l[0]*l[0]+l[1]*l[1]+l[2]*l[2])>e&&(e=d,a[0]=l[0],a[1]=l[1],a[2]=l[2]);0>=e&&(a[0]=a[1]=a[2]=0,a[A(h)]=1)}o=!0}for(l=A(a),t=this.b.c,e=(l+1)%3,i=(l+2)%3,l=0<a[l]?1:-1,a=t.e;a!==t;a=a.e)a.b=a.g[e],a.a=l*a.g[i];if(o){for(a=0,o=this.b.a,t=o.b;t!==o;t=t.b)if(!(0>=(e=t.a).f))do{a+=(e.a.b-e.b.a.b)*(e.a.a+e.b.a.a),e=e.e}while(e!==t.a);if(0>a)for(a=this.b.c,o=a.e;o!==a;o=o.e)o.a=-o.a}for(this.n=!1,a=this.b.b,t=a.h;t!==a;t=o)o=t.h,e=t.e,r(t.a,t.b.a)&&t.e.e!==t&&(U(this,e,t),m(t),e=(t=e).e),e.e===t&&(e!==t&&(e!==o&&e!==o.b||(o=o.h),m(e)),t!==o&&t!==o.b||(o=o.h),m(t));for(this.e=a=new $,o=this.b.c,t=o.e;t!==o;t=t.e)t.h=et(a,t);for(tt(a),this.f=new function(t){this.a=new W,this.b=t,this.c=P}(this),j(this,-pt),j(this,pt);null!==(a=it(this.e));){for(;;){t:if(t=this.e,0===t.a)o=nt(t.b);else if(o=t.c[t.d[t.a-1]],0!==t.b.a&&(t=nt(t.b),n(t,o))){o=t;break t}if(null===o||!r(o,a))break;o=it(this.e),U(this,a.c,o.c)}V(this,a)}for(this.a=this.f.a.a.b.a.a,a=0;null!==(o=this.f.a.a.b);)o.h||++a,E(o);for(this.f=null,(a=this.e).b=null,a.d=null,this.e=a.c=null,a=this.b,t=a.a.b;t!==a.a;t=o)o=t.b,(t=t.a).e.e===t&&(M(t.c,t),m(t));if(!this.n){if(a=this.b,this.m)for(t=a.b.h;t!==a.b;t=o)o=t.h,t.b.d.c!==t.d.c?t.f=t.d.c?1:-1:m(t);else for(t=a.a.b;t!==a.a;t=o)if(o=t.b,t.c){for(t=t.a;n(t.b.a,t.a);t=t.c.b);for(;n(t.a,t.b.a);t=t.e);for(e=t.c.b,i=void 0;t.e!==e;)if(n(t.b.a,e.a)){for(;e.e!==t&&(u(e.e)||0>=s(e.a,e.b.a,e.e.b.a));)i=v(e.e,e),e=i.b;e=e.c.b}else{for(;e.e!==t&&(c(t.c.b)||0<=s(t.b.a,t.a,t.c.b.a));)i=v(t,t.c.b),t=i.b;t=t.e}for(;e.e.e!==t;)i=v(e.e,e),e=i.b}if(this.h||this.i||this.k||this.l)if(this.m){for(a=this.b,o=a.a.b;o!==a.a;o=o.b)if(o.c){this.h&&this.h(2,this.c),t=o.a;do{this.k&&this.k(t.a.d,this.c),t=t.e}while(t!==o.a);this.i&&this.i(this.c)}}else{for(a=this.b,o=!!this.l,t=!1,e=-1,i=a.a.d;i!==a.a;i=i.d)if(i.c){t||(this.h&&this.h(4,this.c),t=!0),l=i.a;do{o&&(h=l.b.d.c?0:1,e!==h&&(e=h,this.l&&this.l(!!e,this.c))),this.k&&this.k(l.a.d,this.c),l=l.e}while(l!==i.a)}t&&this.i&&this.i(this.c)}if(this.r){for(a=this.b,t=a.a.b;t!==a.a;t=o)if(o=t.b,!t.c){e=t.a,i=e.e,l=void 0;do{i=(l=i).e,l.d=null,null===l.b.d&&(l.c===l?w(l.a,null):(l.a.c=l.c,_(l,J(l))),(h=l.b).c===h?w(h.a,null):(h.a.c=h.c,_(h,J(h))),x(l))}while(l!==e);e=t.d,(t=t.b).d=e,e.b=t}return this.r(this.b),void(this.c=this.b=null)}}this.b=this.c=null},this.libtess={GluTesselator:H,windingRule:{GLU_TESS_WINDING_ODD:100130,GLU_TESS_WINDING_NONZERO:100131,GLU_TESS_WINDING_POSITIVE:100132,GLU_TESS_WINDING_NEGATIVE:100133,GLU_TESS_WINDING_ABS_GEQ_TWO:100134},primitiveType:{GL_LINE_LOOP:2,GL_TRIANGLES:4,GL_TRIANGLE_STRIP:5,GL_TRIANGLE_FAN:6},errorType:{GLU_TESS_MISSING_BEGIN_POLYGON:100151,GLU_TESS_MISSING_END_POLYGON:100153,GLU_TESS_MISSING_BEGIN_CONTOUR:100152,GLU_TESS_MISSING_END_CONTOUR:100154,GLU_TESS_COORD_TOO_LARGE:100155,GLU_TESS_NEED_COMBINE_CALLBACK:100156},gluEnum:{GLU_TESS_MESH:100112,GLU_TESS_TOLERANCE:100142,GLU_TESS_WINDING_RULE:100140,GLU_TESS_BOUNDARY_ONLY:100141,GLU_INVALID_ENUM:100900,GLU_INVALID_VALUE:100901,GLU_TESS_BEGIN:100100,GLU_TESS_VERTEX:100101,GLU_TESS_END:100102,GLU_TESS_ERROR:100103,GLU_TESS_EDGE_FLAG:100104,GLU_TESS_COMBINE:100105,GLU_TESS_BEGIN_DATA:100106,GLU_TESS_VERTEX_DATA:100107,GLU_TESS_END_DATA:100108,GLU_TESS_ERROR_DATA:100109,GLU_TESS_EDGE_FLAG_DATA:100110,GLU_TESS_COMBINE_DATA:100111}},H.prototype.gluDeleteTess=H.prototype.x,H.prototype.gluTessProperty=H.prototype.B,H.prototype.gluGetTessProperty=H.prototype.y,H.prototype.gluTessNormal=H.prototype.A,H.prototype.gluTessCallback=H.prototype.z,H.prototype.gluTessVertex=H.prototype.C,H.prototype.gluTessBeginPolygon=H.prototype.u,H.prototype.gluTessBeginContour=H.prototype.t,H.prototype.gluTessEndContour=H.prototype.v,H.prototype.gluTessEndPolygon=H.prototype.w,void 0!==e&&(e.exports=this.libtess)},{}],10:[function(t,e,i){(function(r){!function(t,r){r("object"==typeof i&&void 0!==e?i:t.opentype={})}(this,function(e){"use strict";function i(){this.table=new Uint16Array(16),this.trans=new Uint16Array(288)}function n(t,e){this.source=t,this.sourceIndex=0,this.tag=0,this.bitcount=0,this.dest=e,this.destLen=0,this.ltree=new i,this.dtree=new i}function o(t,e,i,r){var n,o;for(n=0;n<i;++n)t[n]=0;for(n=0;n<30-i;++n)t[n+i]=n/i|0;for(o=r,n=0;n<30;++n)e[n]=o,o+=1<<t[n]}function s(t,e,i,r){var n,o;for(n=0;n<16;++n)t.table[n]=0;for(n=0;n<r;++n)t.table[e[i+n]]++;for(t.table[0]=0,o=0,n=0;n<16;++n)Fe[n]=o,o+=t.table[n];for(n=0;n<r;++n)e[i+n]&&(t.trans[Fe[e[i+n]]++]=n)}function a(t){t.bitcount--||(t.tag=t.source[t.sourceIndex++],t.bitcount=7);var e=1&t.tag;return t.tag>>>=1,e}function h(t,e,i){if(!e)return i;for(;t.bitcount<24;)t.tag|=t.source[t.sourceIndex++]<<t.bitcount,t.bitcount+=8;var r=t.tag&65535>>>16-e;return t.tag>>>=e,t.bitcount-=e,r+i}function l(t,e){for(;t.bitcount<24;)t.tag|=t.source[t.sourceIndex++]<<t.bitcount,t.bitcount+=8;var i=0,r=0,n=0,o=t.tag;do{r=2*r+(1&o),o>>>=1,++n,i+=e.table[n],r-=e.table[n]}while(r>=0);return t.tag=o,t.bitcount-=n,e.trans[i+r]}function u(t,e,i){var r,n,o,a,u,c;for(r=h(t,5,257),n=h(t,5,1),o=h(t,4,4),a=0;a<19;++a)Le[a]=0;for(a=0;a<o;++a){var p=h(t,3,0);Le[Re[a]]=p}for(s(Oe,Le,0,19),u=0;u<r+n;){var d=l(t,Oe);switch(d){case 16:var f=Le[u-1];for(c=h(t,2,3);c;--c)Le[u++]=f;break;case 17:for(c=h(t,3,3);c;--c)Le[u++]=0;break;case 18:for(c=h(t,7,11);c;--c)Le[u++]=0;break;default:Le[u++]=d}}s(e,Le,0,r),s(i,Le,r,n)}function c(t,e,i){for(;;){var r,n,o,s,a=l(t,e);if(256===a)return we;if(a<256)t.dest[t.destLen++]=a;else for(r=h(t,Pe[a-=257],Ee[a]),n=l(t,i),o=t.destLen-h(t,ke[n],Ce[n]),s=o;s<o+r;++s)t.dest[t.destLen++]=t.dest[s]}}function p(t){for(var e,i,r;t.bitcount>8;)t.sourceIndex--,t.bitcount-=8;if(e=256*(e=t.source[t.sourceIndex+1])+t.source[t.sourceIndex],i=256*(i=t.source[t.sourceIndex+3])+t.source[t.sourceIndex+2],e!==(65535&~i))return Te;for(t.sourceIndex+=4,r=e;r;--r)t.dest[t.destLen++]=t.source[t.sourceIndex++];return t.bitcount=0,we}function d(t,e,i,r,n){return Math.pow(1-n,3)*t+3*Math.pow(1-n,2)*n*e+3*(1-n)*Math.pow(n,2)*i+Math.pow(n,3)*r}function f(){this.x1=Number.NaN,this.y1=Number.NaN,this.x2=Number.NaN,this.y2=Number.NaN}function m(){this.commands=[],this.fill="black",this.stroke=null,this.strokeWidth=1}function y(t){throw new Error(t)}function v(t,e){t||y(e)}function g(t){return function(){return t}}function _(t){return t>=-128&&t<=127}function b(t,e,i){for(var r=0,n=t.length;e<n&&r<64&&0===t[e];)++e,++r;return i.push(128|r-1),e}function S(t,e,i){for(var r=0,n=t.length,o=e;o<n&&r<64;){var s=t[o];if(!_(s))break;if(0===s&&o+1<n&&0===t[o+1])break;++o,++r}i.push(r-1);for(var a=e;a<o;++a)i.push(t[a]+256&255);return o}function x(t,e,i){for(var r=0,n=t.length,o=e;o<n&&r<64;){var s=t[o];if(0===s)break;if(_(s)&&o+1<n&&_(t[o+1]))break;++o,++r}i.push(64|r-1);for(var a=e;a<o;++a){var h=t[a];i.push(h+65536>>8&255,h+256&255)}return o}function w(t,e,i){for(var r=this,n=0;n<e.length;n+=1){var o=e[n];r[o.name]=o.value}if(this.tableName=t,this.fields=e,i)for(var s=Object.keys(i),a=0;a<s.length;a+=1){var h=s[a],l=i[h];void 0!==r[h]&&(r[h]=l)}}function T(t,e,i){void 0===i&&(i=e.length);var r=new Array(e.length+1);r[0]={name:t+"Count",type:"USHORT",value:i};for(var n=0;n<e.length;n++)r[n+1]={name:t+n,type:"USHORT",value:e[n]};return r}function A(t,e,i){var r=e.length,n=new Array(r+1);n[0]={name:t+"Count",type:"USHORT",value:r};for(var o=0;o<r;o++)n[o+1]={name:t+o,type:"TABLE",value:i(e[o],o)};return n}function M(t,e,i){var r=e.length,n=[];n[0]={name:t+"Count",type:"USHORT",value:r};for(var o=0;o<r;o++)n=n.concat(i(e[o],o));return n}function P(t){1===t.format?w.call(this,"coverageTable",[{name:"coverageFormat",type:"USHORT",value:1}].concat(T("glyph",t.glyphs))):De.assert(!1,"Can't create coverage table format 2 yet.")}function E(t){w.call(this,"scriptListTable",M("scriptRecord",t,function(t,e){var i=t.script,r=i.defaultLangSys;return De.assert(!!r,"Unable to write GSUB: script "+t.tag+" has no default language system."),[{name:"scriptTag"+e,type:"TAG",value:t.tag},{name:"script"+e,type:"TABLE",value:new w("scriptTable",[{name:"defaultLangSys",type:"TABLE",value:new w("defaultLangSys",[{name:"lookupOrder",type:"USHORT",value:0},{name:"reqFeatureIndex",type:"USHORT",value:r.reqFeatureIndex}].concat(T("featureIndex",r.featureIndexes)))}].concat(M("langSys",i.langSysRecords,function(t,e){var i=t.langSys;return[{name:"langSysTag"+e,type:"TAG",value:t.tag},{name:"langSys"+e,type:"TABLE",value:new w("langSys",[{name:"lookupOrder",type:"USHORT",value:0},{name:"reqFeatureIndex",type:"USHORT",value:i.reqFeatureIndex}].concat(T("featureIndex",i.featureIndexes)))}]})))}]}))}function k(t){w.call(this,"featureListTable",M("featureRecord",t,function(t,e){var i=t.feature;return[{name:"featureTag"+e,type:"TAG",value:t.tag},{name:"feature"+e,type:"TABLE",value:new w("featureTable",[{name:"featureParams",type:"USHORT",value:i.featureParams}].concat(T("lookupListIndex",i.lookupListIndexes)))}]}))}function C(t,e){w.call(this,"lookupListTable",A("lookup",t,function(t){var i=e[t.lookupType];return De.assert(!!i,"Unable to write GSUB lookup type "+t.lookupType+" tables."),new w("lookupTable",[{name:"lookupType",type:"USHORT",value:t.lookupType},{name:"lookupFlag",type:"USHORT",value:t.lookupFlag}].concat(A("subtable",t.subtables,i)))}))}function R(t,e){return t.getUint8(e)}function O(t,e){return t.getUint16(e,!1)}function L(t,e){return t.getUint32(e,!1)}function F(t,e){return t.getInt16(e,!1)+t.getUint16(e+2,!1)/65535}function I(t,e){this.data=t,this.offset=e,this.relativeOffset=0}function D(t,e,i){t.segments.push({end:e,start:e,delta:-(e-i),offset:0,glyphIndex:i})}function U(t){this.font=t}function B(t){this.cmap=t}function N(t,e){this.encoding=t,this.charset=e}function G(t){var e=this;switch(t.version){case 1:this.names=$e.slice();break;case 2:this.names=new Array(t.numberOfGlyphs);for(var i=0;i<t.numberOfGlyphs;i++)t.glyphNameIndex[i]<$e.length?e.names[i]=$e[t.glyphNameIndex[i]]:e.names[i]=t.names[t.glyphNameIndex[i]-$e.length];break;case 2.5:this.names=new Array(t.numberOfGlyphs);for(var r=0;r<t.numberOfGlyphs;r++)e.names[r]=$e[r+t.glyphNameIndex[r]];break;case 3:default:this.names=[]}}function q(t){this.bindConstructorValues(t)}function V(t,e,i){Object.defineProperty(t,e,{get:function(){return t.path,t[i]},set:function(e){t[i]=e},enumerable:!0,configurable:!0})}function j(t,e){if(this.font=t,this.glyphs={},Array.isArray(e))for(var i=0;i<e.length;i++)this.glyphs[i]=e[i];this.length=e&&e.length||0}function z(t,e){if(t===e)return!0;if(Array.isArray(t)&&Array.isArray(e)){if(t.length!==e.length)return!1;for(var i=0;i<t.length;i+=1)if(!z(t[i],e[i]))return!1;return!0}return!1}function W(t){return t.length<1240?107:t.length<33900?1131:32768}function H(t,e,i){var r,n,o=[],s=[],a=Ye.getCard16(t,e);if(0!==a){var h=Ye.getByte(t,e+2);r=e+(a+1)*h+2;for(var l=e+3,u=0;u<a+1;u+=1)o.push(Ye.getOffset(t,l,h)),l+=h;n=r+o[a]}else n=e+2;for(var c=0;c<o.length-1;c+=1){var p=Ye.getBytes(t,r+o[c],r+o[c+1]);i&&(p=i(p)),s.push(p)}return{objects:s,startOffset:e,endOffset:n}}function X(t,e){var i,r,n,o;if(28===e)return i=t.parseByte(),r=t.parseByte(),i<<8|r;if(29===e)return i=t.parseByte(),r=t.parseByte(),n=t.parseByte(),o=t.parseByte(),i<<24|r<<16|n<<8|o;if(30===e)return function(t){for(var e="",i=["0","1","2","3","4","5","6","7","8","9",".","E","E-",null,"-"];;){var r=t.parseByte(),n=r>>4,o=15&r;if(15===n)break;if(e+=i[n],15===o)break;e+=i[o]}return parseFloat(e)}(t);if(e>=32&&e<=246)return e-139;if(e>=247&&e<=250)return i=t.parseByte(),256*(e-247)+i+108;if(e>=251&&e<=254)return i=t.parseByte(),256*-(e-251)-i-108;throw new Error("Invalid b0 "+e)}function Y(t,e,i){e=void 0!==e?e:0;var r=new Ye.Parser(t,e),n=[],o=[];for(i=void 0!==i?i:t.length;r.relativeOffset<i;){var s=r.parseByte();s<=21?(12===s&&(s=1200+r.parseByte()),n.push([s,o]),o=[]):o.push(X(r,s))}return function(t){for(var e={},i=0;i<t.length;i+=1){var r=t[i][0],n=t[i][1],o=void 0;if(o=1===n.length?n[0]:n,e.hasOwnProperty(r)&&!isNaN(e[r]))throw new Error("Object "+e+" already has key "+r);e[r]=o}return e}(n)}function Q(t,e){return e=e<=390?Ze[e]:t[e-391]}function Z(t,e,i){for(var r,n={},o=0;o<e.length;o+=1){var s=e[o];if(Array.isArray(s.type)){var a=[];a.length=s.type.length;for(var h=0;h<s.type.length;h++)void 0===(r=void 0!==t[s.op]?t[s.op][h]:void 0)&&(r=void 0!==s.value&&void 0!==s.value[h]?s.value[h]:null),"SID"===s.type[h]&&(r=Q(i,r)),a[h]=r;n[s.name]=a}else void 0===(r=t[s.op])&&(r=void 0!==s.value?s.value:null),"SID"===s.type&&(r=Q(i,r)),n[s.name]=r}return n}function J(t,e){return Z(Y(t,0,t.byteLength),ii,e)}function K(t,e,i,r){return Z(Y(t,e,i),ri,r)}function $(t,e,i,r){for(var n=[],o=0;o<i.length;o+=1){var s=new DataView(new Uint8Array(i[o]).buffer),a=J(s,r);a._subrs=[],a._subrsBias=0;var h=a.private[0],l=a.private[1];if(0!==h&&0!==l){var u=K(t,l+e,h,r);if(a._defaultWidthX=u.defaultWidthX,a._nominalWidthX=u.nominalWidthX,0!==u.subrs){var c=l+u.subrs,p=H(t,c+e);a._subrs=p.objects,a._subrsBias=W(a._subrs)}a._privateDict=u}n.push(a)}return n}function tt(t,e,i){function r(t,e){g&&d.closePath(),d.moveTo(t,e),g=!0}function n(){f.length%2!=0&&!v&&(w=f.shift()+p),y+=f.length>>1,f.length=0,v=!0}var o,s,a,h,l,u,c,p,d=new m,f=[],y=0,v=!1,g=!1,_=0,b=0;if(t.isCIDFont){var S=t.tables.cff.topDict._fdSelect[e.index],x=t.tables.cff.topDict._fdArray[S];l=x._subrs,u=x._subrsBias,c=x._defaultWidthX,p=x._nominalWidthX}else l=t.tables.cff.topDict._subrs,u=t.tables.cff.topDict._subrsBias,c=t.tables.cff.topDict._defaultWidthX,p=t.tables.cff.topDict._nominalWidthX;var w=c;return function i(c){for(var m,S,x,T,A,M,P,E,k,C,R,O,L=0;L<c.length;){var F=c[L];switch(L+=1,F){case 1:case 3:n();break;case 4:f.length>1&&!v&&(w=f.shift()+p,v=!0),b+=f.pop(),r(_,b);break;case 5:for(;f.length>0;)_+=f.shift(),b+=f.shift(),d.lineTo(_,b);break;case 6:for(;f.length>0&&(_+=f.shift(),d.lineTo(_,b),0!==f.length);)b+=f.shift(),d.lineTo(_,b);break;case 7:for(;f.length>0&&(b+=f.shift(),d.lineTo(_,b),0!==f.length);)_+=f.shift(),d.lineTo(_,b);break;case 8:for(;f.length>0;)o=_+f.shift(),s=b+f.shift(),a=o+f.shift(),h=s+f.shift(),_=a+f.shift(),b=h+f.shift(),d.curveTo(o,s,a,h,_,b);break;case 10:A=f.pop()+u,(M=l[A])&&i(M);break;case 11:return;case 12:switch(F=c[L],L+=1,F){case 35:o=_+f.shift(),s=b+f.shift(),a=o+f.shift(),h=s+f.shift(),P=a+f.shift(),E=h+f.shift(),k=P+f.shift(),C=E+f.shift(),R=k+f.shift(),O=C+f.shift(),_=R+f.shift(),b=O+f.shift(),f.shift(),d.curveTo(o,s,a,h,P,E),d.curveTo(k,C,R,O,_,b);break;case 34:o=_+f.shift(),s=b,a=o+f.shift(),h=s+f.shift(),P=a+f.shift(),E=h,k=P+f.shift(),C=h,R=k+f.shift(),O=b,_=R+f.shift(),d.curveTo(o,s,a,h,P,E),d.curveTo(k,C,R,O,_,b);break;case 36:o=_+f.shift(),s=b+f.shift(),a=o+f.shift(),h=s+f.shift(),P=a+f.shift(),E=h,k=P+f.shift(),C=h,R=k+f.shift(),O=C+f.shift(),_=R+f.shift(),d.curveTo(o,s,a,h,P,E),d.curveTo(k,C,R,O,_,b);break;case 37:o=_+f.shift(),s=b+f.shift(),a=o+f.shift(),h=s+f.shift(),P=a+f.shift(),E=h+f.shift(),k=P+f.shift(),C=E+f.shift(),R=k+f.shift(),O=C+f.shift(),Math.abs(R-_)>Math.abs(O-b)?_=R+f.shift():b=O+f.shift(),d.curveTo(o,s,a,h,P,E),d.curveTo(k,C,R,O,_,b);break;default:console.log("Glyph "+e.index+": unknown operator 1200"+F),f.length=0}break;case 14:f.length>0&&!v&&(w=f.shift()+p,v=!0),g&&(d.closePath(),g=!1);break;case 18:n();break;case 19:case 20:n(),L+=y+7>>3;break;case 21:f.length>2&&!v&&(w=f.shift()+p,v=!0),b+=f.pop(),r(_+=f.pop(),b);break;case 22:f.length>1&&!v&&(w=f.shift()+p,v=!0),r(_+=f.pop(),b);break;case 23:n();break;case 24:for(;f.length>2;)o=_+f.shift(),s=b+f.shift(),a=o+f.shift(),h=s+f.shift(),_=a+f.shift(),b=h+f.shift(),d.curveTo(o,s,a,h,_,b);_+=f.shift(),b+=f.shift(),d.lineTo(_,b);break;case 25:for(;f.length>6;)_+=f.shift(),b+=f.shift(),d.lineTo(_,b);o=_+f.shift(),s=b+f.shift(),a=o+f.shift(),h=s+f.shift(),_=a+f.shift(),b=h+f.shift(),d.curveTo(o,s,a,h,_,b);break;case 26:for(f.length%2&&(_+=f.shift());f.length>0;)o=_,s=b+f.shift(),a=o+f.shift(),h=s+f.shift(),_=a,b=h+f.shift(),d.curveTo(o,s,a,h,_,b);break;case 27:for(f.length%2&&(b+=f.shift());f.length>0;)o=_+f.shift(),s=b,a=o+f.shift(),h=s+f.shift(),_=a+f.shift(),b=h,d.curveTo(o,s,a,h,_,b);break;case 28:m=c[L],S=c[L+1],f.push((m<<24|S<<16)>>16),L+=2;break;case 29:A=f.pop()+t.gsubrsBias,(M=t.gsubrs[A])&&i(M);break;case 30:for(;f.length>0&&(o=_,s=b+f.shift(),a=o+f.shift(),h=s+f.shift(),_=a+f.shift(),b=h+(1===f.length?f.shift():0),d.curveTo(o,s,a,h,_,b),0!==f.length);)o=_+f.shift(),s=b,a=o+f.shift(),h=s+f.shift(),b=h+f.shift(),_=a+(1===f.length?f.shift():0),d.curveTo(o,s,a,h,_,b);break;case 31:for(;f.length>0&&(o=_+f.shift(),s=b,a=o+f.shift(),h=s+f.shift(),b=h+f.shift(),_=a+(1===f.length?f.shift():0),d.curveTo(o,s,a,h,_,b),0!==f.length);)o=_,s=b+f.shift(),a=o+f.shift(),h=s+f.shift(),_=a+f.shift(),b=h+(1===f.length?f.shift():0),d.curveTo(o,s,a,h,_,b);break;default:F<32?console.log("Glyph "+e.index+": unknown operator "+F):F<247?f.push(F-139):F<251?(m=c[L],L+=1,f.push(256*(F-247)+m+108)):F<255?(m=c[L],L+=1,f.push(256*-(F-251)-m-108)):(m=c[L],S=c[L+1],x=c[L+2],T=c[L+3],L+=4,f.push((m<<24|S<<16|x<<8|T)/65536))}}}(i),e.advanceWidth=w,d}function et(t,e){var i,r=Ze.indexOf(t);return r>=0&&(i=r),(r=e.indexOf(t))>=0?i=r+Ze.length:(i=Ze.length+e.length,e.push(t)),i}function it(t,e,i){for(var r={},n=0;n<t.length;n+=1){var o=t[n],s=e[o.name];void 0===s||z(s,o.value)||("SID"===o.type&&(s=et(s,i)),r[o.op]={name:o.name,type:o.type,value:s})}return r}function rt(t,e){var i=new We.Record("Top DICT",[{name:"dict",type:"DICT",value:{}}]);return i.dict=it(ii,t,e),i}function nt(t){var e=new We.Record("Top DICT INDEX",[{name:"topDicts",type:"INDEX",value:[]}]);return e.topDicts=[{name:"topDict_0",type:"TABLE",value:t}],e}function ot(t){var e=[],i=t.path;e.push({name:"width",type:"NUMBER",value:t.advanceWidth});for(var r=0,n=0,o=0;o<i.commands.length;o+=1){var s=void 0,a=void 0,h=i.commands[o];if("Q"===h.type){var l=1/3,u=2/3;h={type:"C",x:h.x,y:h.y,x1:l*r+u*h.x1,y1:l*n+u*h.y1,x2:l*h.x+u*h.x1,y2:l*h.y+u*h.y1}}if("M"===h.type)s=Math.round(h.x-r),a=Math.round(h.y-n),e.push({name:"dx",type:"NUMBER",value:s}),e.push({name:"dy",type:"NUMBER",value:a}),e.push({name:"rmoveto",type:"OP",value:21}),r=Math.round(h.x),n=Math.round(h.y);else if("L"===h.type)s=Math.round(h.x-r),a=Math.round(h.y-n),e.push({name:"dx",type:"NUMBER",value:s}),e.push({name:"dy",type:"NUMBER",value:a}),e.push({name:"rlineto",type:"OP",value:5}),r=Math.round(h.x),n=Math.round(h.y);else if("C"===h.type){var c=Math.round(h.x1-r),p=Math.round(h.y1-n),d=Math.round(h.x2-h.x1),f=Math.round(h.y2-h.y1);s=Math.round(h.x-h.x2),a=Math.round(h.y-h.y2),e.push({name:"dx1",type:"NUMBER",value:c}),e.push({name:"dy1",type:"NUMBER",value:p}),e.push({name:"dx2",type:"NUMBER",value:d}),e.push({name:"dy2",type:"NUMBER",value:f}),e.push({name:"dx",type:"NUMBER",value:s}),e.push({name:"dy",type:"NUMBER",value:a}),e.push({name:"rrcurveto",type:"OP",value:8}),r=Math.round(h.x),n=Math.round(h.y)}}return e.push({name:"endchar",type:"OP",value:14}),e}function st(t,e,i){switch(t){case 0:if(65535===e)return"und";if(i)return i[e];break;case 1:return ci[e];case 3:return di[e]}}function at(t,e,i){switch(t){case 0:return fi;case 1:return yi[i]||mi[e];case 3:if(1===e||10===e)return fi}}function ht(t){var e={};for(var i in t)e[t[i]]=parseInt(i);return e}function lt(t,e,i,r,n,o){return new We.Record("NameRecord",[{name:"platformID",type:"USHORT",value:t},{name:"encodingID",type:"USHORT",value:e},{name:"languageID",type:"USHORT",value:i},{name:"nameID",type:"USHORT",value:r},{name:"length",type:"USHORT",value:n},{name:"offset",type:"USHORT",value:o}])}function ut(t,e){var i=function(t,e){var i=t.length,r=e.length-i+1;t:for(var n=0;n<r;n++)for(;n<r;n++){for(var o=0;o<i;o++)if(e[n+o]!==t[o])continue t;return n}return-1}(t,e);if(i<0){i=e.length;for(var r=0,n=t.length;r<n;++r)e.push(t[r])}return i}function ct(t){return Math.log(t)/Math.log(2)|0}function pt(t){for(;t.length%4!=0;)t.push(0);for(var e=0,i=0;i<t.length;i+=4)e+=(t[i]<<24)+(t[i+1]<<16)+(t[i+2]<<8)+t[i+3];return e%=Math.pow(2,32)}function dt(t,e,i,r){return new We.Record("Table Record",[{name:"tag",type:"TAG",value:void 0!==t?t:""},{name:"checkSum",type:"ULONG",value:void 0!==e?e:0},{name:"offset",type:"ULONG",value:void 0!==i?i:0},{name:"length",type:"ULONG",value:void 0!==r?r:0}])}function ft(t){var e=new We.Table("sfnt",[{name:"version",type:"TAG",value:"OTTO"},{name:"numTables",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);e.tables=t,e.numTables=t.length;var i=Math.pow(2,ct(e.numTables));e.searchRange=16*i,e.entrySelector=ct(i),e.rangeShift=16*e.numTables-e.searchRange;for(var r=[],n=[],o=e.sizeOf()+dt().sizeOf()*e.numTables;o%4!=0;)o+=1,n.push({name:"padding",type:"BYTE",value:0});for(var s=0;s<t.length;s+=1){var a=t[s];De.argument(4===a.tableName.length,"Table name"+a.tableName+" is invalid.");var h=a.sizeOf(),l=dt(a.tableName,pt(a.encode()),o,h);for(r.push({name:l.tag+" Table Record",type:"RECORD",value:l}),n.push({name:a.tableName+" table",type:"RECORD",value:a}),o+=h,De.argument(!isNaN(o),"Something went wrong calculating the offset.");o%4!=0;)o+=1,n.push({name:"padding",type:"BYTE",value:0})}return r.sort(function(t,e){return t.value.tag>e.value.tag?1:-1}),e.fields=e.fields.concat(r),e.fields=e.fields.concat(n),e}function mt(t,e,i){for(var r=0;r<e.length;r+=1){var n=t.charToGlyphIndex(e[r]);if(n>0)return t.glyphs.get(n).getMetrics()}return i}function yt(t,e){for(var i=0,r=t.length-1;i<=r;){var n=i+r>>>1,o=t[n].tag;if(o===e)return n;o<e?i=n+1:r=n-1}return-i-1}function vt(t,e){for(var i=0,r=t.length-1;i<=r;){var n=i+r>>>1,o=t[n];if(o===e)return n;o<e?i=n+1:r=n-1}return-i-1}function gt(t,e){for(var i,r=0,n=t.length-1;r<=n;){var o=r+n>>>1,s=(i=t[o]).start;if(s===e)return i;s<e?r=o+1:n=o-1}if(r>0)return i=t[r-1],e>i.end?0:i}function _t(t,e){this.font=t,this.tableName=e}function bt(t){_t.call(this,t,"gpos")}function St(t){_t.call(this,t,"gsub")}function xt(t,e){var i=t.length;if(i!==e.length)return!1;for(var r=0;r<i;r++)if(t[r]!==e[r])return!1;return!0}function wt(t,e,i){for(var r=t.subtables,n=0;n<r.length;n++){var o=r[n];if(o.substFormat===e)return o}if(i)return r.push(i),i}function Tt(t){for(var e=new ArrayBuffer(t.length),i=new Uint8Array(e),r=0;r<t.length;++r)i[r]=t[r];return e}function At(t){for(var e=new r(t.byteLength),i=new Uint8Array(t),n=0;n<e.length;++n)e[n]=i[n];return e}function Mt(t,e){if(!t)throw e}function Pt(t,e,i,r,n){var o;return(e&r)>0?(o=t.parseByte(),0==(e&n)&&(o=-o),o=i+o):o=(e&n)>0?i:i+t.parseShort(),o}function Et(t,e,i){var r,n,o=new Ye.Parser(e,i);if(t.numberOfContours=o.parseShort(),t._xMin=o.parseShort(),t._yMin=o.parseShort(),t._xMax=o.parseShort(),t._yMax=o.parseShort(),t.numberOfContours>0){for(var s=t.endPointIndices=[],a=0;a<t.numberOfContours;a+=1)s.push(o.parseUShort());t.instructionLength=o.parseUShort(),t.instructions=[];for(var h=0;h<t.instructionLength;h+=1)t.instructions.push(o.parseByte());var l=s[s.length-1]+1;r=[];for(var u=0;u<l;u+=1)if(n=o.parseByte(),r.push(n),(8&n)>0)for(var c=o.parseByte(),p=0;p<c;p+=1)r.push(n),u+=1;if(De.argument(r.length===l,"Bad flags."),s.length>0){var d,f=[];if(l>0){for(var m=0;m<l;m+=1)n=r[m],(d={}).onCurve=!!(1&n),d.lastPointOfContour=s.indexOf(m)>=0,f.push(d);for(var y=0,v=0;v<l;v+=1)n=r[v],(d=f[v]).x=Pt(o,n,y,2,16),y=d.x;for(var g=0,_=0;_<l;_+=1)n=r[_],(d=f[_]).y=Pt(o,n,g,4,32),g=d.y}t.points=f}else t.points=[]}else if(0===t.numberOfContours)t.points=[];else{t.isComposite=!0,t.points=[],t.components=[];for(var b=!0;b;){r=o.parseUShort();var S={glyphIndex:o.parseUShort(),xScale:1,scale01:0,scale10:0,yScale:1,dx:0,dy:0};(1&r)>0?(2&r)>0?(S.dx=o.parseShort(),S.dy=o.parseShort()):S.matchedPoints=[o.parseUShort(),o.parseUShort()]:(2&r)>0?(S.dx=o.parseChar(),S.dy=o.parseChar()):S.matchedPoints=[o.parseByte(),o.parseByte()],(8&r)>0?S.xScale=S.yScale=o.parseF2Dot14():(64&r)>0?(S.xScale=o.parseF2Dot14(),S.yScale=o.parseF2Dot14()):(128&r)>0&&(S.xScale=o.parseF2Dot14(),S.scale01=o.parseF2Dot14(),S.scale10=o.parseF2Dot14(),S.yScale=o.parseF2Dot14()),t.components.push(S),b=!!(32&r)}if(256&r){t.instructionLength=o.parseUShort(),t.instructions=[];for(var x=0;x<t.instructionLength;x+=1)t.instructions.push(o.parseByte())}}}function kt(t,e){for(var i=[],r=0;r<t.length;r+=1){var n=t[r],o={x:e.xScale*n.x+e.scale01*n.y+e.dx,y:e.scale10*n.x+e.yScale*n.y+e.dy,onCurve:n.onCurve,lastPointOfContour:n.lastPointOfContour};i.push(o)}return i}function Ct(t){var e=new m;if(!t)return e;for(var i=function(t){for(var e=[],i=[],r=0;r<t.length;r+=1){var n=t[r];i.push(n),n.lastPointOfContour&&(e.push(i),i=[])}return De.argument(0===i.length,"There are still points left in the current contour."),e}(t),r=0;r<i.length;++r){var n=i[r],o=null,s=n[n.length-1],a=n[0];if(s.onCurve)e.moveTo(s.x,s.y);else if(a.onCurve)e.moveTo(a.x,a.y);else{var h={x:.5*(s.x+a.x),y:.5*(s.y+a.y)};e.moveTo(h.x,h.y)}for(var l=0;l<n.length;++l)if(o=s,s=a,a=n[(l+1)%n.length],s.onCurve)e.lineTo(s.x,s.y);else{var u=a;o.onCurve||(s.x,o.x,s.y,o.y),a.onCurve||(u={x:.5*(s.x+a.x),y:.5*(s.y+a.y)}),e.quadraticCurveTo(s.x,s.y,u.x,u.y)}e.closePath()}return e}function Rt(t,e){if(e.isComposite)for(var i=0;i<e.components.length;i+=1){var r=e.components[i],n=t.get(r.glyphIndex);if(n.getPath(),n.points){var o=void 0;if(void 0===r.matchedPoints)o=kt(n.points,r);else{if(r.matchedPoints[0]>e.points.length-1||r.matchedPoints[1]>n.points.length-1)throw Error("Matched points out of range in "+e.name);var s=e.points[r.matchedPoints[0]],a=n.points[r.matchedPoints[1]],h={xScale:r.xScale,scale01:r.scale01,scale10:r.scale10,yScale:r.yScale,dx:0,dy:0};a=kt([a],h)[0],h.dx=s.x-a.x,h.dy=s.y-a.y,o=kt(n.points,h)}e.points=e.points.concat(o)}}return Ct(e.points)}function Ot(t){this.font=t,this.getCommands=function(t){return Ri.getPath(t).commands},this._fpgmState=this._prepState=void 0,this._errorState=0}function Lt(t){return t}function Ft(t){return Math.sign(t)*Math.round(Math.abs(t))}function It(t){return Math.sign(t)*Math.round(Math.abs(2*t))/2}function Dt(t){return Math.sign(t)*(Math.round(Math.abs(t)+.5)-.5)}function Ut(t){return Math.sign(t)*Math.ceil(Math.abs(t))}function Bt(t){return Math.sign(t)*Math.floor(Math.abs(t))}function Nt(t,e){this.x=t,this.y=e,this.axis=void 0,this.slope=e/t,this.normalSlope=-t/e,Object.freeze(this)}function Gt(t,e){var i=Math.sqrt(t*t+e*e);return e/=i,1==(t/=i)&&0===e?Li:0===t&&1===e?Fi:new Nt(t,e)}function qt(t,e,i,r){this.x=this.xo=Math.round(64*t)/64,this.y=this.yo=Math.round(64*e)/64,this.lastPointOfContour=i,this.onCurve=r,this.prevPointOnContour=void 0,this.nextPointOnContour=void 0,this.xTouched=!1,this.yTouched=!1,Object.preventExtensions(this)}function Vt(t,e){switch(this.env=t,this.stack=[],this.prog=e,t){case"glyf":this.zp0=this.zp1=this.zp2=1,this.rp0=this.rp1=this.rp2=0;case"prep":this.fv=this.pv=this.dpv=Li,this.round=Ft}}function jt(t){for(var e=t.tZone=new Array(t.gZone.length),i=0;i<e.length;i++)e[i]=new qt(0,0)}function zt(t,e){var i,r=t.prog,n=t.ip,o=1;do{if(88===(i=r[++n]))o++;else if(89===i)o--;else if(64===i)n+=r[n+1]+1;else if(65===i)n+=2*r[n+1]+1;else if(i>=176&&i<=183)n+=i-176+1;else if(i>=184&&i<=191)n+=2*(i-184+1);else if(e&&1===o&&27===i)break}while(o>0);t.ip=n}function Wt(t,i){e.DEBUG&&console.log(i.step,"SVTCA["+t.axis+"]"),i.fv=i.pv=i.dpv=t}function Ht(t,i){e.DEBUG&&console.log(i.step,"SPVTCA["+t.axis+"]"),i.pv=i.dpv=t}function Xt(t,i){e.DEBUG&&console.log(i.step,"SFVTCA["+t.axis+"]"),i.fv=t}function Yt(t,i){var r,n,o=i.stack,s=o.pop(),a=o.pop(),h=i.z2[s],l=i.z1[a];e.DEBUG&&console.log("SPVTL["+t+"]",s,a),t?(r=h.y-l.y,n=l.x-h.x):(r=l.x-h.x,n=l.y-h.y),i.pv=i.dpv=Gt(r,n)}function Qt(t,i){var r,n,o=i.stack,s=o.pop(),a=o.pop(),h=i.z2[s],l=i.z1[a];e.DEBUG&&console.log("SFVTL["+t+"]",s,a),t?(r=h.y-l.y,n=l.x-h.x):(r=l.x-h.x,n=l.y-h.y),i.fv=Gt(r,n)}function Zt(t){e.DEBUG&&console.log(t.step,"POP[]"),t.stack.pop()}function Jt(t,i){var r=i.stack.pop(),n=i.z0[r],o=i.fv,s=i.pv;e.DEBUG&&console.log(i.step,"MDAP["+t+"]",r);var a=s.distance(n,Ii);t&&(a=i.round(a)),o.setRelative(n,Ii,a,s),o.touch(n),i.rp0=i.rp1=r}function Kt(t,i){var r,n,o,s=i.z2,a=s.length-2;e.DEBUG&&console.log(i.step,"IUP["+t.axis+"]");for(var h=0;h<a;h++)r=s[h],t.touched(r)||(n=r.prevTouched(t))!==r&&(o=r.nextTouched(t),n===o&&t.setRelative(r,r,t.distance(n,n,!1,!0),t,!0),t.interpolate(r,n,o,t))}function $t(t,i){for(var r=i.stack,n=t?i.rp1:i.rp2,o=(t?i.z0:i.z1)[n],s=i.fv,a=i.pv,h=i.loop,l=i.z2;h--;){var u=r.pop(),c=l[u],p=a.distance(o,o,!1,!0);s.setRelative(c,c,p,a),s.touch(c),e.DEBUG&&console.log(i.step,(i.loop>1?"loop "+(i.loop-h)+": ":"")+"SHP["+(t?"rp1":"rp2")+"]",u)}i.loop=1}function te(t,i){var r=i.stack,n=t?i.rp1:i.rp2,o=(t?i.z0:i.z1)[n],s=i.fv,a=i.pv,h=r.pop(),l=i.z2[i.contours[h]],u=l;e.DEBUG&&console.log(i.step,"SHC["+t+"]",h);var c=a.distance(o,o,!1,!0);do{u!==o&&s.setRelative(u,u,c,a),u=u.nextPointOnContour}while(u!==l)}function ee(t,i){var r,n=i.stack,o=t?i.rp1:i.rp2,s=(t?i.z0:i.z1)[o],a=i.fv,h=i.pv,l=n.pop();switch(e.DEBUG&&console.log(i.step,"SHZ["+t+"]",l),l){case 0:r=i.tZone;break;case 1:r=i.gZone;break;default:throw new Error("Invalid zone")}for(var u,c=h.distance(s,s,!1,!0),p=r.length-2,d=0;d<p;d++)u=r[d],a.setRelative(u,u,c,h)}function ie(t,i){var r=i.stack,n=r.pop()/64,o=r.pop(),s=i.z1[o],a=i.z0[i.rp0],h=i.fv,l=i.pv;h.setRelative(s,a,n,l),h.touch(s),e.DEBUG&&console.log(i.step,"MSIRP["+t+"]",n,o),i.rp1=i.rp0,i.rp2=o,t&&(i.rp0=o)}function re(t,i){var r=i.stack,n=r.pop(),o=r.pop(),s=i.z0[o],a=i.fv,h=i.pv,l=i.cvt[n];e.DEBUG&&console.log(i.step,"MIAP["+t+"]",n,"(",l,")",o);var u=h.distance(s,Ii);t&&(Math.abs(u-l)<i.cvCutIn&&(u=l),u=i.round(u)),a.setRelative(s,Ii,u,h),0===i.zp0&&(s.xo=s.x,s.yo=s.y),a.touch(s),i.rp0=i.rp1=o}function ne(t,i){var r=i.stack,n=r.pop(),o=i.z2[n];e.DEBUG&&console.log(i.step,"GC["+t+"]",n),r.push(64*i.dpv.distance(o,Ii,t,!1))}function oe(t,i){var r=i.stack,n=r.pop(),o=r.pop(),s=i.z1[n],a=i.z0[o],h=i.dpv.distance(a,s,t,t);e.DEBUG&&console.log(i.step,"MD["+t+"]",n,o,"->",h),i.stack.push(Math.round(64*h))}function se(t,i){var r=i.stack,n=r.pop(),o=i.fv,s=i.pv,a=i.ppem,h=i.deltaBase+16*(t-1),l=i.deltaShift,u=i.z0;e.DEBUG&&console.log(i.step,"DELTAP["+t+"]",n,r);for(var c=0;c<n;c++){var p=r.pop(),d=r.pop();if(h+((240&d)>>4)===a){var f=(15&d)-8;f>=0&&f++,e.DEBUG&&console.log(i.step,"DELTAPFIX",p,"by",f*l);var m=u[p];o.setRelative(m,m,f*l,s)}}}function ae(t,i){var r=i.stack,n=r.pop();e.DEBUG&&console.log(i.step,"ROUND[]"),r.push(64*i.round(n/64))}function he(t,i){var r=i.stack,n=r.pop(),o=i.ppem,s=i.deltaBase+16*(t-1),a=i.deltaShift;e.DEBUG&&console.log(i.step,"DELTAC["+t+"]",n,r);for(var h=0;h<n;h++){var l=r.pop(),u=r.pop();if(s+((240&u)>>4)===o){var c=(15&u)-8;c>=0&&c++;var p=c*a;e.DEBUG&&console.log(i.step,"DELTACFIX",l,"by",p),i.cvt[l]+=p}}}function le(t,i){var r,n,o=i.stack,s=o.pop(),a=o.pop(),h=i.z2[s],l=i.z1[a];e.DEBUG&&console.log(i.step,"SDPVTL["+t+"]",s,a),t?(r=h.y-l.y,n=l.x-h.x):(r=l.x-h.x,n=l.y-h.y),i.dpv=Gt(r,n)}function ue(t,i){var r=i.stack,n=i.prog,o=i.ip;e.DEBUG&&console.log(i.step,"PUSHB["+t+"]");for(var s=0;s<t;s++)r.push(n[++o]);i.ip=o}function ce(t,i){var r=i.ip,n=i.prog,o=i.stack;e.DEBUG&&console.log(i.ip,"PUSHW["+t+"]");for(var s=0;s<t;s++){var a=n[++r]<<8|n[++r];32768&a&&(a=-(1+(65535^a))),o.push(a)}i.ip=r}function pe(t,i,r,n,o,s){var a,h,l,u,c=s.stack,p=t&&c.pop(),d=c.pop(),f=s.rp0,m=s.z0[f],y=s.z1[d],v=s.minDis,g=s.fv,_=s.dpv;h=a=_.distance(y,m,!0,!0),l=h>=0?1:-1,h=Math.abs(h),t&&(u=s.cvt[p],n&&Math.abs(h-u)<s.cvCutIn&&(h=u)),r&&h<v&&(h=v),n&&(h=s.round(h)),g.setRelative(y,m,l*h,_),g.touch(y),e.DEBUG&&console.log(s.step,(t?"MIRP[":"MDRP[")+(i?"M":"m")+(r?">":"_")+(n?"R":"_")+(0===o?"Gr":1===o?"Bl":2===o?"Wh":"")+"]",t?p+"("+s.cvt[p]+","+u+")":"",d,"(d =",a,"->",l*h,")"),s.rp1=s.rp0,s.rp2=d,i&&(s.rp0=d)}function de(t){(t=t||{}).empty||(Mt(t.familyName,"When creating a new Font object, familyName is required."),Mt(t.styleName,"When creating a new Font object, styleName is required."),Mt(t.unitsPerEm,"When creating a new Font object, unitsPerEm is required."),Mt(t.ascender,"When creating a new Font object, ascender is required."),Mt(t.descender,"When creating a new Font object, descender is required."),Mt(t.descender<0,"Descender should be negative (e.g. -512)."),this.names={fontFamily:{en:t.familyName||" "},fontSubfamily:{en:t.styleName||" "},fullName:{en:t.fullName||t.familyName+" "+t.styleName},postScriptName:{en:t.postScriptName||(t.familyName+t.styleName).replace(/\s/g,"")},designer:{en:t.designer||" "},designerURL:{en:t.designerURL||" "},manufacturer:{en:t.manufacturer||" "},manufacturerURL:{en:t.manufacturerURL||" "},license:{en:t.license||" "},licenseURL:{en:t.licenseURL||" "},version:{en:t.version||"Version 0.1"},description:{en:t.description||" "},copyright:{en:t.copyright||" "},trademark:{en:t.trademark||" "}},this.unitsPerEm=t.unitsPerEm||1e3,this.ascender=t.ascender,this.descender=t.descender,this.createdTimestamp=t.createdTimestamp,this.tables={os2:{usWeightClass:t.weightClass||this.usWeightClasses.MEDIUM,usWidthClass:t.widthClass||this.usWidthClasses.MEDIUM,fsSelection:t.fsSelection||this.fsSelectionValues.REGULAR}}),this.supported=!0,this.glyphs=new ei.GlyphSet(this,t.glyphs||[]),this.encoding=new U(this),this.position=new bt(this),this.substitution=new St(this),this.tables=this.tables||{},Object.defineProperty(this,"hinting",{get:function(){return this._hinting?this._hinting:"truetype"===this.outlinesFormat?this._hinting=new Ot(this):void 0}})}function fe(t,e){var i=JSON.stringify(t),r=256;for(var n in e){var o=parseInt(n);if(o&&!(o<256)){if(JSON.stringify(e[n])===i)return o;r<=o&&(r=o+1)}}return e[r]=t,r}function me(t,e,i){var r=fe(e.name,i);return[{name:"tag_"+t,type:"TAG",value:e.tag},{name:"minValue_"+t,type:"FIXED",value:e.minValue<<16},{name:"defaultValue_"+t,type:"FIXED",value:e.defaultValue<<16},{name:"maxValue_"+t,type:"FIXED",value:e.maxValue<<16},{name:"flags_"+t,type:"USHORT",value:0},{name:"nameID_"+t,type:"USHORT",value:r}]}function ye(t,e,i){var r={},n=new Ye.Parser(t,e);return r.tag=n.parseTag(),r.minValue=n.parseFixed(),r.defaultValue=n.parseFixed(),r.maxValue=n.parseFixed(),n.skip("uShort",1),r.name=i[n.parseUShort()]||{},r}function ve(t,e,i,r){for(var n=fe(e.name,r),o=[{name:"nameID_"+t,type:"USHORT",value:n},{name:"flags_"+t,type:"USHORT",value:0}],s=0;s<i.length;++s){var a=i[s].tag;o.push({name:"axis_"+t+" "+a,type:"FIXED",value:e.coordinates[a]<<16})}return o}function ge(t,e,i,r){var n={},o=new Ye.Parser(t,e);n.name=r[o.parseUShort()]||{},o.skip("uShort",1),n.coordinates={};for(var s=0;s<i.length;++s)n.coordinates[i[s].tag]=o.parseFixed();return n}function _e(e,i){t("fs").readFile(e,function(t,e){if(t)return i(t.message);i(null,Tt(e))})}function be(t,e){for(var i=[],r=12,n=0;n<e;n+=1){var o=Ye.getTag(t,r),s=Ye.getULong(t,r+4),a=Ye.getULong(t,r+8),h=Ye.getULong(t,r+12);i.push({tag:o,checksum:s,offset:a,length:h,compression:!1}),r+=16}return i}function Se(t,e){if("WOFF"===e.compression){var i=new Uint8Array(t.buffer,e.offset+2,e.compressedLength-2),r=new Uint8Array(e.length);if(Ie(i,r),r.byteLength!==e.length)throw new Error("Decompression error: "+e.tag+" decompressed length doesn't match recorded length");return{data:new DataView(r.buffer,0),offset:0}}return{data:t,offset:e.offset}}function xe(t){var e,i,r,n=new de({empty:!0}),o=new DataView(t,0),s=[],a=Ye.getTag(o,0);if(a===String.fromCharCode(0,1,0,0)||"true"===a||"typ1"===a)n.outlinesFormat="truetype",r=Ye.getUShort(o,4),s=be(o,r);else if("OTTO"===a)n.outlinesFormat="cff",r=Ye.getUShort(o,4),s=be(o,r);else{if("wOFF"!==a)throw new Error("Unsupported OpenType signature "+a);var h=Ye.getTag(o,4);if(h===String.fromCharCode(0,1,0,0))n.outlinesFormat="truetype";else{if("OTTO"!==h)throw new Error("Unsupported OpenType flavor "+a);n.outlinesFormat="cff"}r=Ye.getUShort(o,12),s=function(t,e){for(var i=[],r=44,n=0;n<e;n+=1){var o=Ye.getTag(t,r),s=Ye.getULong(t,r+4),a=Ye.getULong(t,r+8),h=Ye.getULong(t,r+12),l=void 0;l=a<h&&"WOFF",i.push({tag:o,offset:s,compression:l,compressedLength:a,length:h}),r+=20}return i}(o,r)}for(var l,u,c,p,d,f,m,y,v,g,_,b=0;b<r;b+=1){var S=s[b],x=void 0;switch(S.tag){case"cmap":x=Se(o,S),n.tables.cmap=Qe.parse(x.data,x.offset),n.encoding=new B(n.tables.cmap);break;case"cvt ":x=Se(o,S),_=new Ye.Parser(x.data,x.offset),n.tables.cvt=_.parseShortList(S.length/2);break;case"fvar":u=S;break;case"fpgm":x=Se(o,S),_=new Ye.Parser(x.data,x.offset),n.tables.fpgm=_.parseByteList(S.length);break;case"head":x=Se(o,S),n.tables.head=oi.parse(x.data,x.offset),n.unitsPerEm=n.tables.head.unitsPerEm,e=n.tables.head.indexToLocFormat;break;case"hhea":x=Se(o,S),n.tables.hhea=si.parse(x.data,x.offset),n.ascender=n.tables.hhea.ascender,n.descender=n.tables.hhea.descender,n.numberOfHMetrics=n.tables.hhea.numberOfHMetrics;break;case"hmtx":f=S;break;case"ltag":x=Se(o,S),i=hi.parse(x.data,x.offset);break;case"maxp":x=Se(o,S),n.tables.maxp=li.parse(x.data,x.offset),n.numGlyphs=n.tables.maxp.numGlyphs;break;case"name":v=S;break;case"OS/2":x=Se(o,S),n.tables.os2=_i.parse(x.data,x.offset);break;case"post":x=Se(o,S),n.tables.post=bi.parse(x.data,x.offset),n.glyphNames=new G(n.tables.post);break;case"prep":x=Se(o,S),_=new Ye.Parser(x.data,x.offset),n.tables.prep=_.parseByteList(S.length);break;case"glyf":c=S;break;case"loca":y=S;break;case"CFF ":l=S;break;case"kern":m=S;break;case"GPOS":p=S;break;case"GSUB":d=S;break;case"meta":g=S}}var w=Se(o,v);if(n.tables.name=vi.parse(w.data,w.offset,i),n.names=n.tables.name,c&&y){var T=0===e,A=Se(o,y),M=ji.parse(A.data,A.offset,n.numGlyphs,T),P=Se(o,c);n.glyphs=Ri.parse(P.data,P.offset,M,n)}else{if(!l)throw new Error("Font doesn't contain TrueType or CFF outlines.");var E=Se(o,l);ni.parse(E.data,E.offset,n)}var k=Se(o,f);if(ai.parse(k.data,k.offset,n.numberOfHMetrics,n.numGlyphs,n.glyphs),function(t){for(var e,i=t.tables.cmap.glyphIndexMap,r=Object.keys(i),n=0;n<r.length;n+=1){var o=r[n],s=i[o];(e=t.glyphs.get(s)).addUnicode(parseInt(o))}for(var a=0;a<t.glyphs.length;a+=1)e=t.glyphs.get(a),t.cffEncoding?t.isCIDFont?e.name="gid"+a:e.name=t.cffEncoding.charset[a]:t.glyphNames.names&&(e.name=t.glyphNames.glyphIndexToName(a))}(n),m){var C=Se(o,m);n.kerningPairs=Vi.parse(C.data,C.offset)}else n.kerningPairs={};if(p){var R=Se(o,p);n.tables.gpos=qi.parse(R.data,R.offset),n.position.init()}if(d){var O=Se(o,d);n.tables.gsub=Ti.parse(O.data,O.offset)}if(u){var L=Se(o,u);n.tables.fvar=Bi.parse(L.data,L.offset,n.names)}if(g){var F=Se(o,g);n.tables.meta=Ai.parse(F.data,F.offset),n.metas=n.tables.meta}return n}String.prototype.codePointAt||function(){var t=function(){try{var t={},e=Object.defineProperty,i=e(t,t,t)&&e}catch(t){}return i}(),e=function(t){if(null==this)throw TypeError();var e=String(this),i=e.length,r=t?Number(t):0;if(r!=r&&(r=0),!(r<0||r>=i)){var n,o=e.charCodeAt(r);return o>=55296&&o<=56319&&i>r+1&&(n=e.charCodeAt(r+1))>=56320&&n<=57343?1024*(o-55296)+n-56320+65536:o}};t?t(String.prototype,"codePointAt",{value:e,configurable:!0,writable:!0}):String.prototype.codePointAt=e}();var we=0,Te=-3,Ae=new i,Me=new i,Pe=new Uint8Array(30),Ee=new Uint16Array(30),ke=new Uint8Array(30),Ce=new Uint16Array(30),Re=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),Oe=new i,Le=new Uint8Array(320),Fe=new Uint16Array(16);(function(t,e){var i;for(i=0;i<7;++i)t.table[i]=0;for(t.table[7]=24,t.table[8]=152,t.table[9]=112,i=0;i<24;++i)t.trans[i]=256+i;for(i=0;i<144;++i)t.trans[24+i]=i;for(i=0;i<8;++i)t.trans[168+i]=280+i;for(i=0;i<112;++i)t.trans[176+i]=144+i;for(i=0;i<5;++i)e.table[i]=0;for(e.table[5]=32,i=0;i<32;++i)e.trans[i]=i})(Ae,Me),o(Pe,Ee,4,3),o(ke,Ce,2,1),Pe[28]=0,Ee[28]=258;var Ie=function(t,e){var i,r,o=new n(t,e);do{switch(i=a(o),h(o,2,0)){case 0:r=p(o);break;case 1:r=c(o,Ae,Me);break;case 2:u(o,o.ltree,o.dtree),r=c(o,o.ltree,o.dtree);break;default:r=Te}if(r!==we)throw new Error("Data error")}while(!i);return o.destLen<o.dest.length?"function"==typeof o.dest.slice?o.dest.slice(0,o.destLen):o.dest.subarray(0,o.destLen):o.dest};f.prototype.isEmpty=function(){return isNaN(this.x1)||isNaN(this.y1)||isNaN(this.x2)||isNaN(this.y2)},f.prototype.addPoint=function(t,e){"number"==typeof t&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=t,this.x2=t),t<this.x1&&(this.x1=t),t>this.x2&&(this.x2=t)),"number"==typeof e&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=e,this.y2=e),e<this.y1&&(this.y1=e),e>this.y2&&(this.y2=e))},f.prototype.addX=function(t){this.addPoint(t,null)},f.prototype.addY=function(t){this.addPoint(null,t)},f.prototype.addBezier=function(t,e,i,r,n,o,s,a){var h=this,l=[t,e],u=[i,r],c=[n,o],p=[s,a];this.addPoint(t,e),this.addPoint(s,a);for(var f=0;f<=1;f++){var m=6*l[f]-12*u[f]+6*c[f],y=-3*l[f]+9*u[f]-9*c[f]+3*p[f],v=3*u[f]-3*l[f];if(0!==y){var g=Math.pow(m,2)-4*v*y;if(!(g<0)){var _=(-m+Math.sqrt(g))/(2*y);0<_&&_<1&&(0===f&&h.addX(d(l[f],u[f],c[f],p[f],_)),1===f&&h.addY(d(l[f],u[f],c[f],p[f],_)));var b=(-m-Math.sqrt(g))/(2*y);0<b&&b<1&&(0===f&&h.addX(d(l[f],u[f],c[f],p[f],b)),1===f&&h.addY(d(l[f],u[f],c[f],p[f],b)))}}else{if(0===m)continue;var S=-v/m;0<S&&S<1&&(0===f&&h.addX(d(l[f],u[f],c[f],p[f],S)),1===f&&h.addY(d(l[f],u[f],c[f],p[f],S)))}}},f.prototype.addQuad=function(t,e,i,r,n,o){var s=t+2/3*(i-t),a=e+2/3*(r-e),h=s+1/3*(n-t),l=a+1/3*(o-e);this.addBezier(t,e,s,a,h,l,n,o)},m.prototype.moveTo=function(t,e){this.commands.push({type:"M",x:t,y:e})},m.prototype.lineTo=function(t,e){this.commands.push({type:"L",x:t,y:e})},m.prototype.curveTo=m.prototype.bezierCurveTo=function(t,e,i,r,n,o){this.commands.push({type:"C",x1:t,y1:e,x2:i,y2:r,x:n,y:o})},m.prototype.quadTo=m.prototype.quadraticCurveTo=function(t,e,i,r){this.commands.push({type:"Q",x1:t,y1:e,x:i,y:r})},m.prototype.close=m.prototype.closePath=function(){this.commands.push({type:"Z"})},m.prototype.extend=function(t){if(t.commands)t=t.commands;else if(t instanceof f){var e=t;return this.moveTo(e.x1,e.y1),this.lineTo(e.x2,e.y1),this.lineTo(e.x2,e.y2),this.lineTo(e.x1,e.y2),void this.close()}Array.prototype.push.apply(this.commands,t)},m.prototype.getBoundingBox=function(){for(var t=new f,e=0,i=0,r=0,n=0,o=0;o<this.commands.length;o++){var s=this.commands[o];switch(s.type){case"M":t.addPoint(s.x,s.y),e=r=s.x,i=n=s.y;break;case"L":t.addPoint(s.x,s.y),r=s.x,n=s.y;break;case"Q":t.addQuad(r,n,s.x1,s.y1,s.x,s.y),r=s.x,n=s.y;break;case"C":t.addBezier(r,n,s.x1,s.y1,s.x2,s.y2,s.x,s.y),r=s.x,n=s.y;break;case"Z":r=e,n=i;break;default:throw new Error("Unexpected path command "+s.type)}}return t.isEmpty()&&t.addPoint(0,0),t},m.prototype.draw=function(t){t.beginPath();for(var e=0;e<this.commands.length;e+=1){var i=this.commands[e];"M"===i.type?t.moveTo(i.x,i.y):"L"===i.type?t.lineTo(i.x,i.y):"C"===i.type?t.bezierCurveTo(i.x1,i.y1,i.x2,i.y2,i.x,i.y):"Q"===i.type?t.quadraticCurveTo(i.x1,i.y1,i.x,i.y):"Z"===i.type&&t.closePath()}this.fill&&(t.fillStyle=this.fill,t.fill()),this.stroke&&(t.strokeStyle=this.stroke,t.lineWidth=this.strokeWidth,t.stroke())},m.prototype.toPathData=function(t){function e(e){return Math.round(e)===e?""+Math.round(e):e.toFixed(t)}function i(){for(var t=arguments,i="",r=0;r<arguments.length;r+=1){var n=t[r];n>=0&&r>0&&(i+=" "),i+=e(n)}return i}t=void 0!==t?t:2;for(var r="",n=0;n<this.commands.length;n+=1){var o=this.commands[n];"M"===o.type?r+="M"+i(o.x,o.y):"L"===o.type?r+="L"+i(o.x,o.y):"C"===o.type?r+="C"+i(o.x1,o.y1,o.x2,o.y2,o.x,o.y):"Q"===o.type?r+="Q"+i(o.x1,o.y1,o.x,o.y):"Z"===o.type&&(r+="Z")}return r},m.prototype.toSVG=function(t){var e='<path d="';return e+=this.toPathData(t),e+='"',this.fill&&"black"!==this.fill&&(null===this.fill?e+=' fill="none"':e+=' fill="'+this.fill+'"'),this.stroke&&(e+=' stroke="'+this.stroke+'" stroke-width="'+this.strokeWidth+'"'),e+="/>"},m.prototype.toDOMElement=function(t){var e=this.toPathData(t),i=document.createElementNS("http://www.w3.org/2000/svg","path");return i.setAttribute("d",e),i};var De={fail:y,argument:v,assert:v},Ue=2147483648,Be={},Ne={},Ge={};Ne.BYTE=function(t){return De.argument(t>=0&&t<=255,"Byte value should be between 0 and 255."),[t]},Ge.BYTE=g(1),Ne.CHAR=function(t){return[t.charCodeAt(0)]},Ge.CHAR=g(1),Ne.CHARARRAY=function(t){for(var e=[],i=0;i<t.length;i+=1)e[i]=t.charCodeAt(i);return e},Ge.CHARARRAY=function(t){return t.length},Ne.USHORT=function(t){return[t>>8&255,255&t]},Ge.USHORT=g(2),Ne.SHORT=function(t){return t>=32768&&(t=-(65536-t)),[t>>8&255,255&t]},Ge.SHORT=g(2),Ne.UINT24=function(t){return[t>>16&255,t>>8&255,255&t]},Ge.UINT24=g(3),Ne.ULONG=function(t){return[t>>24&255,t>>16&255,t>>8&255,255&t]},Ge.ULONG=g(4),Ne.LONG=function(t){return t>=Ue&&(t=-(2*Ue-t)),[t>>24&255,t>>16&255,t>>8&255,255&t]},Ge.LONG=g(4),Ne.FIXED=Ne.ULONG,Ge.FIXED=Ge.ULONG,Ne.FWORD=Ne.SHORT,Ge.FWORD=Ge.SHORT,Ne.UFWORD=Ne.USHORT,Ge.UFWORD=Ge.USHORT,Ne.LONGDATETIME=function(t){return[0,0,0,0,t>>24&255,t>>16&255,t>>8&255,255&t]},Ge.LONGDATETIME=g(8),Ne.TAG=function(t){return De.argument(4===t.length,"Tag should be exactly 4 ASCII characters."),[t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2),t.charCodeAt(3)]},Ge.TAG=g(4),Ne.Card8=Ne.BYTE,Ge.Card8=Ge.BYTE,Ne.Card16=Ne.USHORT,Ge.Card16=Ge.USHORT,Ne.OffSize=Ne.BYTE,Ge.OffSize=Ge.BYTE,Ne.SID=Ne.USHORT,Ge.SID=Ge.USHORT,Ne.NUMBER=function(t){return t>=-107&&t<=107?[t+139]:t>=108&&t<=1131?[247+((t-=108)>>8),255&t]:t>=-1131&&t<=-108?[251+((t=-t-108)>>8),255&t]:t>=-32768&&t<=32767?Ne.NUMBER16(t):Ne.NUMBER32(t)},Ge.NUMBER=function(t){return Ne.NUMBER(t).length},Ne.NUMBER16=function(t){return[28,t>>8&255,255&t]},Ge.NUMBER16=g(3),Ne.NUMBER32=function(t){return[29,t>>24&255,t>>16&255,t>>8&255,255&t]},Ge.NUMBER32=g(5),Ne.REAL=function(t){var e=t.toString(),i=/\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(e);if(i){var r=parseFloat("1e"+((i[2]?+i[2]:0)+i[1].length));e=(Math.round(t*r)/r).toString()}for(var n="",o=0,s=e.length;o<s;o+=1){var a=e[o];n+="e"===a?"-"===e[++o]?"c":"b":"."===a?"a":"-"===a?"e":a}for(var h=[30],l=0,u=(n+=1&n.length?"f":"ff").length;l<u;l+=2)h.push(parseInt(n.substr(l,2),16));return h},Ge.REAL=function(t){return Ne.REAL(t).length},Ne.NAME=Ne.CHARARRAY,Ge.NAME=Ge.CHARARRAY,Ne.STRING=Ne.CHARARRAY,Ge.STRING=Ge.CHARARRAY,Be.UTF8=function(t,e,i){for(var r=[],n=i,o=0;o<n;o++,e+=1)r[o]=t.getUint8(e);return String.fromCharCode.apply(null,r)},Be.UTF16=function(t,e,i){for(var r=[],n=i/2,o=0;o<n;o++,e+=2)r[o]=t.getUint16(e);return String.fromCharCode.apply(null,r)},Ne.UTF16=function(t){for(var e=[],i=0;i<t.length;i+=1){var r=t.charCodeAt(i);e[e.length]=r>>8&255,e[e.length]=255&r}return e},Ge.UTF16=function(t){return 2*t.length};var qe={"x-mac-croatian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ","x-mac-cyrillic":"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю","x-mac-gaelic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ","x-mac-greek":"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ­","x-mac-icelandic":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-inuit":"ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł","x-mac-ce":"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ",macintosh:"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-romanian":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ","x-mac-turkish":"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ"};Be.MACSTRING=function(t,e,i,r){var n=qe[r];if(void 0!==n){for(var o="",s=0;s<i;s++){var a=t.getUint8(e+s);o+=a<=127?String.fromCharCode(a):n[127&a]}return o}};var Ve,je="function"==typeof WeakMap&&new WeakMap;Ne.MACSTRING=function(t,e){var i=function(t){if(!Ve)for(var e in Ve={},qe)Ve[e]=new String(e);var i=Ve[t];if(void 0!==i){if(je){var r=je.get(i);if(void 0!==r)return r}var n=qe[t];if(void 0!==n){for(var o={},s=0;s<n.length;s++)o[n.charCodeAt(s)]=s+128;return je&&je.set(i,o),o}}}(e);if(void 0!==i){for(var r=[],n=0;n<t.length;n++){var o=t.charCodeAt(n);if(o>=128&&void 0===(o=i[o]))return;r[n]=o}return r}},Ge.MACSTRING=function(t,e){var i=Ne.MACSTRING(t,e);return void 0!==i?i.length:0},Ne.VARDELTAS=function(t){for(var e=0,i=[];e<t.length;){var r=t[e];e=0===r?b(t,e,i):r>=-128&&r<=127?S(t,e,i):x(t,e,i)}return i},Ne.INDEX=function(t){for(var e=1,i=[e],r=[],n=0;n<t.length;n+=1){var o=Ne.OBJECT(t[n]);Array.prototype.push.apply(r,o),e+=o.length,i.push(e)}if(0===r.length)return[0,0];for(var s=[],a=1+Math.floor(Math.log(e)/Math.log(2))/8|0,h=[void 0,Ne.BYTE,Ne.USHORT,Ne.UINT24,Ne.ULONG][a],l=0;l<i.length;l+=1){var u=h(i[l]);Array.prototype.push.apply(s,u)}return Array.prototype.concat(Ne.Card16(t.length),Ne.OffSize(a),s,r)},Ge.INDEX=function(t){return Ne.INDEX(t).length},Ne.DICT=function(t){for(var e=[],i=Object.keys(t),r=i.length,n=0;n<r;n+=1){var o=parseInt(i[n],0),s=t[o];e=(e=e.concat(Ne.OPERAND(s.value,s.type))).concat(Ne.OPERATOR(o))}return e},Ge.DICT=function(t){return Ne.DICT(t).length},Ne.OPERATOR=function(t){return t<1200?[t]:[12,t-1200]},Ne.OPERAND=function(t,e){var i=[];if(Array.isArray(e))for(var r=0;r<e.length;r+=1)De.argument(t.length===e.length,"Not enough arguments given for type"+e),i=i.concat(Ne.OPERAND(t[r],e[r]));else if("SID"===e)i=i.concat(Ne.NUMBER(t));else if("offset"===e)i=i.concat(Ne.NUMBER32(t));else if("number"===e)i=i.concat(Ne.NUMBER(t));else{if("real"!==e)throw new Error("Unknown operand type "+e);i=i.concat(Ne.REAL(t))}return i},Ne.OP=Ne.BYTE,Ge.OP=Ge.BYTE;var ze="function"==typeof WeakMap&&new WeakMap;Ne.CHARSTRING=function(t){if(ze){var e=ze.get(t);if(void 0!==e)return e}for(var i=[],r=t.length,n=0;n<r;n+=1){var o=t[n];i=i.concat(Ne[o.type](o.value))}return ze&&ze.set(t,i),i},Ge.CHARSTRING=function(t){return Ne.CHARSTRING(t).length},Ne.OBJECT=function(t){var e=Ne[t.type];return De.argument(void 0!==e,"No encoding function for type "+t.type),e(t.value)},Ge.OBJECT=function(t){var e=Ge[t.type];return De.argument(void 0!==e,"No sizeOf function for type "+t.type),e(t.value)},Ne.TABLE=function(t){for(var e=[],i=t.fields.length,r=[],n=[],o=0;o<i;o+=1){var s=t.fields[o],a=Ne[s.type];De.argument(void 0!==a,"No encoding function for field type "+s.type+" ("+s.name+")");var h=t[s.name];void 0===h&&(h=s.value);var l=a(h);"TABLE"===s.type?(n.push(e.length),e=e.concat([0,0]),r.push(l)):e=e.concat(l)}for(var u=0;u<r.length;u+=1){var c=n[u],p=e.length;De.argument(p<65536,"Table "+t.tableName+" too big."),e[c]=p>>8,e[c+1]=255&p,e=e.concat(r[u])}return e},Ge.TABLE=function(t){for(var e=0,i=t.fields.length,r=0;r<i;r+=1){var n=t.fields[r],o=Ge[n.type];De.argument(void 0!==o,"No sizeOf function for field type "+n.type+" ("+n.name+")");var s=t[n.name];void 0===s&&(s=n.value),e+=o(s),"TABLE"===n.type&&(e+=2)}return e},Ne.RECORD=Ne.TABLE,Ge.RECORD=Ge.TABLE,Ne.LITERAL=function(t){return t},Ge.LITERAL=function(t){return t.length},w.prototype.encode=function(){return Ne.TABLE(this)},w.prototype.sizeOf=function(){return Ge.TABLE(this)},P.prototype=Object.create(w.prototype),P.prototype.constructor=P,E.prototype=Object.create(w.prototype),E.prototype.constructor=E,k.prototype=Object.create(w.prototype),k.prototype.constructor=k,C.prototype=Object.create(w.prototype),C.prototype.constructor=C;var We={Table:w,Record:w,Coverage:P,ScriptList:E,FeatureList:k,LookupList:C,ushortList:T,tableList:A,recordList:M},He={byte:1,uShort:2,short:2,uLong:4,fixed:4,longDateTime:8,tag:4};I.prototype.parseByte=function(){var t=this.data.getUint8(this.offset+this.relativeOffset);return this.relativeOffset+=1,t},I.prototype.parseChar=function(){var t=this.data.getInt8(this.offset+this.relativeOffset);return this.relativeOffset+=1,t},I.prototype.parseCard8=I.prototype.parseByte,I.prototype.parseUShort=function(){var t=this.data.getUint16(this.offset+this.relativeOffset);return this.relativeOffset+=2,t},I.prototype.parseCard16=I.prototype.parseUShort,I.prototype.parseSID=I.prototype.parseUShort,I.prototype.parseOffset16=I.prototype.parseUShort,I.prototype.parseShort=function(){var t=this.data.getInt16(this.offset+this.relativeOffset);return this.relativeOffset+=2,t},I.prototype.parseF2Dot14=function(){var t=this.data.getInt16(this.offset+this.relativeOffset)/16384;return this.relativeOffset+=2,t},I.prototype.parseULong=function(){var t=L(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,t},I.prototype.parseOffset32=I.prototype.parseULong,I.prototype.parseFixed=function(){var t=F(this.data,this.offset+this.relativeOffset);return this.relativeOffset+=4,t},I.prototype.parseString=function(t){var e=this.data,i=this.offset+this.relativeOffset,r="";this.relativeOffset+=t;for(var n=0;n<t;n++)r+=String.fromCharCode(e.getUint8(i+n));return r},I.prototype.parseTag=function(){return this.parseString(4)},I.prototype.parseLongDateTime=function(){var t=L(this.data,this.offset+this.relativeOffset+4);return t-=2082844800,this.relativeOffset+=8,t},I.prototype.parseVersion=function(t){var e=O(this.data,this.offset+this.relativeOffset),i=O(this.data,this.offset+this.relativeOffset+2);return this.relativeOffset+=4,void 0===t&&(t=4096),e+i/t/10},I.prototype.skip=function(t,e){void 0===e&&(e=1),this.relativeOffset+=He[t]*e},I.prototype.parseULongList=function(t){void 0===t&&(t=this.parseULong());for(var e=new Array(t),i=this.data,r=this.offset+this.relativeOffset,n=0;n<t;n++)e[n]=i.getUint32(r),r+=4;return this.relativeOffset+=4*t,e},I.prototype.parseOffset16List=I.prototype.parseUShortList=function(t){void 0===t&&(t=this.parseUShort());for(var e=new Array(t),i=this.data,r=this.offset+this.relativeOffset,n=0;n<t;n++)e[n]=i.getUint16(r),r+=2;return this.relativeOffset+=2*t,e},I.prototype.parseShortList=function(t){for(var e=new Array(t),i=this.data,r=this.offset+this.relativeOffset,n=0;n<t;n++)e[n]=i.getInt16(r),r+=2;return this.relativeOffset+=2*t,e},I.prototype.parseByteList=function(t){for(var e=new Array(t),i=this.data,r=this.offset+this.relativeOffset,n=0;n<t;n++)e[n]=i.getUint8(r++);return this.relativeOffset+=t,e},I.prototype.parseList=function(t,e){e||(e=t,t=this.parseUShort());for(var i=new Array(t),r=0;r<t;r++)i[r]=e.call(this);return i},I.prototype.parseList32=function(t,e){e||(e=t,t=this.parseULong());for(var i=new Array(t),r=0;r<t;r++)i[r]=e.call(this);return i},I.prototype.parseRecordList=function(t,e){e||(e=t,t=this.parseUShort());for(var i=new Array(t),r=Object.keys(e),n=0;n<t;n++){for(var o={},s=0;s<r.length;s++){var a=r[s],h=e[a];o[a]=h.call(this)}i[n]=o}return i},I.prototype.parseRecordList32=function(t,e){e||(e=t,t=this.parseULong());for(var i=new Array(t),r=Object.keys(e),n=0;n<t;n++){for(var o={},s=0;s<r.length;s++){var a=r[s],h=e[a];o[a]=h.call(this)}i[n]=o}return i},I.prototype.parseStruct=function(t){if("function"==typeof t)return t.call(this);for(var e=Object.keys(t),i={},r=0;r<e.length;r++){var n=e[r],o=t[n];i[n]=o.call(this)}return i},I.prototype.parseValueRecord=function(t){if(void 0===t&&(t=this.parseUShort()),0!==t){var e={};return 1&t&&(e.xPlacement=this.parseShort()),2&t&&(e.yPlacement=this.parseShort()),4&t&&(e.xAdvance=this.parseShort()),8&t&&(e.yAdvance=this.parseShort()),16&t&&(e.xPlaDevice=void 0,this.parseShort()),32&t&&(e.yPlaDevice=void 0,this.parseShort()),64&t&&(e.xAdvDevice=void 0,this.parseShort()),128&t&&(e.yAdvDevice=void 0,this.parseShort()),e}},I.prototype.parseValueRecordList=function(){for(var t=this.parseUShort(),e=this.parseUShort(),i=new Array(e),r=0;r<e;r++)i[r]=this.parseValueRecord(t);return i},I.prototype.parsePointer=function(t){var e=this.parseOffset16();if(e>0)return new I(this.data,this.offset+e).parseStruct(t)},I.prototype.parsePointer32=function(t){var e=this.parseOffset32();if(e>0)return new I(this.data,this.offset+e).parseStruct(t)},I.prototype.parseListOfLists=function(t){for(var e=this,i=this.parseOffset16List(),r=i.length,n=this.relativeOffset,o=new Array(r),s=0;s<r;s++){var a=i[s];if(0!==a)if(e.relativeOffset=a,t){for(var h=e.parseOffset16List(),l=new Array(h.length),u=0;u<h.length;u++)e.relativeOffset=a+h[u],l[u]=t.call(e);o[s]=l}else o[s]=e.parseUShortList();else o[s]=void 0}return this.relativeOffset=n,o},I.prototype.parseCoverage=function(){var t=this,e=this.offset+this.relativeOffset,i=this.parseUShort(),r=this.parseUShort();if(1===i)return{format:1,glyphs:this.parseUShortList(r)};if(2===i){for(var n=new Array(r),o=0;o<r;o++)n[o]={start:t.parseUShort(),end:t.parseUShort(),index:t.parseUShort()};return{format:2,ranges:n}}throw new Error("0x"+e.toString(16)+": Coverage format must be 1 or 2.")},I.prototype.parseClassDef=function(){var t=this.offset+this.relativeOffset,e=this.parseUShort();if(1===e)return{format:1,startGlyph:this.parseUShort(),classes:this.parseUShortList()};if(2===e)return{format:2,ranges:this.parseRecordList({start:I.uShort,end:I.uShort,classId:I.uShort})};throw new Error("0x"+t.toString(16)+": ClassDef format must be 1 or 2.")},I.list=function(t,e){return function(){return this.parseList(t,e)}},I.list32=function(t,e){return function(){return this.parseList32(t,e)}},I.recordList=function(t,e){return function(){return this.parseRecordList(t,e)}},I.recordList32=function(t,e){return function(){return this.parseRecordList32(t,e)}},I.pointer=function(t){return function(){return this.parsePointer(t)}},I.pointer32=function(t){return function(){return this.parsePointer32(t)}},I.tag=I.prototype.parseTag,I.byte=I.prototype.parseByte,I.uShort=I.offset16=I.prototype.parseUShort,I.uShortList=I.prototype.parseUShortList,I.uLong=I.offset32=I.prototype.parseULong,I.uLongList=I.prototype.parseULongList,I.struct=I.prototype.parseStruct,I.coverage=I.prototype.parseCoverage,I.classDef=I.prototype.parseClassDef;var Xe={reserved:I.uShort,reqFeatureIndex:I.uShort,featureIndexes:I.uShortList};I.prototype.parseScriptList=function(){return this.parsePointer(I.recordList({tag:I.tag,script:I.pointer({defaultLangSys:I.pointer(Xe),langSysRecords:I.recordList({tag:I.tag,langSys:I.pointer(Xe)})})}))||[]},I.prototype.parseFeatureList=function(){return this.parsePointer(I.recordList({tag:I.tag,feature:I.pointer({featureParams:I.offset16,lookupListIndexes:I.uShortList})}))||[]},I.prototype.parseLookupList=function(t){return this.parsePointer(I.list(I.pointer(function(){var e=this.parseUShort();De.argument(1<=e&&e<=9,"GPOS/GSUB lookup type "+e+" unknown.");var i=this.parseUShort(),r=16&i;return{lookupType:e,lookupFlag:i,subtables:this.parseList(I.pointer(t[e])),markFilteringSet:r?this.parseUShort():void 0}})))||[]},I.prototype.parseFeatureVariationsList=function(){return this.parsePointer32(function(){var t=this.parseUShort(),e=this.parseUShort();return De.argument(1===t&&e<1,"GPOS/GSUB feature variations table unknown."),this.parseRecordList32({conditionSetOffset:I.offset32,featureTableSubstitutionOffset:I.offset32})})||[]};var Ye={getByte:R,getCard8:R,getUShort:O,getCard16:O,getShort:function(t,e){return t.getInt16(e,!1)},getULong:L,getFixed:F,getTag:function(t,e){for(var i="",r=e;r<e+4;r+=1)i+=String.fromCharCode(t.getInt8(r));return i},getOffset:function(t,e,i){for(var r=0,n=0;n<i;n+=1)r<<=8,r+=t.getUint8(e+n);return r},getBytes:function(t,e,i){for(var r=[],n=e;n<i;n+=1)r.push(t.getUint8(n));return r},bytesToString:function(t){for(var e="",i=0;i<t.length;i+=1)e+=String.fromCharCode(t[i]);return e},Parser:I},Qe={parse:function(t,e){var i={};i.version=Ye.getUShort(t,e),De.argument(0===i.version,"cmap table version should be 0."),i.numTables=Ye.getUShort(t,e+2);for(var r=-1,n=i.numTables-1;n>=0;n-=1){var o=Ye.getUShort(t,e+4+8*n),s=Ye.getUShort(t,e+4+8*n+2);if(3===o&&(0===s||1===s||10===s)||0===o&&(0===s||1===s||2===s||3===s||4===s)){r=Ye.getULong(t,e+4+8*n+4);break}}if(-1===r)throw new Error("No valid cmap sub-tables found.");var a=new Ye.Parser(t,e+r);if(i.format=a.parseUShort(),12===i.format)!function(t,e){var i;e.parseUShort(),t.length=e.parseULong(),t.language=e.parseULong(),t.groupCount=i=e.parseULong(),t.glyphIndexMap={};for(var r=0;r<i;r+=1)for(var n=e.parseULong(),o=e.parseULong(),s=e.parseULong(),a=n;a<=o;a+=1)t.glyphIndexMap[a]=s,s++}(i,a);else{if(4!==i.format)throw new Error("Only format 4 and 12 cmap tables are supported (found format "+i.format+").");!function(t,e,i,r,n){var o;t.length=e.parseUShort(),t.language=e.parseUShort(),t.segCount=o=e.parseUShort()>>1,e.skip("uShort",3),t.glyphIndexMap={};for(var s=new Ye.Parser(i,r+n+14),a=new Ye.Parser(i,r+n+16+2*o),h=new Ye.Parser(i,r+n+16+4*o),l=new Ye.Parser(i,r+n+16+6*o),u=r+n+16+8*o,c=0;c<o-1;c+=1)for(var p=void 0,d=s.parseUShort(),f=a.parseUShort(),m=h.parseShort(),y=l.parseUShort(),v=f;v<=d;v+=1)0!==y?(u=l.offset+l.relativeOffset-2,u+=y,u+=2*(v-f),0!==(p=Ye.getUShort(i,u))&&(p=p+m&65535)):p=v+m&65535,t.glyphIndexMap[v]=p}(i,a,t,e,r)}return i},make:function(t){var e,i=!0;for(e=t.length-1;e>0;e-=1)if(t.get(e).unicode>65535){console.log("Adding CMAP format 12 (needed!)"),i=!1;break}var r=[{name:"version",type:"USHORT",value:0},{name:"numTables",type:"USHORT",value:i?1:2},{name:"platformID",type:"USHORT",value:3},{name:"encodingID",type:"USHORT",value:1},{name:"offset",type:"ULONG",value:i?12:20}];i||(r=r.concat([{name:"cmap12PlatformID",type:"USHORT",value:3},{name:"cmap12EncodingID",type:"USHORT",value:10},{name:"cmap12Offset",type:"ULONG",value:0}])),r=r.concat([{name:"format",type:"USHORT",value:4},{name:"cmap4Length",type:"USHORT",value:0},{name:"language",type:"USHORT",value:0},{name:"segCountX2",type:"USHORT",value:0},{name:"searchRange",type:"USHORT",value:0},{name:"entrySelector",type:"USHORT",value:0},{name:"rangeShift",type:"USHORT",value:0}]);var n=new We.Table("cmap",r);for(n.segments=[],e=0;e<t.length;e+=1){for(var o=t.get(e),s=0;s<o.unicodes.length;s+=1)D(n,o.unicodes[s],e);n.segments=n.segments.sort(function(t,e){return t.start-e.start})}!function(t){t.segments.push({end:65535,start:65535,delta:1,offset:0})}(n);var a=n.segments.length,h=0,l=[],u=[],c=[],p=[],d=[],f=[];for(e=0;e<a;e+=1){var m=n.segments[e];m.end<=65535&&m.start<=65535?(l=l.concat({name:"end_"+e,type:"USHORT",value:m.end}),u=u.concat({name:"start_"+e,type:"USHORT",value:m.start}),c=c.concat({name:"idDelta_"+e,type:"SHORT",value:m.delta}),p=p.concat({name:"idRangeOffset_"+e,type:"USHORT",value:m.offset}),void 0!==m.glyphId&&(d=d.concat({name:"glyph_"+e,type:"USHORT",value:m.glyphId}))):h+=1,i||void 0===m.glyphIndex||(f=(f=(f=f.concat({name:"cmap12Start_"+e,type:"ULONG",value:m.start})).concat({name:"cmap12End_"+e,type:"ULONG",value:m.end})).concat({name:"cmap12Glyph_"+e,type:"ULONG",value:m.glyphIndex}))}if(n.segCountX2=2*(a-h),n.searchRange=2*Math.pow(2,Math.floor(Math.log(a-h)/Math.log(2))),n.entrySelector=Math.log(n.searchRange/2)/Math.log(2),n.rangeShift=n.segCountX2-n.searchRange,n.fields=n.fields.concat(l),n.fields.push({name:"reservedPad",type:"USHORT",value:0}),n.fields=n.fields.concat(u),n.fields=n.fields.concat(c),n.fields=n.fields.concat(p),n.fields=n.fields.concat(d),n.cmap4Length=14+2*l.length+2+2*u.length+2*c.length+2*p.length+2*d.length,!i){var y=16+4*f.length;n.cmap12Offset=20+n.cmap4Length,n.fields=n.fields.concat([{name:"cmap12Format",type:"USHORT",value:12},{name:"cmap12Reserved",type:"USHORT",value:0},{name:"cmap12Length",type:"ULONG",value:y},{name:"cmap12Language",type:"ULONG",value:0},{name:"cmap12nGroups",type:"ULONG",value:f.length/3}]),n.fields=n.fields.concat(f)}return n}},Ze=[".notdef","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","endash","dagger","daggerdbl","periodcentered","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","questiondown","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","ring","cedilla","hungarumlaut","ogonek","caron","emdash","AE","ordfeminine","Lslash","Oslash","OE","ordmasculine","ae","dotlessi","lslash","oslash","oe","germandbls","onesuperior","logicalnot","mu","trademark","Eth","onehalf","plusminus","Thorn","onequarter","divide","brokenbar","degree","thorn","threequarters","twosuperior","registered","minus","eth","multiply","threesuperior","copyright","Aacute","Acircumflex","Adieresis","Agrave","Aring","Atilde","Ccedilla","Eacute","Ecircumflex","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Ntilde","Oacute","Ocircumflex","Odieresis","Ograve","Otilde","Scaron","Uacute","Ucircumflex","Udieresis","Ugrave","Yacute","Ydieresis","Zcaron","aacute","acircumflex","adieresis","agrave","aring","atilde","ccedilla","eacute","ecircumflex","edieresis","egrave","iacute","icircumflex","idieresis","igrave","ntilde","oacute","ocircumflex","odieresis","ograve","otilde","scaron","uacute","ucircumflex","udieresis","ugrave","yacute","ydieresis","zcaron","exclamsmall","Hungarumlautsmall","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","266 ff","onedotenleader","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","commasuperior","threequartersemdash","periodsuperior","questionsmall","asuperior","bsuperior","centsuperior","dsuperior","esuperior","isuperior","lsuperior","msuperior","nsuperior","osuperior","rsuperior","ssuperior","tsuperior","ff","ffi","ffl","parenleftinferior","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","exclamdownsmall","centoldstyle","Lslashsmall","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","Dotaccentsmall","Macronsmall","figuredash","hypheninferior","Ogoneksmall","Ringsmall","Cedillasmall","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","zerosuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall","001.000","001.001","001.002","001.003","Black","Bold","Book","Light","Medium","Regular","Roman","Semibold"],Je=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quoteright","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","quoteleft","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdown","cent","sterling","fraction","yen","florin","section","currency","quotesingle","quotedblleft","guillemotleft","guilsinglleft","guilsinglright","fi","fl","","endash","dagger","daggerdbl","periodcentered","","paragraph","bullet","quotesinglbase","quotedblbase","quotedblright","guillemotright","ellipsis","perthousand","","questiondown","","grave","acute","circumflex","tilde","macron","breve","dotaccent","dieresis","","ring","cedilla","","hungarumlaut","ogonek","caron","emdash","","","","","","","","","","","","","","","","","AE","","ordfeminine","","","","","Lslash","Oslash","OE","ordmasculine","","","","","","ae","","","","dotlessi","","","lslash","oslash","oe","germandbls"],Ke=["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","space","exclamsmall","Hungarumlautsmall","","dollaroldstyle","dollarsuperior","ampersandsmall","Acutesmall","parenleftsuperior","parenrightsuperior","twodotenleader","onedotenleader","comma","hyphen","period","fraction","zerooldstyle","oneoldstyle","twooldstyle","threeoldstyle","fouroldstyle","fiveoldstyle","sixoldstyle","sevenoldstyle","eightoldstyle","nineoldstyle","colon","semicolon","commasuperior","threequartersemdash","periodsuperior","questionsmall","","asuperior","bsuperior","centsuperior","dsuperior","esuperior","","","isuperior","","","lsuperior","msuperior","nsuperior","osuperior","","","rsuperior","ssuperior","tsuperior","","ff","fi","fl","ffi","ffl","parenleftinferior","","parenrightinferior","Circumflexsmall","hyphensuperior","Gravesmall","Asmall","Bsmall","Csmall","Dsmall","Esmall","Fsmall","Gsmall","Hsmall","Ismall","Jsmall","Ksmall","Lsmall","Msmall","Nsmall","Osmall","Psmall","Qsmall","Rsmall","Ssmall","Tsmall","Usmall","Vsmall","Wsmall","Xsmall","Ysmall","Zsmall","colonmonetary","onefitted","rupiah","Tildesmall","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","exclamdownsmall","centoldstyle","Lslashsmall","","","Scaronsmall","Zcaronsmall","Dieresissmall","Brevesmall","Caronsmall","","Dotaccentsmall","","","Macronsmall","","","figuredash","hypheninferior","","","Ogoneksmall","Ringsmall","Cedillasmall","","","","onequarter","onehalf","threequarters","questiondownsmall","oneeighth","threeeighths","fiveeighths","seveneighths","onethird","twothirds","","","zerosuperior","onesuperior","twosuperior","threesuperior","foursuperior","fivesuperior","sixsuperior","sevensuperior","eightsuperior","ninesuperior","zeroinferior","oneinferior","twoinferior","threeinferior","fourinferior","fiveinferior","sixinferior","seveninferior","eightinferior","nineinferior","centinferior","dollarinferior","periodinferior","commainferior","Agravesmall","Aacutesmall","Acircumflexsmall","Atildesmall","Adieresissmall","Aringsmall","AEsmall","Ccedillasmall","Egravesmall","Eacutesmall","Ecircumflexsmall","Edieresissmall","Igravesmall","Iacutesmall","Icircumflexsmall","Idieresissmall","Ethsmall","Ntildesmall","Ogravesmall","Oacutesmall","Ocircumflexsmall","Otildesmall","Odieresissmall","OEsmall","Oslashsmall","Ugravesmall","Uacutesmall","Ucircumflexsmall","Udieresissmall","Yacutesmall","Thornsmall","Ydieresissmall"],$e=[".notdef",".null","nonmarkingreturn","space","exclam","quotedbl","numbersign","dollar","percent","ampersand","quotesingle","parenleft","parenright","asterisk","plus","comma","hyphen","period","slash","zero","one","two","three","four","five","six","seven","eight","nine","colon","semicolon","less","equal","greater","question","at","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","bracketleft","backslash","bracketright","asciicircum","underscore","grave","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","braceleft","bar","braceright","asciitilde","Adieresis","Aring","Ccedilla","Eacute","Ntilde","Odieresis","Udieresis","aacute","agrave","acircumflex","adieresis","atilde","aring","ccedilla","eacute","egrave","ecircumflex","edieresis","iacute","igrave","icircumflex","idieresis","ntilde","oacute","ograve","ocircumflex","odieresis","otilde","uacute","ugrave","ucircumflex","udieresis","dagger","degree","cent","sterling","section","bullet","paragraph","germandbls","registered","copyright","trademark","acute","dieresis","notequal","AE","Oslash","infinity","plusminus","lessequal","greaterequal","yen","mu","partialdiff","summation","product","pi","integral","ordfeminine","ordmasculine","Omega","ae","oslash","questiondown","exclamdown","logicalnot","radical","florin","approxequal","Delta","guillemotleft","guillemotright","ellipsis","nonbreakingspace","Agrave","Atilde","Otilde","OE","oe","endash","emdash","quotedblleft","quotedblright","quoteleft","quoteright","divide","lozenge","ydieresis","Ydieresis","fraction","currency","guilsinglleft","guilsinglright","fi","fl","daggerdbl","periodcentered","quotesinglbase","quotedblbase","perthousand","Acircumflex","Ecircumflex","Aacute","Edieresis","Egrave","Iacute","Icircumflex","Idieresis","Igrave","Oacute","Ocircumflex","apple","Ograve","Uacute","Ucircumflex","Ugrave","dotlessi","circumflex","tilde","macron","breve","dotaccent","ring","cedilla","hungarumlaut","ogonek","caron","Lslash","lslash","Scaron","scaron","Zcaron","zcaron","brokenbar","Eth","eth","Yacute","yacute","Thorn","thorn","minus","multiply","onesuperior","twosuperior","threesuperior","onehalf","onequarter","threequarters","franc","Gbreve","gbreve","Idotaccent","Scedilla","scedilla","Cacute","cacute","Ccaron","ccaron","dcroat"];U.prototype.charToGlyphIndex=function(t){var e=t.codePointAt(0),i=this.font.glyphs;if(i)for(var r=0;r<i.length;r+=1)for(var n=i.get(r),o=0;o<n.unicodes.length;o+=1)if(n.unicodes[o]===e)return r;return null},B.prototype.charToGlyphIndex=function(t){return this.cmap.glyphIndexMap[t.codePointAt(0)]||0},N.prototype.charToGlyphIndex=function(t){var e=t.codePointAt(0),i=this.encoding[e];return this.charset.indexOf(i)},G.prototype.nameToGlyphIndex=function(t){return this.names.indexOf(t)},G.prototype.glyphIndexToName=function(t){return this.names[t]};var ti={line:function(t,e,i,r,n){t.beginPath(),t.moveTo(e,i),t.lineTo(r,n),t.stroke()}};q.prototype.bindConstructorValues=function(t){this.index=t.index||0,this.name=t.name||null,this.unicode=t.unicode||void 0,this.unicodes=t.unicodes||void 0!==t.unicode?[t.unicode]:[],t.xMin&&(this.xMin=t.xMin),t.yMin&&(this.yMin=t.yMin),t.xMax&&(this.xMax=t.xMax),t.yMax&&(this.yMax=t.yMax),t.advanceWidth&&(this.advanceWidth=t.advanceWidth),Object.defineProperty(this,"path",function(t,e){var i=e||new m;return{configurable:!0,get:function(){return"function"==typeof i&&(i=i()),i},set:function(t){i=t}}}(0,t.path))},q.prototype.addUnicode=function(t){0===this.unicodes.length&&(this.unicode=t),this.unicodes.push(t)},q.prototype.getBoundingBox=function(){return this.path.getBoundingBox()},q.prototype.getPath=function(t,e,i,r,n){var o,s;t=void 0!==t?t:0,e=void 0!==e?e:0,i=void 0!==i?i:72,r||(r={});var a=r.xScale,h=r.yScale;if(r.hinting&&n&&n.hinting&&(s=this.path&&n.hinting.exec(this,i)),s)o=n.hinting.getCommands(s),t=Math.round(t),e=Math.round(e),a=h=1;else{o=this.path.commands;var l=1/this.path.unitsPerEm*i;void 0===a&&(a=l),void 0===h&&(h=l)}for(var u=new m,c=0;c<o.length;c+=1){var p=o[c];"M"===p.type?u.moveTo(t+p.x*a,e+-p.y*h):"L"===p.type?u.lineTo(t+p.x*a,e+-p.y*h):"Q"===p.type?u.quadraticCurveTo(t+p.x1*a,e+-p.y1*h,t+p.x*a,e+-p.y*h):"C"===p.type?u.curveTo(t+p.x1*a,e+-p.y1*h,t+p.x2*a,e+-p.y2*h,t+p.x*a,e+-p.y*h):"Z"===p.type&&u.closePath()}return u},q.prototype.getContours=function(){if(void 0===this.points)return[];for(var t=[],e=[],i=0;i<this.points.length;i+=1){var r=this.points[i];e.push(r),r.lastPointOfContour&&(t.push(e),e=[])}return De.argument(0===e.length,"There are still points left in the current contour."),t},q.prototype.getMetrics=function(){for(var t=this.path.commands,e=[],i=[],r=0;r<t.length;r+=1){var n=t[r];"Z"!==n.type&&(e.push(n.x),i.push(n.y)),"Q"!==n.type&&"C"!==n.type||(e.push(n.x1),i.push(n.y1)),"C"===n.type&&(e.push(n.x2),i.push(n.y2))}var o={xMin:Math.min.apply(null,e),yMin:Math.min.apply(null,i),xMax:Math.max.apply(null,e),yMax:Math.max.apply(null,i),leftSideBearing:this.leftSideBearing};return isFinite(o.xMin)||(o.xMin=0),isFinite(o.xMax)||(o.xMax=this.advanceWidth),isFinite(o.yMin)||(o.yMin=0),isFinite(o.yMax)||(o.yMax=0),o.rightSideBearing=this.advanceWidth-o.leftSideBearing-(o.xMax-o.xMin),o},q.prototype.draw=function(t,e,i,r,n){this.getPath(e,i,r,n).draw(t)},q.prototype.drawPoints=function(t,e,i,r){function n(e,i,r,n){var o=2*Math.PI;t.beginPath();for(var s=0;s<e.length;s+=1)t.moveTo(i+e[s].x*n,r+e[s].y*n),t.arc(i+e[s].x*n,r+e[s].y*n,2,0,o,!1);t.closePath(),t.fill()}e=void 0!==e?e:0,i=void 0!==i?i:0,r=void 0!==r?r:24;for(var o=1/this.path.unitsPerEm*r,s=[],a=[],h=this.path,l=0;l<h.commands.length;l+=1){var u=h.commands[l];void 0!==u.x&&s.push({x:u.x,y:-u.y}),void 0!==u.x1&&a.push({x:u.x1,y:-u.y1}),void 0!==u.x2&&a.push({x:u.x2,y:-u.y2})}t.fillStyle="blue",n(s,e,i,o),t.fillStyle="red",n(a,e,i,o)},q.prototype.drawMetrics=function(t,e,i,r){var n;e=void 0!==e?e:0,i=void 0!==i?i:0,r=void 0!==r?r:24,n=1/this.path.unitsPerEm*r,t.lineWidth=1,t.strokeStyle="black",ti.line(t,e,-1e4,e,1e4),ti.line(t,-1e4,i,1e4,i);var o=this.xMin||0,s=this.yMin||0,a=this.xMax||0,h=this.yMax||0,l=this.advanceWidth||0;t.strokeStyle="blue",ti.line(t,e+o*n,-1e4,e+o*n,1e4),ti.line(t,e+a*n,-1e4,e+a*n,1e4),ti.line(t,-1e4,i+-s*n,1e4,i+-s*n),ti.line(t,-1e4,i+-h*n,1e4,i+-h*n),t.strokeStyle="green",ti.line(t,e+l*n,-1e4,e+l*n,1e4)},j.prototype.get=function(t){return"function"==typeof this.glyphs[t]&&(this.glyphs[t]=this.glyphs[t]()),this.glyphs[t]},j.prototype.push=function(t,e){this.glyphs[t]=e,this.length++};var ei={GlyphSet:j,glyphLoader:function(t,e){return new q({index:e,font:t})},ttfGlyphLoader:function(t,e,i,r,n,o){return function(){var s=new q({index:e,font:t});return s.path=function(){i(s,r,n);var e=o(t.glyphs,s);return e.unitsPerEm=t.unitsPerEm,e},V(s,"xMin","_xMin"),V(s,"xMax","_xMax"),V(s,"yMin","_yMin"),V(s,"yMax","_yMax"),s}},cffGlyphLoader:function(t,e,i,r){return function(){var n=new q({index:e,font:t});return n.path=function(){var e=i(t,n,r);return e.unitsPerEm=t.unitsPerEm,e},n}}},ii=[{name:"version",op:0,type:"SID"},{name:"notice",op:1,type:"SID"},{name:"copyright",op:1200,type:"SID"},{name:"fullName",op:2,type:"SID"},{name:"familyName",op:3,type:"SID"},{name:"weight",op:4,type:"SID"},{name:"isFixedPitch",op:1201,type:"number",value:0},{name:"italicAngle",op:1202,type:"number",value:0},{name:"underlinePosition",op:1203,type:"number",value:-100},{name:"underlineThickness",op:1204,type:"number",value:50},{name:"paintType",op:1205,type:"number",value:0},{name:"charstringType",op:1206,type:"number",value:2},{name:"fontMatrix",op:1207,type:["real","real","real","real","real","real"],value:[.001,0,0,.001,0,0]},{name:"uniqueId",op:13,type:"number"},{name:"fontBBox",op:5,type:["number","number","number","number"],value:[0,0,0,0]},{name:"strokeWidth",op:1208,type:"number",value:0},{name:"xuid",op:14,type:[],value:null},{name:"charset",op:15,type:"offset",value:0},{name:"encoding",op:16,type:"offset",value:0},{name:"charStrings",op:17,type:"offset",value:0},{name:"private",op:18,type:["number","offset"],value:[0,0]},{name:"ros",op:1230,type:["SID","SID","number"]},{name:"cidFontVersion",op:1231,type:"number",value:0},{name:"cidFontRevision",op:1232,type:"number",value:0},{name:"cidFontType",op:1233,type:"number",value:0},{name:"cidCount",op:1234,type:"number",value:8720},{name:"uidBase",op:1235,type:"number"},{name:"fdArray",op:1236,type:"offset"},{name:"fdSelect",op:1237,type:"offset"},{name:"fontName",op:1238,type:"SID"}],ri=[{name:"subrs",op:19,type:"offset",value:0},{name:"defaultWidthX",op:20,type:"number",value:0},{name:"nominalWidthX",op:21,type:"number",value:0}],ni={parse:function(t,e,i){i.tables.cff={};var r=function(t,e){var i={};return i.formatMajor=Ye.getCard8(t,e),i.formatMinor=Ye.getCard8(t,e+1),i.size=Ye.getCard8(t,e+2),i.offsetSize=Ye.getCard8(t,e+3),i.startOffset=e,i.endOffset=e+4,i}(t,e),n=H(t,r.endOffset,Ye.bytesToString),o=H(t,n.endOffset),s=H(t,o.endOffset,Ye.bytesToString),a=H(t,s.endOffset);i.gsubrs=a.objects,i.gsubrsBias=W(i.gsubrs);var h=$(t,e,o.objects,s.objects);if(1!==h.length)throw new Error("CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = "+h.length);var l=h[0];if(i.tables.cff.topDict=l,l._privateDict&&(i.defaultWidthX=l._privateDict.defaultWidthX,i.nominalWidthX=l._privateDict.nominalWidthX),void 0!==l.ros[0]&&void 0!==l.ros[1]&&(i.isCIDFont=!0),i.isCIDFont){var u=l.fdArray,c=l.fdSelect;if(0===u||0===c)throw new Error("Font is marked as a CID font, but FDArray and/or FDSelect information is missing");var p=H(t,u+=e),d=$(t,e,p.objects,s.objects);l._fdArray=d,c+=e,l._fdSelect=function(t,e,i,r){var n,o=[],s=new Ye.Parser(t,e),a=s.parseCard8();if(0===a)for(var h=0;h<i;h++){if((n=s.parseCard8())>=r)throw new Error("CFF table CID Font FDSelect has bad FD index value "+n+" (FD count "+r+")");o.push(n)}else{if(3!==a)throw new Error("CFF Table CID Font FDSelect table has unsupported format "+a);var l=s.parseCard16(),u=s.parseCard16();if(0!==u)throw new Error("CFF Table CID Font FDSelect format 3 range has bad initial GID "+u);for(var c,p=0;p<l;p++){if(n=s.parseCard8(),c=s.parseCard16(),n>=r)throw new Error("CFF table CID Font FDSelect has bad FD index value "+n+" (FD count "+r+")");if(c>i)throw new Error("CFF Table CID Font FDSelect format 3 range has bad GID "+c);for(;u<c;u++)o.push(n);u=c}if(c!==i)throw new Error("CFF Table CID Font FDSelect format 3 range has bad final GID "+c)}return o}(t,c,i.numGlyphs,d.length)}var f=e+l.private[1],m=K(t,f,l.private[0],s.objects);if(i.defaultWidthX=m.defaultWidthX,i.nominalWidthX=m.nominalWidthX,0!==m.subrs){var y=f+m.subrs,v=H(t,y);i.subrs=v.objects,i.subrsBias=W(i.subrs)}else i.subrs=[],i.subrsBias=0;var g=H(t,e+l.charStrings);i.nGlyphs=g.objects.length;var _=function(t,e,i,r){var n,o,s=new Ye.Parser(t,e);i-=1;var a=[".notdef"],h=s.parseCard8();if(0===h)for(var l=0;l<i;l+=1)n=s.parseSID(),a.push(Q(r,n));else if(1===h)for(;a.length<=i;){n=s.parseSID(),o=s.parseCard8();for(var u=0;u<=o;u+=1)a.push(Q(r,n)),n+=1}else{if(2!==h)throw new Error("Unknown charset format "+h);for(;a.length<=i;){n=s.parseSID(),o=s.parseCard16();for(var c=0;c<=o;c+=1)a.push(Q(r,n)),n+=1}}return a}(t,e+l.charset,i.nGlyphs,s.objects);0===l.encoding?i.cffEncoding=new N(Je,_):1===l.encoding?i.cffEncoding=new N(Ke,_):i.cffEncoding=function(t,e,i){var r,n={},o=new Ye.Parser(t,e),s=o.parseCard8();if(0===s)for(var a=o.parseCard8(),h=0;h<a;h+=1)r=o.parseCard8(),n[r]=h;else{if(1!==s)throw new Error("Unknown encoding format "+s);var l=o.parseCard8();r=1;for(var u=0;u<l;u+=1)for(var c=o.parseCard8(),p=o.parseCard8(),d=c;d<=c+p;d+=1)n[d]=r,r+=1}return new N(n,i)}(t,e+l.encoding,_),i.encoding=i.encoding||i.cffEncoding,i.glyphs=new ei.GlyphSet(i);for(var b=0;b<i.nGlyphs;b+=1){var S=g.objects[b];i.glyphs.push(b,ei.cffGlyphLoader(i,b,tt,S))}},make:function(t,e){for(var i,r=new We.Table("CFF ",[{name:"header",type:"RECORD"},{name:"nameIndex",type:"RECORD"},{name:"topDictIndex",type:"RECORD"},{name:"stringIndex",type:"RECORD"},{name:"globalSubrIndex",type:"RECORD"},{name:"charsets",type:"RECORD"},{name:"charStringsIndex",type:"RECORD"},{name:"privateDict",type:"RECORD"}]),n=1/e.unitsPerEm,o={version:e.version,fullName:e.fullName,familyName:e.familyName,weight:e.weightName,fontBBox:e.fontBBox||[0,0,0,0],fontMatrix:[n,0,0,n,0,0],charset:999,encoding:0,charStrings:999,private:[0,999]},s=[],a=1;a<t.length;a+=1)i=t.get(a),s.push(i.name);var h=[];r.header=new We.Record("Header",[{name:"major",type:"Card8",value:1},{name:"minor",type:"Card8",value:0},{name:"hdrSize",type:"Card8",value:4},{name:"major",type:"Card8",value:1}]),r.nameIndex=function(t){var e=new We.Record("Name INDEX",[{name:"names",type:"INDEX",value:[]}]);e.names=[];for(var i=0;i<t.length;i+=1)e.names.push({name:"name_"+i,type:"NAME",value:t[i]});return e}([e.postScriptName]);var l=rt(o,h);r.topDictIndex=nt(l),r.globalSubrIndex=new We.Record("Global Subr INDEX",[{name:"subrs",type:"INDEX",value:[]}]),r.charsets=function(t,e){for(var i=new We.Record("Charsets",[{name:"format",type:"Card8",value:0}]),r=0;r<t.length;r+=1){var n=t[r],o=et(n,e);i.fields.push({name:"glyph_"+r,type:"SID",value:o})}return i}(s,h),r.charStringsIndex=function(t){for(var e=new We.Record("CharStrings INDEX",[{name:"charStrings",type:"INDEX",value:[]}]),i=0;i<t.length;i+=1){var r=t.get(i),n=ot(r);e.charStrings.push({name:r.name,type:"CHARSTRING",value:n})}return e}(t),r.privateDict=function(t,e){var i=new We.Record("Private DICT",[{name:"dict",type:"DICT",value:{}}]);return i.dict=it(ri,t,e),i}({},h),r.stringIndex=function(t){var e=new We.Record("String INDEX",[{name:"strings",type:"INDEX",value:[]}]);e.strings=[];for(var i=0;i<t.length;i+=1)e.strings.push({name:"string_"+i,type:"STRING",value:t[i]});return e}(h);var u=r.header.sizeOf()+r.nameIndex.sizeOf()+r.topDictIndex.sizeOf()+r.stringIndex.sizeOf()+r.globalSubrIndex.sizeOf();return o.charset=u,o.encoding=0,o.charStrings=o.charset+r.charsets.sizeOf(),o.private[1]=o.charStrings+r.charStringsIndex.sizeOf(),l=rt(o,h),r.topDictIndex=nt(l),r}},oi={parse:function(t,e){var i={},r=new Ye.Parser(t,e);return i.version=r.parseVersion(),i.fontRevision=Math.round(1e3*r.parseFixed())/1e3,i.checkSumAdjustment=r.parseULong(),i.magicNumber=r.parseULong(),De.argument(1594834165===i.magicNumber,"Font header has wrong magic number."),i.flags=r.parseUShort(),i.unitsPerEm=r.parseUShort(),i.created=r.parseLongDateTime(),i.modified=r.parseLongDateTime(),i.xMin=r.parseShort(),i.yMin=r.parseShort(),i.xMax=r.parseShort(),i.yMax=r.parseShort(),i.macStyle=r.parseUShort(),i.lowestRecPPEM=r.parseUShort(),i.fontDirectionHint=r.parseShort(),i.indexToLocFormat=r.parseShort(),i.glyphDataFormat=r.parseShort(),i},make:function(t){var e=Math.round((new Date).getTime()/1e3)+2082844800,i=e;return t.createdTimestamp&&(i=t.createdTimestamp+2082844800),new We.Table("head",[{name:"version",type:"FIXED",value:65536},{name:"fontRevision",type:"FIXED",value:65536},{name:"checkSumAdjustment",type:"ULONG",value:0},{name:"magicNumber",type:"ULONG",value:1594834165},{name:"flags",type:"USHORT",value:0},{name:"unitsPerEm",type:"USHORT",value:1e3},{name:"created",type:"LONGDATETIME",value:i},{name:"modified",type:"LONGDATETIME",value:e},{name:"xMin",type:"SHORT",value:0},{name:"yMin",type:"SHORT",value:0},{name:"xMax",type:"SHORT",value:0},{name:"yMax",type:"SHORT",value:0},{name:"macStyle",type:"USHORT",value:0},{name:"lowestRecPPEM",type:"USHORT",value:0},{name:"fontDirectionHint",type:"SHORT",value:2},{name:"indexToLocFormat",type:"SHORT",value:0},{name:"glyphDataFormat",type:"SHORT",value:0}],t)}},si={parse:function(t,e){var i={},r=new Ye.Parser(t,e);return i.version=r.parseVersion(),i.ascender=r.parseShort(),i.descender=r.parseShort(),i.lineGap=r.parseShort(),i.advanceWidthMax=r.parseUShort(),i.minLeftSideBearing=r.parseShort(),i.minRightSideBearing=r.parseShort(),i.xMaxExtent=r.parseShort(),i.caretSlopeRise=r.parseShort(),i.caretSlopeRun=r.parseShort(),i.caretOffset=r.parseShort(),r.relativeOffset+=8,i.metricDataFormat=r.parseShort(),i.numberOfHMetrics=r.parseUShort(),i},make:function(t){return new We.Table("hhea",[{name:"version",type:"FIXED",value:65536},{name:"ascender",type:"FWORD",value:0},{name:"descender",type:"FWORD",value:0},{name:"lineGap",type:"FWORD",value:0},{name:"advanceWidthMax",type:"UFWORD",value:0},{name:"minLeftSideBearing",type:"FWORD",value:0},{name:"minRightSideBearing",type:"FWORD",value:0},{name:"xMaxExtent",type:"FWORD",value:0},{name:"caretSlopeRise",type:"SHORT",value:1},{name:"caretSlopeRun",type:"SHORT",value:0},{name:"caretOffset",type:"SHORT",value:0},{name:"reserved1",type:"SHORT",value:0},{name:"reserved2",type:"SHORT",value:0},{name:"reserved3",type:"SHORT",value:0},{name:"reserved4",type:"SHORT",value:0},{name:"metricDataFormat",type:"SHORT",value:0},{name:"numberOfHMetrics",type:"USHORT",value:0}],t)}},ai={parse:function(t,e,i,r,n){for(var o,s,a=new Ye.Parser(t,e),h=0;h<r;h+=1){h<i&&(o=a.parseUShort(),s=a.parseShort());var l=n.get(h);l.advanceWidth=o,l.leftSideBearing=s}},make:function(t){for(var e=new We.Table("hmtx",[]),i=0;i<t.length;i+=1){var r=t.get(i),n=r.advanceWidth||0,o=r.leftSideBearing||0;e.fields.push({name:"advanceWidth_"+i,type:"USHORT",value:n}),e.fields.push({name:"leftSideBearing_"+i,type:"SHORT",value:o})}return e}},hi={make:function(t){for(var e=new We.Table("ltag",[{name:"version",type:"ULONG",value:1},{name:"flags",type:"ULONG",value:0},{name:"numTags",type:"ULONG",value:t.length}]),i="",r=12+4*t.length,n=0;n<t.length;++n){var o=i.indexOf(t[n]);o<0&&(o=i.length,i+=t[n]),e.fields.push({name:"offset "+n,type:"USHORT",value:r+o}),e.fields.push({name:"length "+n,type:"USHORT",value:t[n].length})}return e.fields.push({name:"stringPool",type:"CHARARRAY",value:i}),e},parse:function(t,e){var i=new Ye.Parser(t,e),r=i.parseULong();De.argument(1===r,"Unsupported ltag table version."),i.skip("uLong",1);for(var n=i.parseULong(),o=[],s=0;s<n;s++){for(var a="",h=e+i.parseUShort(),l=i.parseUShort(),u=h;u<h+l;++u)a+=String.fromCharCode(t.getInt8(u));o.push(a)}return o}},li={parse:function(t,e){var i={},r=new Ye.Parser(t,e);return i.version=r.parseVersion(),i.numGlyphs=r.parseUShort(),1===i.version&&(i.maxPoints=r.parseUShort(),i.maxContours=r.parseUShort(),i.maxCompositePoints=r.parseUShort(),i.maxCompositeContours=r.parseUShort(),i.maxZones=r.parseUShort(),i.maxTwilightPoints=r.parseUShort(),i.maxStorage=r.parseUShort(),i.maxFunctionDefs=r.parseUShort(),i.maxInstructionDefs=r.parseUShort(),i.maxStackElements=r.parseUShort(),i.maxSizeOfInstructions=r.parseUShort(),i.maxComponentElements=r.parseUShort(),i.maxComponentDepth=r.parseUShort()),i},make:function(t){return new We.Table("maxp",[{name:"version",type:"FIXED",value:20480},{name:"numGlyphs",type:"USHORT",value:t}])}},ui=["copyright","fontFamily","fontSubfamily","uniqueID","fullName","version","postScriptName","trademark","manufacturer","designer","description","manufacturerURL","designerURL","license","licenseURL","reserved","preferredFamily","preferredSubfamily","compatibleFullName","sampleText","postScriptFindFontName","wwsFamily","wwsSubfamily"],ci={0:"en",1:"fr",2:"de",3:"it",4:"nl",5:"sv",6:"es",7:"da",8:"pt",9:"no",10:"he",11:"ja",12:"ar",13:"fi",14:"el",15:"is",16:"mt",17:"tr",18:"hr",19:"zh-Hant",20:"ur",21:"hi",22:"th",23:"ko",24:"lt",25:"pl",26:"hu",27:"es",28:"lv",29:"se",30:"fo",31:"fa",32:"ru",33:"zh",34:"nl-BE",35:"ga",36:"sq",37:"ro",38:"cz",39:"sk",40:"si",41:"yi",42:"sr",43:"mk",44:"bg",45:"uk",46:"be",47:"uz",48:"kk",49:"az-Cyrl",50:"az-Arab",51:"hy",52:"ka",53:"mo",54:"ky",55:"tg",56:"tk",57:"mn-CN",58:"mn",59:"ps",60:"ks",61:"ku",62:"sd",63:"bo",64:"ne",65:"sa",66:"mr",67:"bn",68:"as",69:"gu",70:"pa",71:"or",72:"ml",73:"kn",74:"ta",75:"te",76:"si",77:"my",78:"km",79:"lo",80:"vi",81:"id",82:"tl",83:"ms",84:"ms-Arab",85:"am",86:"ti",87:"om",88:"so",89:"sw",90:"rw",91:"rn",92:"ny",93:"mg",94:"eo",128:"cy",129:"eu",130:"ca",131:"la",132:"qu",133:"gn",134:"ay",135:"tt",136:"ug",137:"dz",138:"jv",139:"su",140:"gl",141:"af",142:"br",143:"iu",144:"gd",145:"gv",146:"ga",147:"to",148:"el-polyton",149:"kl",150:"az",151:"nn"},pi={0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:5,11:1,12:4,13:0,14:6,15:0,16:0,17:0,18:0,19:2,20:4,21:9,22:21,23:3,24:29,25:29,26:29,27:29,28:29,29:0,30:0,31:4,32:7,33:25,34:0,35:0,36:0,37:0,38:29,39:29,40:0,41:5,42:7,43:7,44:7,45:7,46:7,47:7,48:7,49:7,50:4,51:24,52:23,53:7,54:7,55:7,56:7,57:27,58:7,59:4,60:4,61:4,62:4,63:26,64:9,65:9,66:9,67:13,68:13,69:11,70:10,71:12,72:17,73:16,74:14,75:15,76:18,77:19,78:20,79:22,80:30,81:0,82:0,83:0,84:4,85:28,86:28,87:28,88:0,89:0,90:0,91:0,92:0,93:0,94:0,128:0,129:0,130:0,131:0,132:0,133:0,134:0,135:7,136:4,137:26,138:0,139:0,140:0,141:0,142:0,143:28,144:0,145:0,146:0,147:0,148:6,149:0,150:0,151:0},di={1078:"af",1052:"sq",1156:"gsw",1118:"am",5121:"ar-DZ",15361:"ar-BH",3073:"ar",2049:"ar-IQ",11265:"ar-JO",13313:"ar-KW",12289:"ar-LB",4097:"ar-LY",6145:"ary",8193:"ar-OM",16385:"ar-QA",1025:"ar-SA",10241:"ar-SY",7169:"aeb",14337:"ar-AE",9217:"ar-YE",1067:"hy",1101:"as",2092:"az-Cyrl",1068:"az",1133:"ba",1069:"eu",1059:"be",2117:"bn",1093:"bn-IN",8218:"bs-Cyrl",5146:"bs",1150:"br",1026:"bg",1027:"ca",3076:"zh-HK",5124:"zh-MO",2052:"zh",4100:"zh-SG",1028:"zh-TW",1155:"co",1050:"hr",4122:"hr-BA",1029:"cs",1030:"da",1164:"prs",1125:"dv",2067:"nl-BE",1043:"nl",3081:"en-AU",10249:"en-BZ",4105:"en-CA",9225:"en-029",16393:"en-IN",6153:"en-IE",8201:"en-JM",17417:"en-MY",5129:"en-NZ",13321:"en-PH",18441:"en-SG",7177:"en-ZA",11273:"en-TT",2057:"en-GB",1033:"en",12297:"en-ZW",1061:"et",1080:"fo",1124:"fil",1035:"fi",2060:"fr-BE",3084:"fr-CA",1036:"fr",5132:"fr-LU",6156:"fr-MC",4108:"fr-CH",1122:"fy",1110:"gl",1079:"ka",3079:"de-AT",1031:"de",5127:"de-LI",4103:"de-LU",2055:"de-CH",1032:"el",1135:"kl",1095:"gu",1128:"ha",1037:"he",1081:"hi",1038:"hu",1039:"is",1136:"ig",1057:"id",1117:"iu",2141:"iu-Latn",2108:"ga",1076:"xh",1077:"zu",1040:"it",2064:"it-CH",1041:"ja",1099:"kn",1087:"kk",1107:"km",1158:"quc",1159:"rw",1089:"sw",1111:"kok",1042:"ko",1088:"ky",1108:"lo",1062:"lv",1063:"lt",2094:"dsb",1134:"lb",1071:"mk",2110:"ms-BN",1086:"ms",1100:"ml",1082:"mt",1153:"mi",1146:"arn",1102:"mr",1148:"moh",1104:"mn",2128:"mn-CN",1121:"ne",1044:"nb",2068:"nn",1154:"oc",1096:"or",1123:"ps",1045:"pl",1046:"pt",2070:"pt-PT",1094:"pa",1131:"qu-BO",2155:"qu-EC",3179:"qu",1048:"ro",1047:"rm",1049:"ru",9275:"smn",4155:"smj-NO",5179:"smj",3131:"se-FI",1083:"se",2107:"se-SE",8251:"sms",6203:"sma-NO",7227:"sms",1103:"sa",7194:"sr-Cyrl-BA",3098:"sr",6170:"sr-Latn-BA",2074:"sr-Latn",1132:"nso",1074:"tn",1115:"si",1051:"sk",1060:"sl",11274:"es-AR",16394:"es-BO",13322:"es-CL",9226:"es-CO",5130:"es-CR",7178:"es-DO",12298:"es-EC",17418:"es-SV",4106:"es-GT",18442:"es-HN",2058:"es-MX",19466:"es-NI",6154:"es-PA",15370:"es-PY",10250:"es-PE",20490:"es-PR",3082:"es",1034:"es",21514:"es-US",14346:"es-UY",8202:"es-VE",2077:"sv-FI",1053:"sv",1114:"syr",1064:"tg",2143:"tzm",1097:"ta",1092:"tt",1098:"te",1054:"th",1105:"bo",1055:"tr",1090:"tk",1152:"ug",1058:"uk",1070:"hsb",1056:"ur",2115:"uz-Cyrl",1091:"uz",1066:"vi",1106:"cy",1160:"wo",1157:"sah",1144:"ii",1130:"yo"},fi="utf-16",mi={0:"macintosh",1:"x-mac-japanese",2:"x-mac-chinesetrad",3:"x-mac-korean",6:"x-mac-greek",7:"x-mac-cyrillic",9:"x-mac-devanagai",10:"x-mac-gurmukhi",11:"x-mac-gujarati",12:"x-mac-oriya",13:"x-mac-bengali",14:"x-mac-tamil",15:"x-mac-telugu",16:"x-mac-kannada",17:"x-mac-malayalam",18:"x-mac-sinhalese",19:"x-mac-burmese",20:"x-mac-khmer",21:"x-mac-thai",22:"x-mac-lao",23:"x-mac-georgian",24:"x-mac-armenian",25:"x-mac-chinesesimp",26:"x-mac-tibetan",27:"x-mac-mongolian",28:"x-mac-ethiopic",29:"x-mac-ce",30:"x-mac-vietnamese",31:"x-mac-extarabic"},yi={15:"x-mac-icelandic",17:"x-mac-turkish",18:"x-mac-croatian",24:"x-mac-ce",25:"x-mac-ce",26:"x-mac-ce",27:"x-mac-ce",28:"x-mac-ce",30:"x-mac-icelandic",37:"x-mac-romanian",38:"x-mac-ce",39:"x-mac-ce",40:"x-mac-ce",143:"x-mac-inuit",146:"x-mac-gaelic"},vi={parse:function(t,e,i){for(var r={},n=new Ye.Parser(t,e),o=n.parseUShort(),s=n.parseUShort(),a=n.offset+n.parseUShort(),h=0;h<s;h++){var l=n.parseUShort(),u=n.parseUShort(),c=n.parseUShort(),p=n.parseUShort(),d=ui[p]||p,f=n.parseUShort(),m=n.parseUShort(),y=st(l,c,i),v=at(l,u,c);if(void 0!==v&&void 0!==y){var g=void 0;if(g=v===fi?Be.UTF16(t,a+m,f):Be.MACSTRING(t,a+m,f,v)){var _=r[d];void 0===_&&(_=r[d]={}),_[y]=g}}}return 1===o&&n.parseUShort(),r},make:function(t,e){var i,r=[],n={},o=ht(ui);for(var s in t){var a=o[s];if(void 0===a&&(a=s),i=parseInt(a),isNaN(i))throw new Error('Name table entry "'+s+'" does not exist, see nameTableNames for complete list.');n[i]=t[s],r.push(i)}for(var h=ht(ci),l=ht(di),u=[],c=[],p=0;p<r.length;p++){i=r[p];var d=n[i];for(var f in d){var m=d[f],y=1,v=h[f],g=pi[v],_=at(y,g,v),b=Ne.MACSTRING(m,_);void 0===b&&(y=0,(v=e.indexOf(f))<0&&(v=e.length,e.push(f)),g=4,b=Ne.UTF16(m));var S=ut(b,c);u.push(lt(y,g,v,i,b.length,S));var x=l[f];if(void 0!==x){var w=Ne.UTF16(m),T=ut(w,c);u.push(lt(3,1,x,i,w.length,T))}}}u.sort(function(t,e){return t.platformID-e.platformID||t.encodingID-e.encodingID||t.languageID-e.languageID||t.nameID-e.nameID});for(var A=new We.Table("name",[{name:"format",type:"USHORT",value:0},{name:"count",type:"USHORT",value:u.length},{name:"stringOffset",type:"USHORT",value:6+12*u.length}]),M=0;M<u.length;M++)A.fields.push({name:"record_"+M,type:"RECORD",value:u[M]});return A.fields.push({name:"strings",type:"LITERAL",value:c}),A}},gi=[{begin:0,end:127},{begin:128,end:255},{begin:256,end:383},{begin:384,end:591},{begin:592,end:687},{begin:688,end:767},{begin:768,end:879},{begin:880,end:1023},{begin:11392,end:11519},{begin:1024,end:1279},{begin:1328,end:1423},{begin:1424,end:1535},{begin:42240,end:42559},{begin:1536,end:1791},{begin:1984,end:2047},{begin:2304,end:2431},{begin:2432,end:2559},{begin:2560,end:2687},{begin:2688,end:2815},{begin:2816,end:2943},{begin:2944,end:3071},{begin:3072,end:3199},{begin:3200,end:3327},{begin:3328,end:3455},{begin:3584,end:3711},{begin:3712,end:3839},{begin:4256,end:4351},{begin:6912,end:7039},{begin:4352,end:4607},{begin:7680,end:7935},{begin:7936,end:8191},{begin:8192,end:8303},{begin:8304,end:8351},{begin:8352,end:8399},{begin:8400,end:8447},{begin:8448,end:8527},{begin:8528,end:8591},{begin:8592,end:8703},{begin:8704,end:8959},{begin:8960,end:9215},{begin:9216,end:9279},{begin:9280,end:9311},{begin:9312,end:9471},{begin:9472,end:9599},{begin:9600,end:9631},{begin:9632,end:9727},{begin:9728,end:9983},{begin:9984,end:10175},{begin:12288,end:12351},{begin:12352,end:12447},{begin:12448,end:12543},{begin:12544,end:12591},{begin:12592,end:12687},{begin:43072,end:43135},{begin:12800,end:13055},{begin:13056,end:13311},{begin:44032,end:55215},{begin:55296,end:57343},{begin:67840,end:67871},{begin:19968,end:40959},{begin:57344,end:63743},{begin:12736,end:12783},{begin:64256,end:64335},{begin:64336,end:65023},{begin:65056,end:65071},{begin:65040,end:65055},{begin:65104,end:65135},{begin:65136,end:65279},{begin:65280,end:65519},{begin:65520,end:65535},{begin:3840,end:4095},{begin:1792,end:1871},{begin:1920,end:1983},{begin:3456,end:3583},{begin:4096,end:4255},{begin:4608,end:4991},{begin:5024,end:5119},{begin:5120,end:5759},{begin:5760,end:5791},{begin:5792,end:5887},{begin:6016,end:6143},{begin:6144,end:6319},{begin:10240,end:10495},{begin:40960,end:42127},{begin:5888,end:5919},{begin:66304,end:66351},{begin:66352,end:66383},{begin:66560,end:66639},{begin:118784,end:119039},{begin:119808,end:120831},{begin:1044480,end:1048573},{begin:65024,end:65039},{begin:917504,end:917631},{begin:6400,end:6479},{begin:6480,end:6527},{begin:6528,end:6623},{begin:6656,end:6687},{begin:11264,end:11359},{begin:11568,end:11647},{begin:19904,end:19967},{begin:43008,end:43055},{begin:65536,end:65663},{begin:65856,end:65935},{begin:66432,end:66463},{begin:66464,end:66527},{begin:66640,end:66687},{begin:66688,end:66735},{begin:67584,end:67647},{begin:68096,end:68191},{begin:119552,end:119647},{begin:73728,end:74751},{begin:119648,end:119679},{begin:7040,end:7103},{begin:7168,end:7247},{begin:7248,end:7295},{begin:43136,end:43231},{begin:43264,end:43311},{begin:43312,end:43359},{begin:43520,end:43615},{begin:65936,end:65999},{begin:66e3,end:66047},{begin:66208,end:66271},{begin:127024,end:127135}],_i={parse:function(t,e){var i={},r=new Ye.Parser(t,e);i.version=r.parseUShort(),i.xAvgCharWidth=r.parseShort(),i.usWeightClass=r.parseUShort(),i.usWidthClass=r.parseUShort(),i.fsType=r.parseUShort(),i.ySubscriptXSize=r.parseShort(),i.ySubscriptYSize=r.parseShort(),i.ySubscriptXOffset=r.parseShort(),i.ySubscriptYOffset=r.parseShort(),i.ySuperscriptXSize=r.parseShort(),i.ySuperscriptYSize=r.parseShort(),i.ySuperscriptXOffset=r.parseShort(),i.ySuperscriptYOffset=r.parseShort(),i.yStrikeoutSize=r.parseShort(),i.yStrikeoutPosition=r.parseShort(),i.sFamilyClass=r.parseShort(),i.panose=[];for(var n=0;n<10;n++)i.panose[n]=r.parseByte();return i.ulUnicodeRange1=r.parseULong(),i.ulUnicodeRange2=r.parseULong(),i.ulUnicodeRange3=r.parseULong(),i.ulUnicodeRange4=r.parseULong(),i.achVendID=String.fromCharCode(r.parseByte(),r.parseByte(),r.parseByte(),r.parseByte()),i.fsSelection=r.parseUShort(),i.usFirstCharIndex=r.parseUShort(),i.usLastCharIndex=r.parseUShort(),i.sTypoAscender=r.parseShort(),i.sTypoDescender=r.parseShort(),i.sTypoLineGap=r.parseShort(),i.usWinAscent=r.parseUShort(),i.usWinDescent=r.parseUShort(),i.version>=1&&(i.ulCodePageRange1=r.parseULong(),i.ulCodePageRange2=r.parseULong()),i.version>=2&&(i.sxHeight=r.parseShort(),i.sCapHeight=r.parseShort(),i.usDefaultChar=r.parseUShort(),i.usBreakChar=r.parseUShort(),i.usMaxContent=r.parseUShort()),i},make:function(t){return new We.Table("OS/2",[{name:"version",type:"USHORT",value:3},{name:"xAvgCharWidth",type:"SHORT",value:0},{name:"usWeightClass",type:"USHORT",value:0},{name:"usWidthClass",type:"USHORT",value:0},{name:"fsType",type:"USHORT",value:0},{name:"ySubscriptXSize",type:"SHORT",value:650},{name:"ySubscriptYSize",type:"SHORT",value:699},{name:"ySubscriptXOffset",type:"SHORT",value:0},{name:"ySubscriptYOffset",type:"SHORT",value:140},{name:"ySuperscriptXSize",type:"SHORT",value:650},{name:"ySuperscriptYSize",type:"SHORT",value:699},{name:"ySuperscriptXOffset",type:"SHORT",value:0},{name:"ySuperscriptYOffset",type:"SHORT",value:479},{name:"yStrikeoutSize",type:"SHORT",value:49},{name:"yStrikeoutPosition",type:"SHORT",value:258},{name:"sFamilyClass",type:"SHORT",value:0},{name:"bFamilyType",type:"BYTE",value:0},{name:"bSerifStyle",type:"BYTE",value:0},{name:"bWeight",type:"BYTE",value:0},{name:"bProportion",type:"BYTE",value:0},{name:"bContrast",type:"BYTE",value:0},{name:"bStrokeVariation",type:"BYTE",value:0},{name:"bArmStyle",type:"BYTE",value:0},{name:"bLetterform",type:"BYTE",value:0},{name:"bMidline",type:"BYTE",value:0},{name:"bXHeight",type:"BYTE",value:0},{name:"ulUnicodeRange1",type:"ULONG",value:0},{name:"ulUnicodeRange2",type:"ULONG",value:0},{name:"ulUnicodeRange3",type:"ULONG",value:0},{name:"ulUnicodeRange4",type:"ULONG",value:0},{name:"achVendID",type:"CHARARRAY",value:"XXXX"},{name:"fsSelection",type:"USHORT",value:0},{name:"usFirstCharIndex",type:"USHORT",value:0},{name:"usLastCharIndex",type:"USHORT",value:0},{name:"sTypoAscender",type:"SHORT",value:0},{name:"sTypoDescender",type:"SHORT",value:0},{name:"sTypoLineGap",type:"SHORT",value:0},{name:"usWinAscent",type:"USHORT",value:0},{name:"usWinDescent",type:"USHORT",value:0},{name:"ulCodePageRange1",type:"ULONG",value:0},{name:"ulCodePageRange2",type:"ULONG",value:0},{name:"sxHeight",type:"SHORT",value:0},{name:"sCapHeight",type:"SHORT",value:0},{name:"usDefaultChar",type:"USHORT",value:0},{name:"usBreakChar",type:"USHORT",value:0},{name:"usMaxContext",type:"USHORT",value:0}],t)},unicodeRanges:gi,getUnicodeRange:function(t){for(var e=0;e<gi.length;e+=1){var i=gi[e];if(t>=i.begin&&t<i.end)return e}return-1}},bi={parse:function(t,e){var i={},r=new Ye.Parser(t,e);switch(i.version=r.parseVersion(),i.italicAngle=r.parseFixed(),i.underlinePosition=r.parseShort(),i.underlineThickness=r.parseShort(),i.isFixedPitch=r.parseULong(),i.minMemType42=r.parseULong(),i.maxMemType42=r.parseULong(),i.minMemType1=r.parseULong(),i.maxMemType1=r.parseULong(),i.version){case 1:i.names=$e.slice();break;case 2:i.numberOfGlyphs=r.parseUShort(),i.glyphNameIndex=new Array(i.numberOfGlyphs);for(var n=0;n<i.numberOfGlyphs;n++)i.glyphNameIndex[n]=r.parseUShort();i.names=[];for(var o=0;o<i.numberOfGlyphs;o++)if(i.glyphNameIndex[o]>=$e.length){var s=r.parseChar();i.names.push(r.parseString(s))}break;case 2.5:i.numberOfGlyphs=r.parseUShort(),i.offset=new Array(i.numberOfGlyphs);for(var a=0;a<i.numberOfGlyphs;a++)i.offset[a]=r.parseChar()}return i},make:function(){return new We.Table("post",[{name:"version",type:"FIXED",value:196608},{name:"italicAngle",type:"FIXED",value:0},{name:"underlinePosition",type:"FWORD",value:0},{name:"underlineThickness",type:"FWORD",value:0},{name:"isFixedPitch",type:"ULONG",value:0},{name:"minMemType42",type:"ULONG",value:0},{name:"maxMemType42",type:"ULONG",value:0},{name:"minMemType1",type:"ULONG",value:0},{name:"maxMemType1",type:"ULONG",value:0}])}},Si=new Array(9);Si[1]=function(){var t=this.offset+this.relativeOffset,e=this.parseUShort();return 1===e?{substFormat:1,coverage:this.parsePointer(I.coverage),deltaGlyphId:this.parseUShort()}:2===e?{substFormat:2,coverage:this.parsePointer(I.coverage),substitute:this.parseOffset16List()}:void De.assert(!1,"0x"+t.toString(16)+": lookup type 1 format must be 1 or 2.")},Si[2]=function(){var t=this.parseUShort();return De.argument(1===t,"GSUB Multiple Substitution Subtable identifier-format must be 1"),{substFormat:t,coverage:this.parsePointer(I.coverage),sequences:this.parseListOfLists()}},Si[3]=function(){var t=this.parseUShort();return De.argument(1===t,"GSUB Alternate Substitution Subtable identifier-format must be 1"),{substFormat:t,coverage:this.parsePointer(I.coverage),alternateSets:this.parseListOfLists()}},Si[4]=function(){var t=this.parseUShort();return De.argument(1===t,"GSUB ligature table identifier-format must be 1"),{substFormat:t,coverage:this.parsePointer(I.coverage),ligatureSets:this.parseListOfLists(function(){return{ligGlyph:this.parseUShort(),components:this.parseUShortList(this.parseUShort()-1)}})}};var xi={sequenceIndex:I.uShort,lookupListIndex:I.uShort};Si[5]=function(){var t=this.offset+this.relativeOffset,e=this.parseUShort();if(1===e)return{substFormat:e,coverage:this.parsePointer(I.coverage),ruleSets:this.parseListOfLists(function(){var t=this.parseUShort(),e=this.parseUShort();return{input:this.parseUShortList(t-1),lookupRecords:this.parseRecordList(e,xi)}})};if(2===e)return{substFormat:e,coverage:this.parsePointer(I.coverage),classDef:this.parsePointer(I.classDef),classSets:this.parseListOfLists(function(){var t=this.parseUShort(),e=this.parseUShort();return{classes:this.parseUShortList(t-1),lookupRecords:this.parseRecordList(e,xi)}})};if(3===e){var i=this.parseUShort(),r=this.parseUShort();return{substFormat:e,coverages:this.parseList(i,I.pointer(I.coverage)),lookupRecords:this.parseRecordList(r,xi)}}De.assert(!1,"0x"+t.toString(16)+": lookup type 5 format must be 1, 2 or 3.")},Si[6]=function(){var t=this.offset+this.relativeOffset,e=this.parseUShort();return 1===e?{substFormat:1,coverage:this.parsePointer(I.coverage),chainRuleSets:this.parseListOfLists(function(){return{backtrack:this.parseUShortList(),input:this.parseUShortList(this.parseShort()-1),lookahead:this.parseUShortList(),lookupRecords:this.parseRecordList(xi)}})}:2===e?{substFormat:2,coverage:this.parsePointer(I.coverage),backtrackClassDef:this.parsePointer(I.classDef),inputClassDef:this.parsePointer(I.classDef),lookaheadClassDef:this.parsePointer(I.classDef),chainClassSet:this.parseListOfLists(function(){return{backtrack:this.parseUShortList(),input:this.parseUShortList(this.parseShort()-1),lookahead:this.parseUShortList(),lookupRecords:this.parseRecordList(xi)}})}:3===e?{substFormat:3,backtrackCoverage:this.parseList(I.pointer(I.coverage)),inputCoverage:this.parseList(I.pointer(I.coverage)),lookaheadCoverage:this.parseList(I.pointer(I.coverage)),lookupRecords:this.parseRecordList(xi)}:void De.assert(!1,"0x"+t.toString(16)+": lookup type 6 format must be 1, 2 or 3.")},Si[7]=function(){var t=this.parseUShort();De.argument(1===t,"GSUB Extension Substitution subtable identifier-format must be 1");var e=this.parseUShort(),i=new I(this.data,this.offset+this.parseULong());return{substFormat:1,lookupType:e,extension:Si[e].call(i)}},Si[8]=function(){var t=this.parseUShort();return De.argument(1===t,"GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"),{substFormat:t,coverage:this.parsePointer(I.coverage),backtrackCoverage:this.parseList(I.pointer(I.coverage)),lookaheadCoverage:this.parseList(I.pointer(I.coverage)),substitutes:this.parseUShortList()}};var wi=new Array(9);wi[1]=function(t){return 1===t.substFormat?new We.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new We.Coverage(t.coverage)},{name:"deltaGlyphID",type:"USHORT",value:t.deltaGlyphId}]):new We.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:2},{name:"coverage",type:"TABLE",value:new We.Coverage(t.coverage)}].concat(We.ushortList("substitute",t.substitute)))},wi[3]=function(t){return De.assert(1===t.substFormat,"Lookup type 3 substFormat must be 1."),new We.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new We.Coverage(t.coverage)}].concat(We.tableList("altSet",t.alternateSets,function(t){return new We.Table("alternateSetTable",We.ushortList("alternate",t))})))},wi[4]=function(t){return De.assert(1===t.substFormat,"Lookup type 4 substFormat must be 1."),new We.Table("substitutionTable",[{name:"substFormat",type:"USHORT",value:1},{name:"coverage",type:"TABLE",value:new We.Coverage(t.coverage)}].concat(We.tableList("ligSet",t.ligatureSets,function(t){return new We.Table("ligatureSetTable",We.tableList("ligature",t,function(t){return new We.Table("ligatureTable",[{name:"ligGlyph",type:"USHORT",value:t.ligGlyph}].concat(We.ushortList("component",t.components,t.components.length+1)))}))})))};var Ti={parse:function(t,e){var i=new I(t,e=e||0),r=i.parseVersion(1);return De.argument(1===r||1.1===r,"Unsupported GSUB table version."),1===r?{version:r,scripts:i.parseScriptList(),features:i.parseFeatureList(),lookups:i.parseLookupList(Si)}:{version:r,scripts:i.parseScriptList(),features:i.parseFeatureList(),lookups:i.parseLookupList(Si),variations:i.parseFeatureVariationsList()}},make:function(t){return new We.Table("GSUB",[{name:"version",type:"ULONG",value:65536},{name:"scripts",type:"TABLE",value:new We.ScriptList(t.scripts)},{name:"features",type:"TABLE",value:new We.FeatureList(t.features)},{name:"lookups",type:"TABLE",value:new We.LookupList(t.lookups,wi)}])}},Ai={parse:function(t,e){var i=new Ye.Parser(t,e),r=i.parseULong();De.argument(1===r,"Unsupported META table version."),i.parseULong(),i.parseULong();for(var n=i.parseULong(),o={},s=0;s<n;s++){var a=i.parseTag(),h=i.parseULong(),l=i.parseULong(),u=Be.UTF8(t,e+h,l);o[a]=u}return o},make:function(t){var e=Object.keys(t).length,i="",r=16+12*e,n=new We.Table("meta",[{name:"version",type:"ULONG",value:1},{name:"flags",type:"ULONG",value:0},{name:"offset",type:"ULONG",value:r},{name:"numTags",type:"ULONG",value:e}]);for(var o in t){var s=i.length;i+=t[o],n.fields.push({name:"tag "+o,type:"TAG",value:o}),n.fields.push({name:"offset "+o,type:"ULONG",value:r+s}),n.fields.push({name:"length "+o,type:"ULONG",value:t[o].length})}return n.fields.push({name:"stringPool",type:"CHARARRAY",value:i}),n}},Mi={make:ft,fontToTable:function(t){for(var e,i=[],r=[],n=[],o=[],s=[],a=[],h=[],l=0,u=0,c=0,p=0,d=0,f=0;f<t.glyphs.length;f+=1){var m=t.glyphs.get(f),y=0|m.unicode;if(isNaN(m.advanceWidth))throw new Error("Glyph "+m.name+" ("+f+"): advanceWidth is not a number.");(e>y||void 0===e)&&y>0&&(e=y),l<y&&(l=y);var v=_i.getUnicodeRange(y);if(v<32)u|=1<<v;else if(v<64)c|=1<<v-32;else if(v<96)p|=1<<v-64;else{if(!(v<123))throw new Error("Unicode ranges bits > 123 are reserved for internal usage");d|=1<<v-96}if(".notdef"!==m.name){var g=m.getMetrics();i.push(g.xMin),r.push(g.yMin),n.push(g.xMax),o.push(g.yMax),a.push(g.leftSideBearing),h.push(g.rightSideBearing),s.push(m.advanceWidth)}}var _={xMin:Math.min.apply(null,i),yMin:Math.min.apply(null,r),xMax:Math.max.apply(null,n),yMax:Math.max.apply(null,o),advanceWidthMax:Math.max.apply(null,s),advanceWidthAvg:function(t){for(var e=0,i=0;i<t.length;i+=1)e+=t[i];return e/t.length}(s),minLeftSideBearing:Math.min.apply(null,a),maxLeftSideBearing:Math.max.apply(null,a),minRightSideBearing:Math.min.apply(null,h)};_.ascender=t.ascender,_.descender=t.descender;var b=oi.make({flags:3,unitsPerEm:t.unitsPerEm,xMin:_.xMin,yMin:_.yMin,xMax:_.xMax,yMax:_.yMax,lowestRecPPEM:3,createdTimestamp:t.createdTimestamp}),S=si.make({ascender:_.ascender,descender:_.descender,advanceWidthMax:_.advanceWidthMax,minLeftSideBearing:_.minLeftSideBearing,minRightSideBearing:_.minRightSideBearing,xMaxExtent:_.maxLeftSideBearing+(_.xMax-_.xMin),numberOfHMetrics:t.glyphs.length}),x=li.make(t.glyphs.length),w=_i.make({xAvgCharWidth:Math.round(_.advanceWidthAvg),usWeightClass:t.tables.os2.usWeightClass,usWidthClass:t.tables.os2.usWidthClass,usFirstCharIndex:e,usLastCharIndex:l,ulUnicodeRange1:u,ulUnicodeRange2:c,ulUnicodeRange3:p,ulUnicodeRange4:d,fsSelection:t.tables.os2.fsSelection,sTypoAscender:_.ascender,sTypoDescender:_.descender,sTypoLineGap:0,usWinAscent:_.yMax,usWinDescent:Math.abs(_.yMin),ulCodePageRange1:1,sxHeight:mt(t,"xyvw",{yMax:Math.round(_.ascender/2)}).yMax,sCapHeight:mt(t,"HIKLEFJMNTZBDPRAGOQSUVWXY",_).yMax,usDefaultChar:t.hasChar(" ")?32:0,usBreakChar:t.hasChar(" ")?32:0}),T=ai.make(t.glyphs),A=Qe.make(t.glyphs),M=t.getEnglishName("fontFamily"),P=t.getEnglishName("fontSubfamily"),E=M+" "+P,k=t.getEnglishName("postScriptName");k||(k=M.replace(/\s/g,"")+"-"+P);var C={};for(var R in t.names)C[R]=t.names[R];C.uniqueID||(C.uniqueID={en:t.getEnglishName("manufacturer")+":"+E}),C.postScriptName||(C.postScriptName={en:k}),C.preferredFamily||(C.preferredFamily=t.names.fontFamily),C.preferredSubfamily||(C.preferredSubfamily=t.names.fontSubfamily);var O=[],L=vi.make(C,O),F=O.length>0?hi.make(O):void 0,I=bi.make(),D=ni.make(t.glyphs,{version:t.getEnglishName("version"),fullName:E,familyName:M,weightName:P,postScriptName:k,unitsPerEm:t.unitsPerEm,fontBBox:[0,_.yMin,_.ascender,_.advanceWidthMax]}),U=t.metas&&Object.keys(t.metas).length>0?Ai.make(t.metas):void 0,B=[b,S,x,w,L,A,I,D,T];F&&B.push(F),t.tables.gsub&&B.push(Ti.make(t.tables.gsub)),U&&B.push(U);for(var N=ft(B),G=pt(N.encode()),q=N.fields,V=!1,j=0;j<q.length;j+=1)if("head table"===q[j].name){q[j].value.checkSumAdjustment=2981146554-G,V=!0;break}if(!V)throw new Error("Could not find head table with checkSum to adjust.");return N},computeCheckSum:pt};_t.prototype={searchTag:yt,binSearch:vt,getTable:function(t){var e=this.font.tables[this.tableName];return!e&&t&&(e=this.font.tables[this.tableName]=this.createDefaultTable()),e},getScriptNames:function(){var t=this.getTable();return t?t.scripts.map(function(t){return t.tag}):[]},getDefaultScriptName:function(){var t=this.getTable();if(t){for(var e=!1,i=0;i<t.scripts.length;i++){var r=t.scripts[i].tag;if("DFLT"===r)return r;"latn"===r&&(e=!0)}return e?"latn":void 0}},getScriptTable:function(t,e){var i=this.getTable(e);if(i){t=t||"DFLT";var r=i.scripts,n=yt(i.scripts,t);if(n>=0)return r[n].script;if(e){var o={tag:t,script:{defaultLangSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]},langSysRecords:[]}};return r.splice(-1-n,0,o),o.script}}},getLangSysTable:function(t,e,i){var r=this.getScriptTable(t,i);if(r){if(!e||"dflt"===e||"DFLT"===e)return r.defaultLangSys;var n=yt(r.langSysRecords,e);if(n>=0)return r.langSysRecords[n].langSys;if(i){var o={tag:e,langSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]}};return r.langSysRecords.splice(-1-n,0,o),o.langSys}}},getFeatureTable:function(t,e,i,r){var n=this.getLangSysTable(t,e,r);if(n){for(var o,s=n.featureIndexes,a=this.font.tables[this.tableName].features,h=0;h<s.length;h++)if((o=a[s[h]]).tag===i)return o.feature;if(r){var l=a.length;return De.assert(0===l||i>=a[l-1].tag,"Features must be added in alphabetical order."),o={tag:i,feature:{params:0,lookupListIndexes:[]}},a.push(o),s.push(l),o.feature}}},getLookupTables:function(t,e,i,r,n){var o=this.getFeatureTable(t,e,i,n),s=[];if(o){for(var a,h=o.lookupListIndexes,l=this.font.tables[this.tableName].lookups,u=0;u<h.length;u++)(a=l[h[u]]).lookupType===r&&s.push(a);if(0===s.length&&n){a={lookupType:r,lookupFlag:0,subtables:[],markFilteringSet:void 0};var c=l.length;return l.push(a),h.push(c),[a]}}return s},getGlyphClass:function(t,e){switch(t.format){case 1:return t.startGlyph<=e&&e<t.startGlyph+t.classes.length?t.classes[e-t.startGlyph]:0;case 2:var i=gt(t.ranges,e);return i?i.classId:0}},getCoverageIndex:function(t,e){switch(t.format){case 1:var i=vt(t.glyphs,e);return i>=0?i:-1;case 2:var r=gt(t.ranges,e);return r?r.index+e-r.start:-1}},expandCoverage:function(t){if(1===t.format)return t.glyphs;for(var e=[],i=t.ranges,r=0;r<i.length;r++)for(var n=i[r],o=n.start,s=n.end,a=o;a<=s;a++)e.push(a);return e}},bt.prototype=_t.prototype,bt.prototype.init=function(){var t=this.getDefaultScriptName();this.defaultKerningTables=this.getKerningTables(t)},bt.prototype.getKerningValue=function(t,e,i){for(var r=this,n=0;n<t.length;n++)for(var o=t[n].subtables,s=0;s<o.length;s++){var a=o[s],h=r.getCoverageIndex(a.coverage,e);if(!(h<0))switch(a.posFormat){case 1:for(var l=a.pairSets[h],u=0;u<l.length;u++){var c=l[u];if(c.secondGlyph===i)return c.value1&&c.value1.xAdvance||0}break;case 2:var p=r.getGlyphClass(a.classDef1,e),d=r.getGlyphClass(a.classDef2,i),f=a.classRecords[p][d];return f.value1&&f.value1.xAdvance||0}}return 0},bt.prototype.getKerningTables=function(t,e){if(this.font.tables.gpos)return this.getLookupTables(t,e,"kern",2)},St.prototype=_t.prototype,St.prototype.createDefaultTable=function(){return{version:1,scripts:[{tag:"DFLT",script:{defaultLangSys:{reserved:0,reqFeatureIndex:65535,featureIndexes:[]},langSysRecords:[]}}],features:[],lookups:[]}},St.prototype.getSingle=function(t,e,i){for(var r=[],n=this.getLookupTables(e,i,t,1),o=0;o<n.length;o++)for(var s=n[o].subtables,a=0;a<s.length;a++){var h=s[a],l=this.expandCoverage(h.coverage),u=void 0;if(1===h.substFormat){var c=h.deltaGlyphId;for(u=0;u<l.length;u++){var p=l[u];r.push({sub:p,by:p+c})}}else{var d=h.substitute;for(u=0;u<l.length;u++)r.push({sub:l[u],by:d[u]})}}return r},St.prototype.getAlternates=function(t,e,i){for(var r=[],n=this.getLookupTables(e,i,t,3),o=0;o<n.length;o++)for(var s=n[o].subtables,a=0;a<s.length;a++)for(var h=s[a],l=this.expandCoverage(h.coverage),u=h.alternateSets,c=0;c<l.length;c++)r.push({sub:l[c],by:u[c]});return r},St.prototype.getLigatures=function(t,e,i){for(var r=[],n=this.getLookupTables(e,i,t,4),o=0;o<n.length;o++)for(var s=n[o].subtables,a=0;a<s.length;a++)for(var h=s[a],l=this.expandCoverage(h.coverage),u=h.ligatureSets,c=0;c<l.length;c++)for(var p=l[c],d=u[c],f=0;f<d.length;f++){var m=d[f];r.push({sub:[p].concat(m.components),by:m.ligGlyph})}return r},St.prototype.addSingle=function(t,e,i,r){var n=this.getLookupTables(i,r,t,1,!0)[0],o=wt(n,2,{substFormat:2,coverage:{format:1,glyphs:[]},substitute:[]});De.assert(1===o.coverage.format,"Ligature: unable to modify coverage table format "+o.coverage.format);var s=e.sub,a=this.binSearch(o.coverage.glyphs,s);a<0&&(a=-1-a,o.coverage.glyphs.splice(a,0,s),o.substitute.splice(a,0,0)),o.substitute[a]=e.by},St.prototype.addAlternate=function(t,e,i,r){var n=this.getLookupTables(i,r,t,3,!0)[0],o=wt(n,1,{substFormat:1,coverage:{format:1,glyphs:[]},alternateSets:[]});De.assert(1===o.coverage.format,"Ligature: unable to modify coverage table format "+o.coverage.format);var s=e.sub,a=this.binSearch(o.coverage.glyphs,s);a<0&&(a=-1-a,o.coverage.glyphs.splice(a,0,s),o.alternateSets.splice(a,0,0)),o.alternateSets[a]=e.by},St.prototype.addLigature=function(t,e,i,r){var n=this.getLookupTables(i,r,t,4,!0)[0],o=n.subtables[0];o||(o={substFormat:1,coverage:{format:1,glyphs:[]},ligatureSets:[]},n.subtables[0]=o),De.assert(1===o.coverage.format,"Ligature: unable to modify coverage table format "+o.coverage.format);var s=e.sub[0],a=e.sub.slice(1),h={ligGlyph:e.by,components:a},l=this.binSearch(o.coverage.glyphs,s);if(l>=0){for(var u=o.ligatureSets[l],c=0;c<u.length;c++)if(xt(u[c].components,a))return;u.push(h)}else l=-1-l,o.coverage.glyphs.splice(l,0,s),o.ligatureSets.splice(l,0,[h])},St.prototype.getFeature=function(t,e,i){if(/ss\d\d/.test(t))return this.getSingle(t,e,i);switch(t){case"aalt":case"salt":return this.getSingle(t,e,i).concat(this.getAlternates(t,e,i));case"dlig":case"liga":case"rlig":return this.getLigatures(t,e,i)}},St.prototype.add=function(t,e,i,r){if(/ss\d\d/.test(t))return this.addSingle(t,e,i,r);switch(t){case"aalt":case"salt":return"number"==typeof e.by?this.addSingle(t,e,i,r):this.addAlternate(t,e,i,r);case"dlig":case"liga":case"rlig":return this.addLigature(t,e,i,r)}};var Pi,Ei,ki,Ci,Ri={getPath:Ct,parse:function(t,e,i,r){for(var n=new ei.GlyphSet(r),o=0;o<i.length-1;o+=1){var s=i[o];s!==i[o+1]?n.push(o,ei.ttfGlyphLoader(r,o,Et,t,e+s,Rt)):n.push(o,ei.glyphLoader(r,o))}return n}},Oi=function(t){var e=this.srPeriod,i=this.srPhase,r=this.srThreshold,n=1;return t<0&&(t=-t,n=-1),t+=r-i,t=Math.trunc(t/e)*e,(t+=i)<0?i*n:t*n},Li={x:1,y:0,axis:"x",distance:function(t,e,i,r){return(i?t.xo:t.x)-(r?e.xo:e.x)},interpolate:function(t,e,i,r){var n,o,s,a,h,l,u;return r&&r!==this?(n=r.distance(t,e,!0,!0),o=r.distance(t,i,!0,!0),h=r.distance(e,e,!1,!0),l=r.distance(i,i,!1,!0),s=Math.abs(n),a=Math.abs(o),0===(u=s+a)?void Li.setRelative(t,t,(h+l)/2,r,!0):void Li.setRelative(t,t,(h*a+l*s)/u,r,!0)):(n=t.xo-e.xo,o=t.xo-i.xo,h=e.x-e.xo,l=i.x-i.xo,s=Math.abs(n),a=Math.abs(o),0===(u=s+a)?void(t.x=t.xo+(h+l)/2):void(t.x=t.xo+(h*a+l*s)/u))},normalSlope:Number.NEGATIVE_INFINITY,setRelative:function(t,e,i,r,n){if(r&&r!==this){var o=n?e.xo:e.x,s=n?e.yo:e.y,a=o+i*r.x,h=s+i*r.y;t.x=a+(t.y-h)/r.normalSlope}else t.x=(n?e.xo:e.x)+i},slope:0,touch:function(t){t.xTouched=!0},touched:function(t){return t.xTouched},untouch:function(t){t.xTouched=!1}},Fi={x:0,y:1,axis:"y",distance:function(t,e,i,r){return(i?t.yo:t.y)-(r?e.yo:e.y)},interpolate:function(t,e,i,r){var n,o,s,a,h,l,u;return r&&r!==this?(n=r.distance(t,e,!0,!0),o=r.distance(t,i,!0,!0),h=r.distance(e,e,!1,!0),l=r.distance(i,i,!1,!0),s=Math.abs(n),a=Math.abs(o),0===(u=s+a)?void Fi.setRelative(t,t,(h+l)/2,r,!0):void Fi.setRelative(t,t,(h*a+l*s)/u,r,!0)):(n=t.yo-e.yo,o=t.yo-i.yo,h=e.y-e.yo,l=i.y-i.yo,s=Math.abs(n),a=Math.abs(o),0===(u=s+a)?void(t.y=t.yo+(h+l)/2):void(t.y=t.yo+(h*a+l*s)/u))},normalSlope:0,setRelative:function(t,e,i,r,n){if(r&&r!==this){var o=n?e.xo:e.x,s=n?e.yo:e.y,a=o+i*r.x,h=s+i*r.y;t.y=h+r.normalSlope*(t.x-a)}else t.y=(n?e.yo:e.y)+i},slope:Number.POSITIVE_INFINITY,touch:function(t){t.yTouched=!0},touched:function(t){return t.yTouched},untouch:function(t){t.yTouched=!1}};Object.freeze(Li),Object.freeze(Fi),Nt.prototype.distance=function(t,e,i,r){return this.x*Li.distance(t,e,i,r)+this.y*Fi.distance(t,e,i,r)},Nt.prototype.interpolate=function(t,e,i,r){var n,o,s,a,h,l,u;s=r.distance(t,e,!0,!0),a=r.distance(t,i,!0,!0),n=r.distance(e,e,!1,!0),o=r.distance(i,i,!1,!0),h=Math.abs(s),l=Math.abs(a),0!==(u=h+l)?this.setRelative(t,t,(n*l+o*h)/u,r,!0):this.setRelative(t,t,(n+o)/2,r,!0)},Nt.prototype.setRelative=function(t,e,i,r,n){r=r||this;var o=n?e.xo:e.x,s=n?e.yo:e.y,a=o+i*r.x,h=s+i*r.y,l=r.normalSlope,u=this.slope,c=t.x,p=t.y;t.x=(u*c-l*a+h-p)/(u-l),t.y=u*(t.x-c)+p},Nt.prototype.touch=function(t){t.xTouched=!0,t.yTouched=!0},qt.prototype.nextTouched=function(t){for(var e=this.nextPointOnContour;!t.touched(e)&&e!==this;)e=e.nextPointOnContour;return e},qt.prototype.prevTouched=function(t){for(var e=this.prevPointOnContour;!t.touched(e)&&e!==this;)e=e.prevPointOnContour;return e};var Ii=Object.freeze(new qt(0,0)),Di={cvCutIn:17/16,deltaBase:9,deltaShift:.125,loop:1,minDis:1,autoFlip:!0};Ot.prototype.exec=function(t,i){if("number"!=typeof i)throw new Error("Point size is not a number!");if(!(this._errorState>2)){var r=this.font,n=this._prepState;if(!n||n.ppem!==i){var o=this._fpgmState;if(!o){Vt.prototype=Di,(o=this._fpgmState=new Vt("fpgm",r.tables.fpgm)).funcs=[],o.font=r,e.DEBUG&&(console.log("---EXEC FPGM---"),o.step=-1);try{Ei(o)}catch(t){return console.log("Hinting error in FPGM:"+t),void(this._errorState=3)}}Vt.prototype=o,(n=this._prepState=new Vt("prep",r.tables.prep)).ppem=i;var s=r.tables.cvt;if(s)for(var a=n.cvt=new Array(s.length),h=i/r.unitsPerEm,l=0;l<s.length;l++)a[l]=s[l]*h;else n.cvt=[];e.DEBUG&&(console.log("---EXEC PREP---"),n.step=-1);try{Ei(n)}catch(t){this._errorState<2&&console.log("Hinting error in PREP:"+t),this._errorState=2}}if(!(this._errorState>1))try{return ki(t,n)}catch(t){return this._errorState<1&&(console.log("Hinting error:"+t),console.log("Note: further hinting errors are silenced")),void(this._errorState=1)}}},ki=function(t,i){var r,n,o,s=i.ppem/i.font.unitsPerEm,a=s,h=t.components;if(Vt.prototype=i,h){var l=i.font;n=[],r=[];for(var u=0;u<h.length;u++){var c=h[u],p=l.glyphs.get(c.glyphIndex);o=new Vt("glyf",p.instructions),e.DEBUG&&(console.log("---EXEC COMP "+u+"---"),o.step=-1),Ci(p,o,s,a);for(var d=Math.round(c.dx*s),f=Math.round(c.dy*a),m=o.gZone,y=o.contours,v=0;v<m.length;v++){var g=m[v];g.xTouched=g.yTouched=!1,g.xo=g.x=g.x+d,g.yo=g.y=g.y+f}var _=n.length;n.push.apply(n,m);for(var b=0;b<y.length;b++)r.push(y[b]+_)}t.instructions&&!o.inhibitGridFit&&((o=new Vt("glyf",t.instructions)).gZone=o.z0=o.z1=o.z2=n,o.contours=r,n.push(new qt(0,0),new qt(Math.round(t.advanceWidth*s),0)),e.DEBUG&&(console.log("---EXEC COMPOSITE---"),o.step=-1),Ei(o),n.length-=2)}else o=new Vt("glyf",t.instructions),e.DEBUG&&(console.log("---EXEC GLYPH---"),o.step=-1),Ci(t,o,s,a),n=o.gZone;return n},Ci=function(t,i,r,n){for(var o,s=t.points||[],a=s.length,h=i.gZone=i.z0=i.z1=i.z2=[],l=i.contours=[],u=0;u<a;u++)o=s[u],h[u]=new qt(o.x*r,o.y*n,o.lastPointOfContour,o.onCurve);for(var c,p,d=0;d<a;d++)o=h[d],c||(c=o,l.push(d)),o.lastPointOfContour?(o.nextPointOnContour=c,c.prevPointOnContour=o,c=void 0):(p=h[d+1],o.nextPointOnContour=p,p.prevPointOnContour=o);if(!i.inhibitGridFit){if(e.DEBUG){console.log("PROCESSING GLYPH",i.stack);for(var f=0;f<a;f++)console.log(f,h[f].x,h[f].y)}if(h.push(new qt(0,0),new qt(Math.round(t.advanceWidth*r),0)),Ei(i),h.length-=2,e.DEBUG){console.log("FINISHED GLYPH",i.stack);for(var m=0;m<a;m++)console.log(m,h[m].x,h[m].y)}}},Ei=function(t){var i=t.prog;if(i){var r,n=i.length;for(t.ip=0;t.ip<n;t.ip++){if(e.DEBUG&&t.step++,!(r=Pi[i[t.ip]]))throw new Error("unknown instruction: 0x"+Number(i[t.ip]).toString(16));r(t)}}},Pi=[Wt.bind(void 0,Fi),Wt.bind(void 0,Li),Ht.bind(void 0,Fi),Ht.bind(void 0,Li),Xt.bind(void 0,Fi),Xt.bind(void 0,Li),Yt.bind(void 0,0),Yt.bind(void 0,1),Qt.bind(void 0,0),Qt.bind(void 0,1),function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"SPVFS[]",r,n),t.pv=t.dpv=Gt(n,r)},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"SPVFS[]",r,n),t.fv=Gt(n,r)},function(t){var i=t.stack,r=t.pv;e.DEBUG&&console.log(t.step,"GPV[]"),i.push(16384*r.x),i.push(16384*r.y)},function(t){var i=t.stack,r=t.fv;e.DEBUG&&console.log(t.step,"GFV[]"),i.push(16384*r.x),i.push(16384*r.y)},function(t){t.fv=t.pv,e.DEBUG&&console.log(t.step,"SFVTPV[]")},function(t){var i=t.stack,r=i.pop(),n=i.pop(),o=i.pop(),s=i.pop(),a=i.pop(),h=t.z0,l=t.z1,u=h[r],c=h[n],p=l[o],d=l[s],f=t.z2[a];e.DEBUG&&console.log("ISECT[], ",r,n,o,s,a);var m=u.x,y=u.y,v=c.x,g=c.y,_=p.x,b=p.y,S=d.x,x=d.y,w=(m-v)*(b-x)-(y-g)*(_-S),T=m*g-y*v,A=_*x-b*S;f.x=(T*(_-S)-A*(m-v))/w,f.y=(T*(b-x)-A*(y-g))/w},function(t){t.rp0=t.stack.pop(),e.DEBUG&&console.log(t.step,"SRP0[]",t.rp0)},function(t){t.rp1=t.stack.pop(),e.DEBUG&&console.log(t.step,"SRP1[]",t.rp1)},function(t){t.rp2=t.stack.pop(),e.DEBUG&&console.log(t.step,"SRP2[]",t.rp2)},function(t){var i=t.stack.pop();switch(e.DEBUG&&console.log(t.step,"SZP0[]",i),t.zp0=i,i){case 0:t.tZone||jt(t),t.z0=t.tZone;break;case 1:t.z0=t.gZone;break;default:throw new Error("Invalid zone pointer")}},function(t){var i=t.stack.pop();switch(e.DEBUG&&console.log(t.step,"SZP1[]",i),t.zp1=i,i){case 0:t.tZone||jt(t),t.z1=t.tZone;break;case 1:t.z1=t.gZone;break;default:throw new Error("Invalid zone pointer")}},function(t){var i=t.stack.pop();switch(e.DEBUG&&console.log(t.step,"SZP2[]",i),t.zp2=i,i){case 0:t.tZone||jt(t),t.z2=t.tZone;break;case 1:t.z2=t.gZone;break;default:throw new Error("Invalid zone pointer")}},function(t){var i=t.stack.pop();switch(e.DEBUG&&console.log(t.step,"SZPS[]",i),t.zp0=t.zp1=t.zp2=i,i){case 0:t.tZone||jt(t),t.z0=t.z1=t.z2=t.tZone;break;case 1:t.z0=t.z1=t.z2=t.gZone;break;default:throw new Error("Invalid zone pointer")}},function(t){t.loop=t.stack.pop(),e.DEBUG&&console.log(t.step,"SLOOP[]",t.loop)},function(t){e.DEBUG&&console.log(t.step,"RTG[]"),t.round=Ft},function(t){e.DEBUG&&console.log(t.step,"RTHG[]"),t.round=Dt},function(t){var i=t.stack.pop();e.DEBUG&&console.log(t.step,"SMD[]",i),t.minDis=i/64},function(t){e.DEBUG&&console.log(t.step,"ELSE[]"),zt(t,!1)},function(t){var i=t.stack.pop();e.DEBUG&&console.log(t.step,"JMPR[]",i),t.ip+=i-1},function(t){var i=t.stack.pop();e.DEBUG&&console.log(t.step,"SCVTCI[]",i),t.cvCutIn=i/64},void 0,void 0,function(t){var i=t.stack;e.DEBUG&&console.log(t.step,"DUP[]"),i.push(i[i.length-1])},Zt,function(t){e.DEBUG&&console.log(t.step,"CLEAR[]"),t.stack.length=0},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"SWAP[]"),i.push(r),i.push(n)},function(t){var i=t.stack;e.DEBUG&&console.log(t.step,"DEPTH[]"),i.push(i.length)},function(t){var i=t.stack,r=i.pop();e.DEBUG&&console.log(t.step,"CINDEX[]",r),i.push(i[i.length-r])},function(t){var i=t.stack,r=i.pop();e.DEBUG&&console.log(t.step,"MINDEX[]",r),i.push(i.splice(i.length-r,1)[0])},void 0,void 0,void 0,function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"LOOPCALL[]",r,n);var o=t.ip,s=t.prog;t.prog=t.funcs[r];for(var a=0;a<n;a++)Ei(t),e.DEBUG&&console.log(++t.step,a+1<n?"next loopcall":"done loopcall",a);t.ip=o,t.prog=s},function(t){var i=t.stack.pop();e.DEBUG&&console.log(t.step,"CALL[]",i);var r=t.ip,n=t.prog;t.prog=t.funcs[i],Ei(t),t.ip=r,t.prog=n,e.DEBUG&&console.log(++t.step,"returning from",i)},function(t){if("fpgm"!==t.env)throw new Error("FDEF not allowed here");var i=t.stack,r=t.prog,n=t.ip,o=i.pop(),s=n;for(e.DEBUG&&console.log(t.step,"FDEF[]",o);45!==r[++n];);t.ip=n,t.funcs[o]=r.slice(s+1,n)},void 0,Jt.bind(void 0,0),Jt.bind(void 0,1),Kt.bind(void 0,Fi),Kt.bind(void 0,Li),$t.bind(void 0,0),$t.bind(void 0,1),te.bind(void 0,0),te.bind(void 0,1),ee.bind(void 0,0),ee.bind(void 0,1),function(t){for(var i=t.stack,r=t.loop,n=t.fv,o=i.pop()/64,s=t.z2;r--;){var a=i.pop(),h=s[a];e.DEBUG&&console.log(t.step,(t.loop>1?"loop "+(t.loop-r)+": ":"")+"SHPIX[]",a,o),n.setRelative(h,h,o),n.touch(h)}t.loop=1},function(t){for(var i=t.stack,r=t.rp1,n=t.rp2,o=t.loop,s=t.z0[r],a=t.z1[n],h=t.fv,l=t.dpv,u=t.z2;o--;){var c=i.pop(),p=u[c];e.DEBUG&&console.log(t.step,(t.loop>1?"loop "+(t.loop-o)+": ":"")+"IP[]",c,r,"<->",n),h.interpolate(p,s,a,l),h.touch(p)}t.loop=1},ie.bind(void 0,0),ie.bind(void 0,1),function(t){for(var i=t.stack,r=t.rp0,n=t.z0[r],o=t.loop,s=t.fv,a=t.pv,h=t.z1;o--;){var l=i.pop(),u=h[l];e.DEBUG&&console.log(t.step,(t.loop>1?"loop "+(t.loop-o)+": ":"")+"ALIGNRP[]",l),s.setRelative(u,n,0,a),s.touch(u)}t.loop=1},function(t){e.DEBUG&&console.log(t.step,"RTDG[]"),t.round=It},re.bind(void 0,0),re.bind(void 0,1),function(t){var i=t.prog,r=t.ip,n=t.stack,o=i[++r];e.DEBUG&&console.log(t.step,"NPUSHB[]",o);for(var s=0;s<o;s++)n.push(i[++r]);t.ip=r},function(t){var i=t.ip,r=t.prog,n=t.stack,o=r[++i];e.DEBUG&&console.log(t.step,"NPUSHW[]",o);for(var s=0;s<o;s++){var a=r[++i]<<8|r[++i];32768&a&&(a=-(1+(65535^a))),n.push(a)}t.ip=i},function(t){var i=t.stack,r=t.store;r||(r=t.store=[]);var n=i.pop(),o=i.pop();e.DEBUG&&console.log(t.step,"WS",n,o),r[o]=n},function(t){var i=t.stack,r=t.store,n=i.pop();e.DEBUG&&console.log(t.step,"RS",n);var o=r&&r[n]||0;i.push(o)},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"WCVTP",r,n),t.cvt[n]=r/64},function(t){var i=t.stack,r=i.pop();e.DEBUG&&console.log(t.step,"RCVT",r),i.push(64*t.cvt[r])},ne.bind(void 0,0),ne.bind(void 0,1),void 0,oe.bind(void 0,0),oe.bind(void 0,1),function(t){e.DEBUG&&console.log(t.step,"MPPEM[]"),t.stack.push(t.ppem)},void 0,function(t){e.DEBUG&&console.log(t.step,"FLIPON[]"),t.autoFlip=!0},void 0,void 0,function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"LT[]",r,n),i.push(n<r?1:0)},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"LTEQ[]",r,n),i.push(n<=r?1:0)},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"GT[]",r,n),i.push(n>r?1:0)},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"GTEQ[]",r,n),i.push(n>=r?1:0)},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"EQ[]",r,n),i.push(r===n?1:0)},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"NEQ[]",r,n),i.push(r!==n?1:0)},function(t){var i=t.stack,r=i.pop();e.DEBUG&&console.log(t.step,"ODD[]",r),i.push(Math.trunc(r)%2?1:0)},function(t){var i=t.stack,r=i.pop();e.DEBUG&&console.log(t.step,"EVEN[]",r),i.push(Math.trunc(r)%2?0:1)},function(t){var i=t.stack.pop();e.DEBUG&&console.log(t.step,"IF[]",i),i||(zt(t,!0),e.DEBUG&&console.log(t.step,"EIF[]"))},function(t){e.DEBUG&&console.log(t.step,"EIF[]")},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"AND[]",r,n),i.push(r&&n?1:0)},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"OR[]",r,n),i.push(r||n?1:0)},function(t){var i=t.stack,r=i.pop();e.DEBUG&&console.log(t.step,"NOT[]",r),i.push(r?0:1)},se.bind(void 0,1),function(t){var i=t.stack.pop();e.DEBUG&&console.log(t.step,"SDB[]",i),t.deltaBase=i},function(t){var i=t.stack.pop();e.DEBUG&&console.log(t.step,"SDS[]",i),t.deltaShift=Math.pow(.5,i)},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"ADD[]",r,n),i.push(n+r)},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"SUB[]",r,n),i.push(n-r)},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"DIV[]",r,n),i.push(64*n/r)},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"MUL[]",r,n),i.push(n*r/64)},function(t){var i=t.stack,r=i.pop();e.DEBUG&&console.log(t.step,"ABS[]",r),i.push(Math.abs(r))},function(t){var i=t.stack,r=i.pop();e.DEBUG&&console.log(t.step,"NEG[]",r),i.push(-r)},function(t){var i=t.stack,r=i.pop();e.DEBUG&&console.log(t.step,"FLOOR[]",r),i.push(64*Math.floor(r/64))},function(t){var i=t.stack,r=i.pop();e.DEBUG&&console.log(t.step,"CEILING[]",r),i.push(64*Math.ceil(r/64))},ae.bind(void 0,0),ae.bind(void 0,1),ae.bind(void 0,2),ae.bind(void 0,3),void 0,void 0,void 0,void 0,function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"WCVTF[]",r,n),t.cvt[n]=r*t.ppem/t.font.unitsPerEm},se.bind(void 0,2),se.bind(void 0,3),he.bind(void 0,1),he.bind(void 0,2),he.bind(void 0,3),function(t){var i,r=t.stack.pop();switch(e.DEBUG&&console.log(t.step,"SROUND[]",r),t.round=Oi,192&r){case 0:i=.5;break;case 64:i=1;break;case 128:i=2;break;default:throw new Error("invalid SROUND value")}switch(t.srPeriod=i,48&r){case 0:t.srPhase=0;break;case 16:t.srPhase=.25*i;break;case 32:t.srPhase=.5*i;break;case 48:t.srPhase=.75*i;break;default:throw new Error("invalid SROUND value")}r&=15,t.srThreshold=0===r?0:(r/8-.5)*i},function(t){var i,r=t.stack.pop();switch(e.DEBUG&&console.log(t.step,"S45ROUND[]",r),t.round=Oi,192&r){case 0:i=Math.sqrt(2)/2;break;case 64:i=Math.sqrt(2);break;case 128:i=2*Math.sqrt(2);break;default:throw new Error("invalid S45ROUND value")}switch(t.srPeriod=i,48&r){case 0:t.srPhase=0;break;case 16:t.srPhase=.25*i;break;case 32:t.srPhase=.5*i;break;case 48:t.srPhase=.75*i;break;default:throw new Error("invalid S45ROUND value")}r&=15,t.srThreshold=0===r?0:(r/8-.5)*i},void 0,void 0,function(t){e.DEBUG&&console.log(t.step,"ROFF[]"),t.round=Lt},void 0,function(t){e.DEBUG&&console.log(t.step,"RUTG[]"),t.round=Ut},function(t){e.DEBUG&&console.log(t.step,"RDTG[]"),t.round=Bt},Zt,Zt,void 0,void 0,void 0,void 0,void 0,function(t){var i=t.stack.pop();e.DEBUG&&console.log(t.step,"SCANCTRL[]",i)},le.bind(void 0,0),le.bind(void 0,1),function(t){var i=t.stack,r=i.pop(),n=0;e.DEBUG&&console.log(t.step,"GETINFO[]",r),1&r&&(n=35),32&r&&(n|=4096),i.push(n)},void 0,function(t){var i=t.stack,r=i.pop(),n=i.pop(),o=i.pop();e.DEBUG&&console.log(t.step,"ROLL[]"),i.push(n),i.push(r),i.push(o)},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"MAX[]",r,n),i.push(Math.max(n,r))},function(t){var i=t.stack,r=i.pop(),n=i.pop();e.DEBUG&&console.log(t.step,"MIN[]",r,n),i.push(Math.min(n,r))},function(t){var i=t.stack.pop();e.DEBUG&&console.log(t.step,"SCANTYPE[]",i)},function(t){var i=t.stack.pop(),r=t.stack.pop();switch(e.DEBUG&&console.log(t.step,"INSTCTRL[]",i,r),i){case 1:return void(t.inhibitGridFit=!!r);case 2:return void(t.ignoreCvt=!!r);default:throw new Error("invalid INSTCTRL[] selector")}},void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,ue.bind(void 0,1),ue.bind(void 0,2),ue.bind(void 0,3),ue.bind(void 0,4),ue.bind(void 0,5),ue.bind(void 0,6),ue.bind(void 0,7),ue.bind(void 0,8),ce.bind(void 0,1),ce.bind(void 0,2),ce.bind(void 0,3),ce.bind(void 0,4),ce.bind(void 0,5),ce.bind(void 0,6),ce.bind(void 0,7),ce.bind(void 0,8),pe.bind(void 0,0,0,0,0,0),pe.bind(void 0,0,0,0,0,1),pe.bind(void 0,0,0,0,0,2),pe.bind(void 0,0,0,0,0,3),pe.bind(void 0,0,0,0,1,0),pe.bind(void 0,0,0,0,1,1),pe.bind(void 0,0,0,0,1,2),pe.bind(void 0,0,0,0,1,3),pe.bind(void 0,0,0,1,0,0),pe.bind(void 0,0,0,1,0,1),pe.bind(void 0,0,0,1,0,2),pe.bind(void 0,0,0,1,0,3),pe.bind(void 0,0,0,1,1,0),pe.bind(void 0,0,0,1,1,1),pe.bind(void 0,0,0,1,1,2),pe.bind(void 0,0,0,1,1,3),pe.bind(void 0,0,1,0,0,0),pe.bind(void 0,0,1,0,0,1),pe.bind(void 0,0,1,0,0,2),pe.bind(void 0,0,1,0,0,3),pe.bind(void 0,0,1,0,1,0),pe.bind(void 0,0,1,0,1,1),pe.bind(void 0,0,1,0,1,2),pe.bind(void 0,0,1,0,1,3),pe.bind(void 0,0,1,1,0,0),pe.bind(void 0,0,1,1,0,1),pe.bind(void 0,0,1,1,0,2),pe.bind(void 0,0,1,1,0,3),pe.bind(void 0,0,1,1,1,0),pe.bind(void 0,0,1,1,1,1),pe.bind(void 0,0,1,1,1,2),pe.bind(void 0,0,1,1,1,3),pe.bind(void 0,1,0,0,0,0),pe.bind(void 0,1,0,0,0,1),pe.bind(void 0,1,0,0,0,2),pe.bind(void 0,1,0,0,0,3),pe.bind(void 0,1,0,0,1,0),pe.bind(void 0,1,0,0,1,1),pe.bind(void 0,1,0,0,1,2),pe.bind(void 0,1,0,0,1,3),pe.bind(void 0,1,0,1,0,0),pe.bind(void 0,1,0,1,0,1),pe.bind(void 0,1,0,1,0,2),pe.bind(void 0,1,0,1,0,3),pe.bind(void 0,1,0,1,1,0),pe.bind(void 0,1,0,1,1,1),pe.bind(void 0,1,0,1,1,2),pe.bind(void 0,1,0,1,1,3),pe.bind(void 0,1,1,0,0,0),pe.bind(void 0,1,1,0,0,1),pe.bind(void 0,1,1,0,0,2),pe.bind(void 0,1,1,0,0,3),pe.bind(void 0,1,1,0,1,0),pe.bind(void 0,1,1,0,1,1),pe.bind(void 0,1,1,0,1,2),pe.bind(void 0,1,1,0,1,3),pe.bind(void 0,1,1,1,0,0),pe.bind(void 0,1,1,1,0,1),pe.bind(void 0,1,1,1,0,2),pe.bind(void 0,1,1,1,0,3),pe.bind(void 0,1,1,1,1,0),pe.bind(void 0,1,1,1,1,1),pe.bind(void 0,1,1,1,1,2),pe.bind(void 0,1,1,1,1,3)];var Ui=Array.from||function(t){return t.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]?|[^\uD800-\uDFFF]|./g)||[]};de.prototype.hasChar=function(t){return null!==this.encoding.charToGlyphIndex(t)},de.prototype.charToGlyphIndex=function(t){return this.encoding.charToGlyphIndex(t)},de.prototype.charToGlyph=function(t){var e=this.charToGlyphIndex(t),i=this.glyphs.get(e);return i||(i=this.glyphs.get(0)),i},de.prototype.stringToGlyphs=function(t,e){e=e||this.defaultRenderOptions;for(var i=Ui(t),r=[],n=0;n<i.length;n+=1){var o=i[n];r.push(this.charToGlyphIndex(o))}var s=r.length;if(e.features){var a=e.script||this.substitution.getDefaultScriptName(),h=[];e.features.liga&&(h=h.concat(this.substitution.getFeature("liga",a,e.language))),e.features.rlig&&(h=h.concat(this.substitution.getFeature("rlig",a,e.language)));for(var l=0;l<s;l+=1)for(var u=0;u<h.length;u++){for(var c=h[u],p=c.sub,d=p.length,f=0;f<d&&p[f]===r[l+f];)f++;f===d&&(r.splice(l,d,c.by),s=s-d+1)}}for(var m=new Array(s),y=this.glyphs.get(0),v=0;v<s;v+=1)m[v]=this.glyphs.get(r[v])||y;return m},de.prototype.nameToGlyphIndex=function(t){return this.glyphNames.nameToGlyphIndex(t)},de.prototype.nameToGlyph=function(t){var e=this.nameToGlyphIndex(t),i=this.glyphs.get(e);return i||(i=this.glyphs.get(0)),i},de.prototype.glyphIndexToName=function(t){return this.glyphNames.glyphIndexToName?this.glyphNames.glyphIndexToName(t):""},de.prototype.getKerningValue=function(t,e){t=t.index||t,e=e.index||e;var i=this.position.defaultKerningTables;return i?this.position.getKerningValue(i,t,e):this.kerningPairs[t+","+e]||0},de.prototype.defaultRenderOptions={kerning:!0,features:{liga:!0,rlig:!0}},de.prototype.forEachGlyph=function(t,e,i,r,n,o){var s=this;e=void 0!==e?e:0,i=void 0!==i?i:0,r=void 0!==r?r:72,n=n||this.defaultRenderOptions;var a,h=1/this.unitsPerEm*r,l=this.stringToGlyphs(t,n);if(n.kerning){var u=n.script||this.position.getDefaultScriptName();a=this.position.getKerningTables(u,n.language)}for(var c=0;c<l.length;c+=1){var p=l[c];o.call(s,p,e,i,r,n),p.advanceWidth&&(e+=p.advanceWidth*h),n.kerning&&c<l.length-1&&(e+=(a?s.position.getKerningValue(a,p.index,l[c+1].index):s.getKerningValue(p,l[c+1]))*h),n.letterSpacing?e+=n.letterSpacing*r:n.tracking&&(e+=n.tracking/1e3*r)}return e},de.prototype.getPath=function(t,e,i,r,n){var o=new m;return this.forEachGlyph(t,e,i,r,n,function(t,e,i,r){var s=t.getPath(e,i,r,n,this);o.extend(s)}),o},de.prototype.getPaths=function(t,e,i,r,n){var o=[];return this.forEachGlyph(t,e,i,r,n,function(t,e,i,r){var s=t.getPath(e,i,r,n,this);o.push(s)}),o},de.prototype.getAdvanceWidth=function(t,e,i){return this.forEachGlyph(t,0,0,e,i,function(){})},de.prototype.draw=function(t,e,i,r,n,o){this.getPath(e,i,r,n,o).draw(t)},de.prototype.drawPoints=function(t,e,i,r,n,o){this.forEachGlyph(e,i,r,n,o,function(e,i,r,n){e.drawPoints(t,i,r,n)})},de.prototype.drawMetrics=function(t,e,i,r,n,o){this.forEachGlyph(e,i,r,n,o,function(e,i,r,n){e.drawMetrics(t,i,r,n)})},de.prototype.getEnglishName=function(t){var e=this.names[t];if(e)return e.en},de.prototype.validate=function(){function t(t){var i=e.getEnglishName(t);i&&i.trim().length}var e=this;t("fontFamily"),t("weightName"),t("manufacturer"),t("copyright"),t("version"),this.unitsPerEm},de.prototype.toTables=function(){return Mi.fontToTable(this)},de.prototype.toBuffer=function(){return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."),this.toArrayBuffer()},de.prototype.toArrayBuffer=function(){for(var t=this.toTables(),e=t.encode(),i=new ArrayBuffer(e.length),r=new Uint8Array(i),n=0;n<e.length;n++)r[n]=e[n];return i},de.prototype.download=function(e){var i=this.getEnglishName("fontFamily"),r=this.getEnglishName("fontSubfamily");e=e||i.replace(/\s/g,"")+"-"+r+".otf";var n=this.toArrayBuffer();if("undefined"!=typeof window)window.requestFileSystem=window.requestFileSystem||window.webkitRequestFileSystem,window.requestFileSystem(window.TEMPORARY,n.byteLength,function(t){t.root.getFile(e,{create:!0},function(t){t.createWriter(function(e){var i=new DataView(n),r=new Blob([i],{type:"font/opentype"});e.write(r),e.addEventListener("writeend",function(){location.href=t.toURL()},!1)})})},function(t){throw new Error(t.name+": "+t.message)});else{var o=t("fs"),s=At(n);o.writeFileSync(e,s)}},de.prototype.fsSelectionValues={ITALIC:1,UNDERSCORE:2,NEGATIVE:4,OUTLINED:8,STRIKEOUT:16,BOLD:32,REGULAR:64,USER_TYPO_METRICS:128,WWS:256,OBLIQUE:512},de.prototype.usWidthClasses={ULTRA_CONDENSED:1,EXTRA_CONDENSED:2,CONDENSED:3,SEMI_CONDENSED:4,MEDIUM:5,SEMI_EXPANDED:6,EXPANDED:7,EXTRA_EXPANDED:8,ULTRA_EXPANDED:9},de.prototype.usWeightClasses={THIN:100,EXTRA_LIGHT:200,LIGHT:300,NORMAL:400,MEDIUM:500,SEMI_BOLD:600,BOLD:700,EXTRA_BOLD:800,BLACK:900};var Bi={make:function(t,e){var i=new We.Table("fvar",[{name:"version",type:"ULONG",value:65536},{name:"offsetToData",type:"USHORT",value:0},{name:"countSizePairs",type:"USHORT",value:2},{name:"axisCount",type:"USHORT",value:t.axes.length},{name:"axisSize",type:"USHORT",value:20},{name:"instanceCount",type:"USHORT",value:t.instances.length},{name:"instanceSize",type:"USHORT",value:4+4*t.axes.length}]);i.offsetToData=i.sizeOf();for(var r=0;r<t.axes.length;r++)i.fields=i.fields.concat(me(r,t.axes[r],e));for(var n=0;n<t.instances.length;n++)i.fields=i.fields.concat(ve(n,t.instances[n],t.axes,e));return i},parse:function(t,e,i){var r=new Ye.Parser(t,e),n=r.parseULong();De.argument(65536===n,"Unsupported fvar table version.");var o=r.parseOffset16();r.skip("uShort",1);for(var s=r.parseUShort(),a=r.parseUShort(),h=r.parseUShort(),l=r.parseUShort(),u=[],c=0;c<s;c++)u.push(ye(t,e+o+c*a,i));for(var p=[],d=e+o+s*a,f=0;f<h;f++)p.push(ge(t,d+f*l,u,i));return{axes:u,instances:p}}},Ni=new Array(10);Ni[1]=function(){var t=this.offset+this.relativeOffset,e=this.parseUShort();return 1===e?{posFormat:1,coverage:this.parsePointer(I.coverage),value:this.parseValueRecord()}:2===e?{posFormat:2,coverage:this.parsePointer(I.coverage),values:this.parseValueRecordList()}:void De.assert(!1,"0x"+t.toString(16)+": GPOS lookup type 1 format must be 1 or 2.")},Ni[2]=function(){var t=this.offset+this.relativeOffset,e=this.parseUShort();De.assert(1===e||2===e,"0x"+t.toString(16)+": GPOS lookup type 2 format must be 1 or 2.");var i=this.parsePointer(I.coverage),r=this.parseUShort(),n=this.parseUShort();if(1===e)return{posFormat:e,coverage:i,valueFormat1:r,valueFormat2:n,pairSets:this.parseList(I.pointer(I.list(function(){return{secondGlyph:this.parseUShort(),value1:this.parseValueRecord(r),value2:this.parseValueRecord(n)}})))};if(2===e){var o=this.parsePointer(I.classDef),s=this.parsePointer(I.classDef),a=this.parseUShort(),h=this.parseUShort();return{posFormat:e,coverage:i,valueFormat1:r,valueFormat2:n,classDef1:o,classDef2:s,class1Count:a,class2Count:h,classRecords:this.parseList(a,I.list(h,function(){return{value1:this.parseValueRecord(r),value2:this.parseValueRecord(n)}}))}}},Ni[3]=function(){return{error:"GPOS Lookup 3 not supported"}},Ni[4]=function(){return{error:"GPOS Lookup 4 not supported"}},Ni[5]=function(){return{error:"GPOS Lookup 5 not supported"}},Ni[6]=function(){return{error:"GPOS Lookup 6 not supported"}},Ni[7]=function(){return{error:"GPOS Lookup 7 not supported"}},Ni[8]=function(){return{error:"GPOS Lookup 8 not supported"}},Ni[9]=function(){return{error:"GPOS Lookup 9 not supported"}};var Gi=new Array(10),qi={parse:function(t,e){var i=new I(t,e=e||0),r=i.parseVersion(1);return De.argument(1===r||1.1===r,"Unsupported GPOS table version "+r),1===r?{version:r,scripts:i.parseScriptList(),features:i.parseFeatureList(),lookups:i.parseLookupList(Ni)}:{version:r,scripts:i.parseScriptList(),features:i.parseFeatureList(),lookups:i.parseLookupList(Ni),variations:i.parseFeatureVariationsList()}},make:function(t){return new We.Table("GPOS",[{name:"version",type:"ULONG",value:65536},{name:"scripts",type:"TABLE",value:new We.ScriptList(t.scripts)},{name:"features",type:"TABLE",value:new We.FeatureList(t.features)},{name:"lookups",type:"TABLE",value:new We.LookupList(t.lookups,Gi)}])}},Vi={parse:function(t,e){var i=new Ye.Parser(t,e),r=i.parseUShort();if(0===r)return function(t){var e={};t.skip("uShort");var i=t.parseUShort();De.argument(0===i,"Unsupported kern sub-table version."),t.skip("uShort",2);var r=t.parseUShort();t.skip("uShort",3);for(var n=0;n<r;n+=1){var o=t.parseUShort(),s=t.parseUShort(),a=t.parseShort();e[o+","+s]=a}return e}(i);if(1===r)return function(t){var e={};t.skip("uShort"),t.parseULong()>1&&console.warn("Only the first kern subtable is supported."),t.skip("uLong");var i=255&t.parseUShort();if(t.skip("uShort"),0===i){var r=t.parseUShort();t.skip("uShort",3);for(var n=0;n<r;n+=1){var o=t.parseUShort(),s=t.parseUShort(),a=t.parseShort();e[o+","+s]=a}}return e}(i);throw new Error("Unsupported kern table version ("+r+").")}},ji={parse:function(t,e,i,r){for(var n=new Ye.Parser(t,e),o=r?n.parseUShort:n.parseULong,s=[],a=0;a<i+1;a+=1){var h=o.call(n);r&&(h*=2),s.push(h)}return s}};e.Font=de,e.Glyph=q,e.Path=m,e.BoundingBox=f,e._parse=Ye,e.parse=xe,e.load=function(t,e){("undefined"==typeof window?_e:function(t,e){var i=new XMLHttpRequest;i.open("get",t,!0),i.responseType="arraybuffer",i.onload=function(){return i.response?e(null,i.response):e("Font could not be loaded: "+i.statusText)},i.onerror=function(){e("Font could not be loaded")},i.send()})(t,function(t,i){if(t)return e(t);var r;try{r=xe(i)}catch(t){return e(t,null)}return e(null,r)})},e.loadSync=function(e){return xe(Tt(t("fs").readFileSync(e)))},Object.defineProperty(e,"__esModule",{value:!0})})}).call(this,t("buffer").Buffer)},{buffer:3,fs:2}],11:[function(t,e,i){function r(){throw new Error("setTimeout has not been defined")}function n(){throw new Error("clearTimeout has not been defined")}function o(t){if(u===setTimeout)return setTimeout(t,0);if((u===r||!u)&&setTimeout)return u=setTimeout,setTimeout(t,0);try{return u(t,0)}catch(e){try{return u.call(null,t,0)}catch(e){return u.call(this,t,0)}}}function s(){m&&d&&(m=!1,d.length?f=d.concat(f):y=-1,f.length&&a())}function a(){if(!m){var t=o(s);m=!0;for(var e=f.length;e;){for(d=f,f=[];++y<e;)d&&d[y].run();y=-1,e=f.length}d=null,m=!1,function(t){if(c===clearTimeout)return clearTimeout(t);if((c===n||!c)&&clearTimeout)return c=clearTimeout,clearTimeout(t);try{c(t)}catch(e){try{return c.call(null,t)}catch(e){return c.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function l(){}var u,c,p=e.exports={};!function(){try{u="function"==typeof setTimeout?setTimeout:r}catch(t){u=r}try{c="function"==typeof clearTimeout?clearTimeout:n}catch(t){c=n}}();var d,f=[],m=!1,y=-1;p.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];f.push(new h(t,e)),1!==f.length||m||o(a)},h.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=l,p.addListener=l,p.once=l,p.off=l,p.removeListener=l,p.removeAllListeners=l,p.emit=l,p.prependListener=l,p.prependOnceListener=l,p.listeners=function(t){return[]},p.binding=function(t){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(t){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},{}],12:[function(t,e,i){!function(t){"use strict";function e(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function i(t){return"string"!=typeof t&&(t=String(t)),t}function r(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return f.iterable&&(e[Symbol.iterator]=function(){return e}),e}function n(t){this.map={},t instanceof n?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function o(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function s(t){return new Promise(function(e,i){t.onload=function(){e(t.result)},t.onerror=function(){i(t.error)}})}function a(t){var e=new FileReader,i=s(e);return e.readAsArrayBuffer(t),i}function h(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function l(){return this.bodyUsed=!1,this._initBody=function(t){if(this._bodyInit=t,t)if("string"==typeof t)this._bodyText=t;else if(f.blob&&Blob.prototype.isPrototypeOf(t))this._bodyBlob=t;else if(f.formData&&FormData.prototype.isPrototypeOf(t))this._bodyFormData=t;else if(f.searchParams&&URLSearchParams.prototype.isPrototypeOf(t))this._bodyText=t.toString();else if(f.arrayBuffer&&f.blob&&y(t))this._bodyArrayBuffer=h(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer]);else{if(!f.arrayBuffer||!ArrayBuffer.prototype.isPrototypeOf(t)&&!v(t))throw new Error("unsupported BodyInit type");this._bodyArrayBuffer=h(t)}else this._bodyText="";this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):f.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},f.blob&&(this.blob=function(){var t=o(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?o(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(a)}),this.text=function(){var t=o(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,i=s(e);return e.readAsText(t),i}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),i=new Array(e.length),r=0;r<e.length;r++)i[r]=String.fromCharCode(e[r]);return i.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},f.formData&&(this.formData=function(){return this.text().then(c)}),this.json=function(){return this.text().then(JSON.parse)},this}function u(t,e){var i=(e=e||{}).body;if(t instanceof u){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new n(t.headers)),this.method=t.method,this.mode=t.mode,i||null==t._bodyInit||(i=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"omit",!e.headers&&this.headers||(this.headers=new n(e.headers)),this.method=function(t){var e=t.toUpperCase();return g.indexOf(e)>-1?e:t}(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&i)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(i)}function c(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var i=t.split("="),r=i.shift().replace(/\+/g," "),n=i.join("=").replace(/\+/g," ");e.append(decodeURIComponent(r),decodeURIComponent(n))}}),e}function p(t){var e=new n;return t.split(/\r?\n/).forEach(function(t){var i=t.split(":"),r=i.shift().trim();if(r){var n=i.join(":").trim();e.append(r,n)}}),e}function d(t,e){e||(e={}),this.type="default",this.status="status"in e?e.status:200,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new n(e.headers),this.url=e.url||"",this._initBody(t)}if(!t.fetch){var f={searchParams:"URLSearchParams"in t,iterable:"Symbol"in t&&"iterator"in Symbol,blob:"FileReader"in t&&"Blob"in t&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in t,arrayBuffer:"ArrayBuffer"in t};if(f.arrayBuffer)var m=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],y=function(t){return t&&DataView.prototype.isPrototypeOf(t)},v=ArrayBuffer.isView||function(t){return t&&m.indexOf(Object.prototype.toString.call(t))>-1};n.prototype.append=function(t,r){t=e(t),r=i(r);var n=this.map[t];this.map[t]=n?n+","+r:r},n.prototype.delete=function(t){delete this.map[e(t)]},n.prototype.get=function(t){return t=e(t),this.has(t)?this.map[t]:null},n.prototype.has=function(t){return this.map.hasOwnProperty(e(t))},n.prototype.set=function(t,r){this.map[e(t)]=i(r)},n.prototype.forEach=function(t,e){for(var i in this.map)this.map.hasOwnProperty(i)&&t.call(e,this.map[i],i,this)},n.prototype.keys=function(){var t=[];return this.forEach(function(e,i){t.push(i)}),r(t)},n.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),r(t)},n.prototype.entries=function(){var t=[];return this.forEach(function(e,i){t.push([i,e])}),r(t)},f.iterable&&(n.prototype[Symbol.iterator]=n.prototype.entries);var g=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];u.prototype.clone=function(){return new u(this,{body:this._bodyInit})},l.call(u.prototype),l.call(d.prototype),d.prototype.clone=function(){return new d(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new n(this.headers),url:this.url})},d.error=function(){var t=new d(null,{status:0,statusText:""});return t.type="error",t};var _=[301,302,303,307,308];d.redirect=function(t,e){if(-1===_.indexOf(e))throw new RangeError("Invalid status code");return new d(null,{status:e,headers:{location:t}})},t.Headers=n,t.Request=u,t.Response=d,t.fetch=function(t,e){return new Promise(function(i,r){var n=new u(t,e),o=new XMLHttpRequest;o.onload=function(){var t={status:o.status,statusText:o.statusText,headers:p(o.getAllResponseHeaders()||"")};t.url="responseURL"in o?o.responseURL:t.headers.get("X-Request-URL");var e="response"in o?o.response:o.responseText;i(new d(e,t))},o.onerror=function(){r(new TypeError("Network request failed"))},o.ontimeout=function(){r(new TypeError("Network request failed"))},o.open(n.method,n.url,!0),"include"===n.credentials&&(o.withCredentials=!0),"responseType"in o&&f.blob&&(o.responseType="blob"),n.headers.forEach(function(t,e){o.setRequestHeader(e,t)}),o.send(void 0===n._bodyInit?null:n._bodyInit)})},t.fetch.polyfill=!0}}("undefined"!=typeof self?self:this)},{}],13:[function(t,e,i){"use strict";var r=t("./core/main");t("./core/constants"),t("./core/environment"),t("./core/error_helpers"),t("./core/helpers"),t("./core/legacy"),t("./core/p5.Element"),t("./core/p5.Graphics"),t("./core/p5.Renderer"),t("./core/p5.Renderer2D"),t("./core/rendering"),t("./core/shim"),t("./core/structure"),t("./core/transform"),t("./core/shape/2d_primitives"),t("./core/shape/attributes"),t("./core/shape/curves"),t("./core/shape/vertex"),t("./color/color_conversion"),t("./color/creating_reading"),t("./color/p5.Color"),t("./color/setting"),t("./data/p5.TypedDict"),t("./events/acceleration"),t("./events/keyboard"),t("./events/mouse"),t("./events/touch"),t("./image/filters"),t("./image/image"),t("./image/loading_displaying"),t("./image/p5.Image"),t("./image/pixels"),t("./io/files"),t("./io/p5.Table"),t("./io/p5.TableRow"),t("./io/p5.XML"),t("./math/calculation"),t("./math/math"),t("./math/noise"),t("./math/p5.Vector"),t("./math/random"),t("./math/trigonometry"),t("./typography/attributes"),t("./typography/loading_displaying"),t("./typography/p5.Font"),t("./utilities/array_functions"),t("./utilities/conversion"),t("./utilities/string_functions"),t("./utilities/time_date"),t("./webgl/3d_primitives"),t("./webgl/interaction"),t("./webgl/light"),t("./webgl/loading"),t("./webgl/material"),t("./webgl/p5.Camera"),t("./webgl/p5.Geometry"),t("./webgl/p5.Matrix"),t("./webgl/p5.RendererGL.Immediate"),t("./webgl/p5.RendererGL"),t("./webgl/p5.RendererGL.Retained"),t("./webgl/p5.Shader"),t("./webgl/p5.Texture"),t("./webgl/text"),t("./core/init"),e.exports=r},{"./color/color_conversion":14,"./color/creating_reading":15,"./color/p5.Color":16,"./color/setting":17,"./core/constants":18,"./core/environment":19,"./core/error_helpers":20,"./core/helpers":21,"./core/init":22,"./core/legacy":23,"./core/main":24,"./core/p5.Element":25,"./core/p5.Graphics":26,"./core/p5.Renderer":27,"./core/p5.Renderer2D":28,"./core/rendering":29,"./core/shape/2d_primitives":30,"./core/shape/attributes":31,"./core/shape/curves":32,"./core/shape/vertex":33,"./core/shim":34,"./core/structure":35,"./core/transform":36,"./data/p5.TypedDict":37,"./events/acceleration":38,"./events/keyboard":39,"./events/mouse":40,"./events/touch":41,"./image/filters":42,"./image/image":43,"./image/loading_displaying":44,"./image/p5.Image":45,"./image/pixels":46,"./io/files":47,"./io/p5.Table":48,"./io/p5.TableRow":49,"./io/p5.XML":50,"./math/calculation":51,"./math/math":52,"./math/noise":53,"./math/p5.Vector":54,"./math/random":55,"./math/trigonometry":56,"./typography/attributes":57,"./typography/loading_displaying":58,"./typography/p5.Font":59,"./utilities/array_functions":60,"./utilities/conversion":61,"./utilities/string_functions":62,"./utilities/time_date":63,"./webgl/3d_primitives":64,"./webgl/interaction":65,"./webgl/light":66,"./webgl/loading":67,"./webgl/material":68,"./webgl/p5.Camera":69,"./webgl/p5.Geometry":70,"./webgl/p5.Matrix":71,"./webgl/p5.RendererGL":74,"./webgl/p5.RendererGL.Immediate":72,"./webgl/p5.RendererGL.Retained":73,"./webgl/p5.Shader":75,"./webgl/p5.Texture":76,"./webgl/text":77}],14:[function(t,e,i){"use strict";var r=t("../core/main");r.ColorConversion={},r.ColorConversion._hsbaToHSLA=function(t){var e=t[0],i=t[1],r=t[2],n=(2-i)*r/2;return 0!==n&&(1===n?i=0:n<.5?i/=2-i:i=i*r/(2-2*n)),[e,i,n,t[3]]},r.ColorConversion._hsbaToRGBA=function(t){var e=6*t[0],i=t[1],r=t[2],n=[];if(0===i)n=[r,r,r,t[3]];else{var o,s,a,h=Math.floor(e),l=r*(1-i),u=r*(1-i*(e-h)),c=r*(1-i*(1+h-e));1===h?(o=u,s=r,a=l):2===h?(o=l,s=r,a=c):3===h?(o=l,s=u,a=r):4===h?(o=c,s=l,a=r):5===h?(o=r,s=l,a=u):(o=r,s=c,a=l),n=[o,s,a,t[3]]}return n},r.ColorConversion._hslaToHSBA=function(t){var e,i=t[0],r=t[1],n=t[2];return[i,r=2*((e=n<.5?(1+r)*n:n+r-n*r)-n)/e,e,t[3]]},r.ColorConversion._hslaToRGBA=function(t){var e=6*t[0],i=t[1],r=t[2],n=[];if(0===i)n=[r,r,r,t[3]];else{var o,s=2*r-(o=r<.5?(1+i)*r:r+i-r*i),a=function(t,e,i){return t<0?t+=6:t>=6&&(t-=6),t<1?e+(i-e)*t:t<3?i:t<4?e+(i-e)*(4-t):e};n=[a(e+2,s,o),a(e,s,o),a(e-2,s,o),t[3]]}return n},r.ColorConversion._rgbaToHSBA=function(t){var e,i,r=t[0],n=t[1],o=t[2],s=Math.max(r,n,o),a=s-Math.min(r,n,o);return 0===a?(e=0,i=0):(i=a/s,r===s?e=(n-o)/a:n===s?e=2+(o-r)/a:o===s&&(e=4+(r-n)/a),e<0?e+=6:e>=6&&(e-=6)),[e/6,i,s,t[3]]},r.ColorConversion._rgbaToHSLA=function(t){var e,i,r=t[0],n=t[1],o=t[2],s=Math.max(r,n,o),a=Math.min(r,n,o),h=s+a,l=s-a;return 0===l?(e=0,i=0):(i=h<1?l/h:l/(2-h),r===s?e=(n-o)/l:n===s?e=2+(o-r)/l:o===s&&(e=4+(r-n)/l),e<0?e+=6:e>=6&&(e-=6)),[e/6,i,h/2,t[3]]},e.exports=r.ColorConversion},{"../core/main":24}],15:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("../core/constants");t("./p5.Color"),t("../core/error_helpers"),r.prototype.alpha=function(t){return r._validateParameters("alpha",arguments),this.color(t)._getAlpha()},r.prototype.blue=function(t){return r._validateParameters("blue",arguments),this.color(t)._getBlue()},r.prototype.brightness=function(t){return r._validateParameters("brightness",arguments),this.color(t)._getBrightness()},r.prototype.color=function(){if(r._validateParameters("color",arguments),arguments[0]instanceof r.Color)return arguments[0];var t=arguments[0]instanceof Array?arguments[0]:arguments;return new r.Color(this,t)},r.prototype.green=function(t){return r._validateParameters("green",arguments),this.color(t)._getGreen()},r.prototype.hue=function(t){return r._validateParameters("hue",arguments),this.color(t)._getHue()},r.prototype.lerpColor=function(t,e,i){r._validateParameters("lerpColor",arguments);var o,s,a,h,l,u,c=this._colorMode,p=this._colorMaxes;if(c===n.RGB)l=t.levels.map(function(t){return t/255}),u=e.levels.map(function(t){return t/255});else if(c===n.HSB)t._getBrightness(),e._getBrightness(),l=t.hsba,u=e.hsba;else{if(c!==n.HSL)throw new Error(c+"cannot be used for interpolation.");t._getLightness(),e._getLightness(),l=t.hsla,u=e.hsla}return i=Math.max(Math.min(i,1),0),void 0===this.lerp&&(this.lerp=function(t,e,i){return i*(e-t)+t}),o=this.lerp(l[0],u[0],i),s=this.lerp(l[1],u[1],i),a=this.lerp(l[2],u[2],i),h=this.lerp(l[3],u[3],i),o*=p[c][0],s*=p[c][1],a*=p[c][2],h*=p[c][3],this.color(o,s,a,h)},r.prototype.lightness=function(t){return r._validateParameters("lightness",arguments),this.color(t)._getLightness()},r.prototype.red=function(t){return r._validateParameters("red",arguments),this.color(t)._getRed()},r.prototype.saturation=function(t){return r._validateParameters("saturation",arguments),this.color(t)._getSaturation()},e.exports=r},{"../core/constants":18,"../core/error_helpers":20,"../core/main":24,"./p5.Color":16}],16:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("../core/constants"),o=t("./color_conversion");r.Color=function(t,e){if(this._storeModeAndMaxes(t._colorMode,t._colorMaxes),this.mode!==n.RGB&&this.mode!==n.HSL&&this.mode!==n.HSB)throw new Error(this.mode+" is an invalid colorMode.");return this._array=r.Color._parseInputs.apply(this,e),this._calculateLevels(),this},r.Color.prototype.toString=function(t){this.hsba||(this.hsba=o._rgbaToHSBA(this._array)),this.hsla||(this.hsla=o._rgbaToHSLA(this._array));var e=this.levels,i=this._array,r=i[3];switch(t){case"#rrggbb":return"#".concat(e[0]<16?"0".concat(e[0].toString(16)):e[0].toString(16),e[1]<16?"0".concat(e[1].toString(16)):e[1].toString(16),e[2]<16?"0".concat(e[2].toString(16)):e[2].toString(16));case"#rrggbbaa":return"#".concat(e[0]<16?"0".concat(e[0].toString(16)):e[0].toString(16),e[1]<16?"0".concat(e[1].toString(16)):e[1].toString(16),e[2]<16?"0".concat(e[2].toString(16)):e[2].toString(16),e[3]<16?"0".concat(e[2].toString(16)):e[3].toString(16));case"#rgb":return"#".concat(Math.round(15*i[0]).toString(16),Math.round(15*i[1]).toString(16),Math.round(15*i[2]).toString(16));case"#rgba":return"#".concat(Math.round(15*i[0]).toString(16),Math.round(15*i[1]).toString(16),Math.round(15*i[2]).toString(16),Math.round(15*i[3]).toString(16));case"rgb":return"rgb(".concat(e[0],", ",e[1],", ",e[2],")");case"rgb%":return"rgb(".concat((100*i[0]).toPrecision(3),"%, ",(100*i[1]).toPrecision(3),"%, ",(100*i[2]).toPrecision(3),"%)");case"rgba%":return"rgba(".concat((100*i[0]).toPrecision(3),"%, ",(100*i[1]).toPrecision(3),"%, ",(100*i[2]).toPrecision(3),"%, ",(100*i[3]).toPrecision(3),"%)");case"hsb":case"hsv":return"hsb(".concat(this.hsba[0]*this.maxes[n.HSB][0],", ",this.hsba[1]*this.maxes[n.HSB][1],", ",this.hsba[2]*this.maxes[n.HSB][2],")");case"hsb%":case"hsv%":return"hsb(".concat((100*this.hsba[0]).toPrecision(3),"%, ",(100*this.hsba[1]).toPrecision(3),"%, ",(100*this.hsba[2]).toPrecision(3),"%)");case"hsba":case"hsva":return"hsba(".concat(this.hsba[0]*this.maxes[n.HSB][0],", ",this.hsba[1]*this.maxes[n.HSB][1],", ",this.hsba[2]*this.maxes[n.HSB][2],", ",r,")");case"hsba%":case"hsva%":return"hsba(".concat((100*this.hsba[0]).toPrecision(3),"%, ",(100*this.hsba[1]).toPrecision(3),"%, ",(100*this.hsba[2]).toPrecision(3),"%, ",(100*r).toPrecision(3),"%)");case"hsl":return"hsl(".concat(this.hsla[0]*this.maxes[n.HSL][0],", ",this.hsla[1]*this.maxes[n.HSL][1],", ",this.hsla[2]*this.maxes[n.HSL][2],")");case"hsl%":return"hsl(".concat((100*this.hsla[0]).toPrecision(3),"%, ",(100*this.hsla[1]).toPrecision(3),"%, ",(100*this.hsla[2]).toPrecision(3),"%)");case"hsla":return"hsla(".concat(this.hsla[0]*this.maxes[n.HSL][0],", ",this.hsla[1]*this.maxes[n.HSL][1],", ",this.hsla[2]*this.maxes[n.HSL][2],", ",r,")");case"hsla%":return"hsl(".concat((100*this.hsla[0]).toPrecision(3),"%, ",(100*this.hsla[1]).toPrecision(3),"%, ",(100*this.hsla[2]).toPrecision(3),"%, ",(100*r).toPrecision(3),"%)");case"rgba":default:return"rgba("+e[0]+","+e[1]+","+e[2]+","+r+")"}},r.Color.prototype.setRed=function(t){this._array[0]=t/this.maxes[n.RGB][0],this._calculateLevels()},r.Color.prototype.setGreen=function(t){this._array[1]=t/this.maxes[n.RGB][1],this._calculateLevels()},r.Color.prototype.setBlue=function(t){this._array[2]=t/this.maxes[n.RGB][2],this._calculateLevels()},r.Color.prototype.setAlpha=function(t){this._array[3]=t/this.maxes[this.mode][3],this._calculateLevels()},r.Color.prototype._calculateLevels=function(){for(var t=this._array,e=this.levels=new Array(t.length),i=t.length-1;i>=0;--i)e[i]=Math.round(255*t[i])},r.Color.prototype._getAlpha=function(){return this._array[3]*this.maxes[this.mode][3]},r.Color.prototype._storeModeAndMaxes=function(t,e){this.mode=t,this.maxes=e},r.Color.prototype._getMode=function(){return this.mode},r.Color.prototype._getMaxes=function(){return this.maxes},r.Color.prototype._getBlue=function(){return this._array[2]*this.maxes[n.RGB][2]},r.Color.prototype._getBrightness=function(){return this.hsba||(this.hsba=o._rgbaToHSBA(this._array)),this.hsba[2]*this.maxes[n.HSB][2]},r.Color.prototype._getGreen=function(){return this._array[1]*this.maxes[n.RGB][1]},r.Color.prototype._getHue=function(){return this.mode===n.HSB?(this.hsba||(this.hsba=o._rgbaToHSBA(this._array)),this.hsba[0]*this.maxes[n.HSB][0]):(this.hsla||(this.hsla=o._rgbaToHSLA(this._array)),this.hsla[0]*this.maxes[n.HSL][0])},r.Color.prototype._getLightness=function(){return this.hsla||(this.hsla=o._rgbaToHSLA(this._array)),this.hsla[2]*this.maxes[n.HSL][2]},r.Color.prototype._getRed=function(){return this._array[0]*this.maxes[n.RGB][0]},r.Color.prototype._getSaturation=function(){return this.mode===n.HSB?(this.hsba||(this.hsba=o._rgbaToHSBA(this._array)),this.hsba[1]*this.maxes[n.HSB][1]):(this.hsla||(this.hsla=o._rgbaToHSLA(this._array)),this.hsla[1]*this.maxes[n.HSL][1])};var s={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"},a=/\s*/,h=/(\d{1,3})/,l=/((?:\d+(?:\.\d+)?)|(?:\.\d+))/,u=new RegExp(l.source+"%"),c={HEX3:/^#([a-f0-9])([a-f0-9])([a-f0-9])$/i,HEX4:/^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])$/i,HEX6:/^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,HEX8:/^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,RGB:new RegExp(["^rgb\\(",h.source,",",h.source,",",h.source,"\\)$"].join(a.source),"i"),RGB_PERCENT:new RegExp(["^rgb\\(",u.source,",",u.source,",",u.source,"\\)$"].join(a.source),"i"),RGBA:new RegExp(["^rgba\\(",h.source,",",h.source,",",h.source,",",l.source,"\\)$"].join(a.source),"i"),RGBA_PERCENT:new RegExp(["^rgba\\(",u.source,",",u.source,",",u.source,",",l.source,"\\)$"].join(a.source),"i"),HSL:new RegExp(["^hsl\\(",h.source,",",u.source,",",u.source,"\\)$"].join(a.source),"i"),HSLA:new RegExp(["^hsla\\(",h.source,",",u.source,",",u.source,",",l.source,"\\)$"].join(a.source),"i"),HSB:new RegExp(["^hsb\\(",h.source,",",u.source,",",u.source,"\\)$"].join(a.source),"i"),HSBA:new RegExp(["^hsba\\(",h.source,",",u.source,",",u.source,",",l.source,"\\)$"].join(a.source),"i")};r.Color._parseInputs=function(t,e,i,a){var h,l=arguments.length,u=this.mode,p=this.maxes[u],d=[];if(l>=3){for(d[0]=t/p[0],d[1]=e/p[1],d[2]=i/p[2],d[3]="number"==typeof a?a/p[3]:1,h=d.length-1;h>=0;--h){var f=d[h];f<0?d[h]=0:f>1&&(d[h]=1)}return u===n.HSL?o._hslaToRGBA(d):u===n.HSB?o._hsbaToRGBA(d):d}if(1===l&&"string"==typeof t){var m=t.trim().toLowerCase();if(s[m])return r.Color._parseInputs.call(this,s[m]);if(c.HEX3.test(m))return(d=c.HEX3.exec(m).slice(1).map(function(t){return parseInt(t+t,16)/255}))[3]=1,d;if(c.HEX6.test(m))return(d=c.HEX6.exec(m).slice(1).map(function(t){return parseInt(t,16)/255}))[3]=1,d;if(c.HEX4.test(m))return d=c.HEX4.exec(m).slice(1).map(function(t){return parseInt(t+t,16)/255});if(c.HEX8.test(m))return d=c.HEX8.exec(m).slice(1).map(function(t){return parseInt(t,16)/255});if(c.RGB.test(m))return(d=c.RGB.exec(m).slice(1).map(function(t){return t/255}))[3]=1,d;if(c.RGB_PERCENT.test(m))return(d=c.RGB_PERCENT.exec(m).slice(1).map(function(t){return parseFloat(t)/100}))[3]=1,d;if(c.RGBA.test(m))return d=c.RGBA.exec(m).slice(1).map(function(t,e){return 3===e?parseFloat(t):t/255});if(c.RGBA_PERCENT.test(m))return d=c.RGBA_PERCENT.exec(m).slice(1).map(function(t,e){return 3===e?parseFloat(t):parseFloat(t)/100});if(c.HSL.test(m)?(d=c.HSL.exec(m).slice(1).map(function(t,e){return 0===e?parseInt(t,10)/360:parseInt(t,10)/100}))[3]=1:c.HSLA.test(m)&&(d=c.HSLA.exec(m).slice(1).map(function(t,e){return 0===e?parseInt(t,10)/360:3===e?parseFloat(t):parseInt(t,10)/100})),(d=d.map(function(t){return Math.max(Math.min(t,1),0)})).length)return o._hslaToRGBA(d);if(c.HSB.test(m)?(d=c.HSB.exec(m).slice(1).map(function(t,e){return 0===e?parseInt(t,10)/360:parseInt(t,10)/100}))[3]=1:c.HSBA.test(m)&&(d=c.HSBA.exec(m).slice(1).map(function(t,e){return 0===e?parseInt(t,10)/360:3===e?parseFloat(t):parseInt(t,10)/100})),d.length){for(h=d.length-1;h>=0;--h)d[h]=Math.max(Math.min(d[h],1),0);return o._hsbaToRGBA(d)}d=[1,1,1,1]}else{if(1!==l&&2!==l||"number"!=typeof t)throw new Error(arguments+"is not a valid color representation.");d[0]=t/p[2],d[1]=t/p[2],d[2]=t/p[2],d[3]="number"==typeof e?e/p[3]:1,d=d.map(function(t){return Math.max(Math.min(t,1),0)})}return d},e.exports=r.Color},{"../core/constants":18,"../core/main":24,"./color_conversion":14}],17:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("../core/constants");t("./p5.Color"),r.prototype.background=function(){return arguments[0]instanceof r.Image?this.image(arguments[0],0,0,this.width,this.height):this._renderer.background.apply(this._renderer,arguments),this},r.prototype.clear=function(){return this._renderer.clear(),this},r.prototype.colorMode=function(t,e,i,o,s){if(r._validateParameters("colorMode",arguments),t===n.RGB||t===n.HSB||t===n.HSL){this._colorMode=t;var a=this._colorMaxes[t];2===arguments.length?(a[0]=e,a[1]=e,a[2]=e,a[3]=e):4===arguments.length?(a[0]=e,a[1]=i,a[2]=o):5===arguments.length&&(a[0]=e,a[1]=i,a[2]=o,a[3]=s)}return this},r.prototype.fill=function(){return this._renderer._setProperty("_fillSet",!0),this._renderer._setProperty("_doFill",!0),this._renderer.fill.apply(this._renderer,arguments),this},r.prototype.noFill=function(){return this._renderer._setProperty("_doFill",!1),this},r.prototype.noStroke=function(){return this._renderer._setProperty("_doStroke",!1),this},r.prototype.stroke=function(){return this._renderer._setProperty("_strokeSet",!0),this._renderer._setProperty("_doStroke",!0),this._renderer.stroke.apply(this._renderer,arguments),this},e.exports=r},{"../core/constants":18,"../core/main":24,"./p5.Color":16}],18:[function(t,e,i){"use strict";var r=Math.PI;e.exports={P2D:"p2d",WEBGL:"webgl",ARROW:"default",CROSS:"crosshair",HAND:"pointer",MOVE:"move",TEXT:"text",WAIT:"wait",HALF_PI:r/2,PI:r,QUARTER_PI:r/4,TAU:2*r,TWO_PI:2*r,DEGREES:"degrees",RADIANS:"radians",DEG_TO_RAD:r/180,RAD_TO_DEG:180/r,CORNER:"corner",CORNERS:"corners",RADIUS:"radius",RIGHT:"right",LEFT:"left",CENTER:"center",TOP:"top",BOTTOM:"bottom",BASELINE:"alphabetic",POINTS:0,LINES:1,LINE_STRIP:3,LINE_LOOP:2,TRIANGLES:4,TRIANGLE_FAN:6,TRIANGLE_STRIP:5,QUADS:"quads",QUAD_STRIP:"quad_strip",CLOSE:"close",OPEN:"open",CHORD:"chord",PIE:"pie",PROJECT:"square",SQUARE:"butt",ROUND:"round",BEVEL:"bevel",MITER:"miter",RGB:"rgb",HSB:"hsb",HSL:"hsl",AUTO:"auto",ALT:18,BACKSPACE:8,CONTROL:17,DELETE:46,DOWN_ARROW:40,ENTER:13,ESCAPE:27,LEFT_ARROW:37,OPTION:18,RETURN:13,RIGHT_ARROW:39,SHIFT:16,TAB:9,UP_ARROW:38,BLEND:"source-over",ADD:"lighter",DARKEST:"darken",LIGHTEST:"lighten",DIFFERENCE:"difference",EXCLUSION:"exclusion",MULTIPLY:"multiply",SCREEN:"screen",REPLACE:"copy",OVERLAY:"overlay",HARD_LIGHT:"hard-light",SOFT_LIGHT:"soft-light",DODGE:"color-dodge",BURN:"color-burn",THRESHOLD:"threshold",GRAY:"gray",OPAQUE:"opaque",INVERT:"invert",POSTERIZE:"posterize",DILATE:"dilate",ERODE:"erode",BLUR:"blur",NORMAL:"normal",ITALIC:"italic",BOLD:"bold",_DEFAULT_TEXT_FILL:"#000000",_DEFAULT_LEADMULT:1.25,_CTX_MIDDLE:"middle",LINEAR:"linear",QUADRATIC:"quadratic",BEZIER:"bezier",CURVE:"curve",STROKE:"stroke",FILL:"fill",TEXTURE:"texture",IMMEDIATE:"immediate",NEAREST:"nearest",REPEAT:"repeat",CLAMP:"clamp",MIRROR:"mirror",LANDSCAPE:"landscape",PORTRAIT:"portrait",_DEFAULT_STROKE:"#000000",_DEFAULT_FILL:"#FFFFFF",GRID:"grid",AXES:"axes"}},{}],19:[function(t,e,i){"use strict";function r(){return window.innerWidth||document.documentElement&&document.documentElement.clientWidth||document.body&&document.body.clientWidth||0}function n(){return window.innerHeight||document.documentElement&&document.documentElement.clientHeight||document.body&&document.body.clientHeight||0}var o=t("./main"),s=t("./constants"),a=[s.ARROW,s.CROSS,s.HAND,s.MOVE,s.TEXT,s.WAIT];o.prototype._frameRate=0,o.prototype._lastFrameTime=window.performance.now(),o.prototype._targetFrameRate=60;var h=window.print;o.prototype.print=function(){arguments.length?console.log.apply(console,arguments):h()},o.prototype.frameCount=0,o.prototype.focused=document.hasFocus(),o.prototype.cursor=function(t,e,i){var r="auto",n=this._curElement.elt;if(a.indexOf(t)>-1)r=t;else if("string"==typeof t){var o="";e&&i&&"number"==typeof e&&"number"==typeof i&&(o=e+" "+i),r="http://"===t.substring(0,7)||"https://"===t.substring(0,8)?"url("+t+") "+o+", auto":/\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(t)?"url("+t+") "+o+", auto":t}n.style.cursor=r},o.prototype.frameRate=function(t){return o._validateParameters("frameRate",arguments),"number"!=typeof t||t<0?this._frameRate:(this._setProperty("_targetFrameRate",t),this._runFrames(),this)},o.prototype.getFrameRate=function(){return this.frameRate()},o.prototype.setFrameRate=function(t){return this.frameRate(t)},o.prototype.noCursor=function(){this._curElement.elt.style.cursor="none"},o.prototype.displayWidth=screen.width,o.prototype.displayHeight=screen.height,o.prototype.windowWidth=r(),o.prototype.windowHeight=n(),o.prototype._onresize=function(t){this._setProperty("windowWidth",r()),this._setProperty("windowHeight",n());var e,i=this._isGlobal?window:this;"function"==typeof i.windowResized&&(void 0===(e=i.windowResized(t))||e||t.preventDefault())},o.prototype.width=0,o.prototype.height=0,o.prototype.fullscreen=function(t){if(o._validateParameters("fullscreen",arguments),void 0===t)return document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement||document.msFullscreenElement;t?function(t){if(!(document.fullscreenEnabled||document.webkitFullscreenEnabled||document.mozFullScreenEnabled||document.msFullscreenEnabled))throw new Error("Fullscreen not enabled in this browser.");t.requestFullscreen?t.requestFullscreen():t.mozRequestFullScreen?t.mozRequestFullScreen():t.webkitRequestFullscreen?t.webkitRequestFullscreen():t.msRequestFullscreen&&t.msRequestFullscreen()}(document.documentElement):document.exitFullscreen?document.exitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitExitFullscreen?document.webkitExitFullscreen():document.msExitFullscreen&&document.msExitFullscreen()},o.prototype.pixelDensity=function(t){var e;return o._validateParameters("pixelDensity",arguments),"number"==typeof t?(t!==this._pixelDensity&&(this._pixelDensity=t,this._pixelsDirty=!0),e=this,this.resizeCanvas(this.width,this.height,!0)):e=this._pixelDensity,e},o.prototype.displayDensity=function(){return window.devicePixelRatio},o.prototype.getURL=function(){return location.href},o.prototype.getURLPath=function(){return location.pathname.split("/").filter(function(t){return""!==t})},o.prototype.getURLParams=function(){for(var t,e=/[?&]([^&=]+)(?:[&=])([^&=]+)/gim,i={};null!=(t=e.exec(location.search));)t.index===e.lastIndex&&e.lastIndex++,i[t[1]]=t[2];return i},e.exports=o},{"./constants":18,"./main":24}],20:[function(t,e,i){"use strict";var r=t("./main");t("./constants"),r._validateParameters=r._friendlyFileLoadError=function(){};var n=null,o=function(){var e={},i=function(t){return Object.getOwnPropertyNames(t).filter(function(t){return!("_"===t[0]||t in e||(e[t]=!0,0))}).map(function(e){var i;return i="function"==typeof t[e]?"function":e===e.toUpperCase()?"constant":"variable",{name:e,type:i}})};(n=[].concat(i(r.prototype),i(t("./constants")))).sort(function(t,e){return e.name.length-t.name.length})},s=function(t,e){e||(e=console.log.bind(console)),n||o(),n.some(function(i){if(t.message&&null!==t.message.match("\\W?"+i.name+"\\W"))return e("Did you just try to use p5.js's "+i.name+("function"===i.type?"() ":" ")+i.type+"? If so, you may want to move it into your sketch's setup() function.\n\nFor more details, see: https://github.com/processing/p5.js/wiki/p5.js-overview#why-cant-i-assign-variables-using-p5-functions-and-variables-before-setup"),!0})};r.prototype._helpForMisusedAtTopLevelCode=s,"complete"!==document.readyState&&(window.addEventListener("error",s,!1),window.addEventListener("load",function(){window.removeEventListener("error",s,!1)})),e.exports=r},{"../../docs/reference/data.json":void 0,"./constants":18,"./main":24}],21:[function(t,e,i){"use strict";var r=t("./constants");e.exports={modeAdjust:function(t,e,i,n,o){return o===r.CORNER?{x:t,y:e,w:i,h:n}:o===r.CORNERS?{x:t,y:e,w:i-t,h:n-e}:o===r.RADIUS?{x:t-i,y:e-n,w:2*i,h:2*n}:o===r.CENTER?{x:t-.5*i,y:e-.5*n,w:i,h:n}:void 0}}},{"./constants":18}],22:[function(t,e,i){"use strict";var r=t("../core/main"),n=function(){window.mocha||(window.setup&&"function"==typeof window.setup||window.draw&&"function"==typeof window.draw)&&!r.instance&&new r};"complete"===document.readyState?n():window.addEventListener("load",n,!1)},{"../core/main":24}],23:[function(t,e,i){"use strict";var r=t("./main");r.prototype.exit=function(){throw new Error("exit() not implemented, see remove()")},r.prototype.pushStyle=function(){throw new Error("pushStyle() not used, see push()")},r.prototype.popStyle=function(){throw new Error("popStyle() not used, see pop()")},r.prototype.size=function(){var t="size() is not a valid p5 function, to set the size of the ";throw new Error(t+="drawing canvas, please use createCanvas() instead")},e.exports=r},{"./main":24}],24:[function(t,e,i){"use strict";t("./shim");var r=t("./constants"),n=function(t,e,i){"boolean"==typeof e&&void 0===i&&(i=e,e=void 0),this._setupDone=!1,this._pixelDensity=Math.ceil(window.devicePixelRatio)||1,this._userNode=e,this._curElement=null,this._elements=[],this._requestAnimId=0,this._preloadCount=0,this._isGlobal=!1,this._loop=!0,this._initializeInstanceVariables(),this._defaultCanvasSize={width:100,height:100},this._events={mousemove:null,mousedown:null,mouseup:null,dragend:null,dragover:null,click:null,dblclick:null,mouseover:null,mouseout:null,keydown:null,keyup:null,keypress:null,touchstart:null,touchmove:null,touchend:null,resize:null,blur:null},this._events.wheel=null,this._loadingScreenId="p5_loading",this._registeredMethods={};for(var r=Object.getOwnPropertyNames(n.prototype._registeredMethods),o=0;o<r.length;o++){var s=r[o];this._registeredMethods[s]=n.prototype._registeredMethods[s].slice()}window.DeviceOrientationEvent&&(this._events.deviceorientation=null),window.DeviceMotionEvent&&!window._isNodeWebkit&&(this._events.devicemotion=null),this._start=function(){this._userNode&&"string"==typeof this._userNode&&(this._userNode=document.getElementById(this._userNode));var t=this._isGlobal?window:this,e=t.preload;if(e){var i=document.getElementById(this._loadingScreenId);i||((i=document.createElement("div")).innerHTML="Loading...",i.style.position="absolute",i.id=this._loadingScreenId,(this._userNode||document.body).appendChild(i));var r=this._preloadMethods;for(var o in r){r[o]=r[o]||n;var s=r[o];s!==n.prototype&&s!==n||(this._isGlobal&&(window[o]=this._wrapPreload(this,o)),s=this),this._registeredPreloadMethods[o]=s[o],s[o]=this._wrapPreload(s,o)}e(),this._runIfPreloadsAreDone()}else this._setup(),this._runFrames(),this._draw()}.bind(this),this._runIfPreloadsAreDone=function(){var t=this._isGlobal?window:this;if(0===t._preloadCount){var e=document.getElementById(t._loadingScreenId);e&&e.parentNode.removeChild(e),t._setup(),t._runFrames(),t._draw()}},this._decrementPreload=function(){var t=this._isGlobal?window:this;"function"==typeof t.preload&&(t._setProperty("_preloadCount",t._preloadCount-1),t._runIfPreloadsAreDone())},this._wrapPreload=function(t,e){return function(){return this._incrementPreload(),this._registeredPreloadMethods[e].apply(t,arguments)}.bind(this)},this._incrementPreload=function(){var t=this._isGlobal?window:this;t._setProperty("_preloadCount",t._preloadCount+1)},this._setup=function(){this.createCanvas(this._defaultCanvasSize.width,this._defaultCanvasSize.height,"p2d");var t=this._isGlobal?window:this;if("function"==typeof t.preload)for(var e in this._preloadMethods)t[e]=this._preloadMethods[e][e],t[e]&&this&&(t[e]=t[e].bind(this));"function"==typeof t.setup&&t.setup();for(var i=document.getElementsByTagName("canvas"),r=0;r<i.length;r++){var n=i[r];"true"===n.dataset.hidden&&(n.style.visibility="",delete n.dataset.hidden)}this._setupDone=!0}.bind(this),this._draw=function(){var t=window.performance.now(),e=t-this._lastFrameTime,i=1e3/this._targetFrameRate;(!this._loop||e>=i-5)&&(this.redraw(),this._frameRate=1e3/(t-this._lastFrameTime),this._lastFrameTime=t,void 0!==this._updateMouseCoords&&this._updateMouseCoords()),this._loop&&(this._requestAnimId=window.requestAnimationFrame(this._draw))}.bind(this),this._runFrames=function(){this._updateInterval&&clearInterval(this._updateInterval)}.bind(this),this._setProperty=function(t,e){this[t]=e,this._isGlobal&&(window[t]=e)}.bind(this),this.remove=function(){var t=document.getElementById(this._loadingScreenId);if(t&&(t.parentNode.removeChild(t),this._incrementPreload()),this._curElement){for(var e in this._loop=!1,this._requestAnimId&&window.cancelAnimationFrame(this._requestAnimId),this._events)window.removeEventListener(e,this._events[e]);for(var i=0;i<this._elements.length;i++){var r=this._elements[i];for(var o in r.elt.parentNode&&r.elt.parentNode.removeChild(r.elt),r._events)r.elt.removeEventListener(o,r._events[o])}var s=this;this._registeredMethods.remove.forEach(function(t){void 0!==t&&t.call(s)})}if(this._isGlobal){for(var a in n.prototype)try{delete window[a]}catch(t){window[a]=void 0}for(var h in this)if(this.hasOwnProperty(h))try{delete window[h]}catch(t){window[h]=void 0}n.instance=null}}.bind(this),this._registeredMethods.init.forEach(function(t){void 0!==t&&t.call(this)},this);var a=this._createFriendlyGlobalFunctionBinder();if(t)t(this);else{for(var h in this._isGlobal=!0,n.instance=this,n.prototype)if("function"==typeof n.prototype[h]){var l=h.substring(2);this._events.hasOwnProperty(l)||(Math.hasOwnProperty(h)&&Math[h]===n.prototype[h]?a(h,n.prototype[h]):a(h,n.prototype[h].bind(this)))}else a(h,n.prototype[h]);for(var u in this)this.hasOwnProperty(u)&&a(u,this[u])}for(var c in this._events){var p=this["_on"+c];if(p){var d=p.bind(this);window.addEventListener(c,d,{passive:!1}),this._events[c]=d}}var f=function(){this._setProperty("focused",!0)}.bind(this),m=function(){this._setProperty("focused",!1)}.bind(this);window.addEventListener("focus",f),window.addEventListener("blur",m),this.registerMethod("remove",function(){window.removeEventListener("focus",f),window.removeEventListener("blur",m)}),i?this._start():"complete"===document.readyState?this._start():window.addEventListener("load",this._start.bind(this),!1)};for(var o in n.prototype._initializeInstanceVariables=function(){this._styles=[],this._bezierDetail=20,this._curveDetail=20,this._colorMode=r.RGB,this._colorMaxes={rgb:[255,255,255,255],hsb:[360,100,100,1],hsl:[360,100,100,1]},this._pixelsDirty=!0},n.instance=null,n.disableFriendlyErrors=!1,r)n.prototype[o]=r[o];n.prototype._preloadMethods={loadJSON:n.prototype,loadImage:n.prototype,loadStrings:n.prototype,loadXML:n.prototype,loadBytes:n.prototype,loadTable:n.prototype,loadFont:n.prototype,loadModel:n.prototype,loadShader:n.prototype},n.prototype._registeredMethods={init:[],pre:[],post:[],remove:[]},n.prototype._registeredPreloadMethods={},n.prototype.registerPreloadMethod=function(t,e){n.prototype._preloadMethods.hasOwnProperty(t)||(n.prototype._preloadMethods[t]=e)},n.prototype.registerMethod=function(t,e){var i=this||n.prototype;i._registeredMethods.hasOwnProperty(t)||(i._registeredMethods[t]=[]),i._registeredMethods[t].push(e)},n.prototype._createFriendlyGlobalFunctionBinder=function(t){var e=(t=t||{}).globalObject||window;return t.log||console.log.bind(console),function(t,i){n.disableFriendlyErrors,e[t]=i}},e.exports=n},{"./constants":18,"./shim":34}],25:[function(t,e,i){"use strict";function r(t,e,i){return!1===e?o(t,i):n(t,e,i),this}function n(t,e,i){i._events[t]&&o(t,i);var r=e.bind(i);i.elt.addEventListener(t,r,!1),i._events[t]=r}function o(t,e){var i=e._events[t];e.elt.removeEventListener(t,i,!1),e._events[t]=null}var s=t("./main");s.Element=function(t,e){this.elt=t,this._pInst=e,this._events={},this.width=this.elt.offsetWidth,this.height=this.elt.offsetHeight},s.Element.prototype.parent=function(t){return void 0===t?this.elt.parentNode:("string"==typeof t?("#"===t[0]&&(t=t.substring(1)),t=document.getElementById(t)):t instanceof s.Element&&(t=t.elt),t.appendChild(this.elt),this)},s.Element.prototype.id=function(t){return void 0===t?this.elt.id:(this.elt.id=t,this.width=this.elt.offsetWidth,this.height=this.elt.offsetHeight,this)},s.Element.prototype.class=function(t){return void 0===t?this.elt.className:(this.elt.className=t,this)},s.Element.prototype.mousePressed=function(t){return r("mousedown",function(e){return this._pInst._setProperty("mouseIsPressed",!0),this._pInst._setMouseButton(e),t()},this),this},s.Element.prototype.doubleClicked=function(t){return r("dblclick",t,this),this},s.Element.prototype.mouseWheel=function(t){return r("wheel",t,this),this},s.Element.prototype.mouseReleased=function(t){return r("mouseup",t,this),this},s.Element.prototype.mouseClicked=function(t){return r("click",t,this),this},s.Element.prototype.mouseMoved=function(t){return r("mousemove",t,this),this},s.Element.prototype.mouseOver=function(t){return r("mouseover",t,this),this},s.Element.prototype.changed=function(t){return r("change",t,this),this},s.Element.prototype.input=function(t){return r("input",t,this),this},s.Element.prototype.mouseOut=function(t){return r("mouseout",t,this),this},s.Element.prototype.touchStarted=function(t){return r("touchstart",t,this),this},s.Element.prototype.touchMoved=function(t){return r("touchmove",t,this),this},s.Element.prototype.touchEnded=function(t){return r("touchend",t,this),this},s.Element.prototype.dragOver=function(t){return r("dragover",t,this),this},s.Element.prototype.dragLeave=function(t){return r("dragleave",t,this),this},s.Element.prototype.drop=function(t,e){function i(e){var i=new s.File(e);return function(e){i.data=e.target.result,t(i)}}return window.File&&window.FileReader&&window.FileList&&window.Blob?(n("dragover",function(t){t.stopPropagation(),t.preventDefault()},this),n("dragleave",function(t){t.stopPropagation(),t.preventDefault()},this),void 0!==e&&n("drop",e,this),n("drop",function(t){t.stopPropagation(),t.preventDefault();for(var e=t.dataTransfer.files,r=0;r<e.length;r++){var n=e[r],o=new FileReader;o.onload=i(n),n.type.indexOf("text")>-1?o.readAsText(n):o.readAsDataURL(n)}},this)):console.log("The File APIs are not fully supported in this browser."),this},s.Element.prototype._setProperty=function(t,e){this[t]=e},e.exports=s.Element},{"./main":24}],26:[function(t,e,i){"use strict";var r=t("./main"),n=t("./constants");r.Graphics=function(t,e,i,o){var s=i||n.P2D;for(var a in this.canvas=document.createElement("canvas"),(o._userNode||document.body).appendChild(this.canvas),r.Element.call(this,this.canvas,o,!1),r.prototype)this[a]||("function"==typeof r.prototype[a]?this[a]=r.prototype[a].bind(this):this[a]=r.prototype[a]);return r.prototype._initializeInstanceVariables.apply(this),this.width=t,this.height=e,this._pixelDensity=o._pixelDensity,s===n.WEBGL?this._renderer=new r.RendererGL(this.canvas,this,!1):this._renderer=new r.Renderer2D(this.canvas,this,!1),o._elements.push(this),this._renderer.resize(t,e),this._renderer._applyDefaults(),this},r.Graphics.prototype=Object.create(r.Element.prototype),r.Graphics.prototype.remove=function(){this.elt.parentNode&&this.elt.parentNode.removeChild(this.elt);var t=this._pInst._elements.indexOf(this);for(var e in-1!==t&&this._pInst._elements.splice(t,1),this._events)this.elt.removeEventListener(e,this._events[e])},e.exports=r.Graphics},{"./constants":18,"./main":24}],27:[function(t,e,i){"use strict";function r(t){var e=0,i=0;if(t.offsetParent)do{e+=t.offsetLeft,i+=t.offsetTop}while(t=t.offsetParent);else e+=t.offsetLeft,i+=t.offsetTop;return[e,i]}var n=t("./main"),o=t("../core/constants");n.Renderer=function(t,e,i){n.Element.call(this,t,e),this.canvas=t,i?(this._isMainCanvas=!0,this._pInst._setProperty("_curElement",this),this._pInst._setProperty("canvas",this.canvas),this._pInst._setProperty("width",this.width),this._pInst._setProperty("height",this.height)):(this.canvas.style.display="none",this._styles=[]),this._textSize=12,this._textLeading=15,this._textFont="sans-serif",this._textStyle=o.NORMAL,this._textAscent=null,this._textDescent=null,this._textAlign=o.LEFT,this._textBaseline=o.BASELINE,this._rectMode=o.CORNER,this._ellipseMode=o.CENTER,this._curveTightness=0,this._imageMode=o.CORNER,this._tint=null,this._doStroke=!0,this._doFill=!0,this._strokeSet=!1,this._fillSet=!1},n.Renderer.prototype=Object.create(n.Element.prototype),n.Renderer.prototype.push=function(){return{properties:{_doStroke:this._doStroke,_strokeSet:this._strokeSet,_doFill:this._doFill,_fillSet:this._fillSet,_tint:this._tint,_imageMode:this._imageMode,_rectMode:this._rectMode,_ellipseMode:this._ellipseMode,_textFont:this._textFont,_textLeading:this._textLeading,_textSize:this._textSize,_textAlign:this._textAlign,_textBaseline:this._textBaseline,_textStyle:this._textStyle}}},n.Renderer.prototype.pop=function(t){t.properties&&Object.assign(this,t.properties)},n.Renderer.prototype.resize=function(t,e){this.width=t,this.height=e,this.elt.width=t*this._pInst._pixelDensity,this.elt.height=e*this._pInst._pixelDensity,this.elt.style.width=t+"px",this.elt.style.height=e+"px",this._isMainCanvas&&(this._pInst._setProperty("width",this.width),this._pInst._setProperty("height",this.height))},n.Renderer.prototype.textLeading=function(t){return"number"==typeof t?(this._setProperty("_textLeading",t),this._pInst):this._textLeading},n.Renderer.prototype.textSize=function(t){return"number"==typeof t?(this._setProperty("_textSize",t),this._setProperty("_textLeading",t*o._DEFAULT_LEADMULT),this._applyTextProperties()):this._textSize},n.Renderer.prototype.textStyle=function(t){return t?(t!==o.NORMAL&&t!==o.ITALIC&&t!==o.BOLD||this._setProperty("_textStyle",t),this._applyTextProperties()):this._textStyle},n.Renderer.prototype.textAscent=function(){return null===this._textAscent&&this._updateTextMetrics(),this._textAscent},n.Renderer.prototype.textDescent=function(){return null===this._textDescent&&this._updateTextMetrics(),this._textDescent},n.Renderer.prototype.textAlign=function(t,e){return void 0!==t?(this._setProperty("_textAlign",t),void 0!==e&&this._setProperty("_textBaseline",e),this._applyTextProperties()):{horizontal:this._textAlign,vertical:this._textBaseline}},n.Renderer.prototype.text=function(t,e,i,r,n){var s,a,h,l,u,c,p,d,f=this._pInst,m=Number.MAX_VALUE;if((this._doFill||this._doStroke)&&void 0!==t){if("string"!=typeof t&&(t=t.toString()),t=t.replace(/(\t)/g,"  "),s=t.split("\n"),void 0!==r){for(d=0,h=0;h<s.length;h++)for(u="",p=s[h].split(" "),a=0;a<p.length;a++)c=u+p[a]+" ",this.textWidth(c)>r?(u=p[a]+" ",d+=f.textLeading()):u=c;switch(this._rectMode===o.CENTER&&(e-=r/2,i-=n/2),this._textAlign){case o.CENTER:e+=r/2;break;case o.RIGHT:e+=r}var y=!1;if(void 0!==n){switch(this._textBaseline){case o.BOTTOM:i+=n-d;break;case o.CENTER:i+=(n-d)/2;break;case o.BASELINE:y=!0,this._textBaseline=o.TOP}m=i+n-f.textAscent()}for(h=0;h<s.length;h++){for(u="",p=s[h].split(" "),a=0;a<p.length;a++)c=u+p[a]+" ",this.textWidth(c)>r&&u.length>0?(this._renderText(f,u,e,i,m),u=p[a]+" ",i+=f.textLeading()):u=c;this._renderText(f,u,e,i,m),i+=f.textLeading(),y&&(this._textBaseline=o.BASELINE)}}else{var v=0,g=f.textAlign().vertical;for(g===o.CENTER?v=(s.length-1)*f.textLeading()/2:g===o.BOTTOM&&(v=(s.length-1)*f.textLeading()),l=0;l<s.length;l++)this._renderText(f,s[l],e,i-v,m),i+=f.textLeading()}return f}},n.Renderer.prototype._applyDefaults=function(){return this},n.Renderer.prototype._isOpenType=function(t){return"object"==typeof(t=t||this._textFont)&&t.font&&t.font.supported},n.Renderer.prototype._updateTextMetrics=function(){if(this._isOpenType())return this._setProperty("_textAscent",this._textFont._textAscent()),this._setProperty("_textDescent",this._textFont._textDescent()),this;var t=document.createElement("span");t.style.fontFamily=this._textFont,t.style.fontSize=this._textSize+"px",t.innerHTML="ABCjgq|";var e=document.createElement("div");e.style.display="inline-block",e.style.width="1px",e.style.height="0px";var i=document.createElement("div");i.appendChild(t),i.appendChild(e),i.style.height="0px",i.style.overflow="hidden",document.body.appendChild(i),e.style.verticalAlign="baseline";var n=r(e),o=r(t),s=n[1]-o[1];e.style.verticalAlign="bottom",n=r(e),o=r(t);var a=n[1]-o[1],h=a-s;return document.body.removeChild(i),this._setProperty("_textAscent",s),this._setProperty("_textDescent",h),this},e.exports=n.Renderer},{"../core/constants":18,"./main":24}],28:[function(t,e,i){"use strict";var r=t("./main"),n=t("./constants"),o=t("../image/filters");t("./p5.Renderer");var s="rgba(0,0,0,0)";r.Renderer2D=function(t,e,i){return r.Renderer.call(this,t,e,i),this.drawingContext=this.canvas.getContext("2d"),this._pInst._setProperty("drawingContext",this.drawingContext),this},r.Renderer2D.prototype=Object.create(r.Renderer.prototype),r.Renderer2D.prototype._applyDefaults=function(){this._cachedFillStyle=this._cachedStrokeStyle=void 0,this._setFill(n._DEFAULT_FILL),this._setStroke(n._DEFAULT_STROKE),this.drawingContext.lineCap=n.ROUND,this.drawingContext.font="normal 12px sans-serif"},r.Renderer2D.prototype.resize=function(t,e){r.Renderer.prototype.resize.call(this,t,e),this.drawingContext.scale(this._pInst._pixelDensity,this._pInst._pixelDensity)},r.Renderer2D.prototype.background=function(){if(this.drawingContext.save(),this.resetMatrix(),arguments[0]instanceof r.Image)this._pInst.image(arguments[0],0,0,this.width,this.height);else{var t=this._getFill(),e=this._pInst.color.apply(this._pInst,arguments),i=e.toString();this._setFill(i),this.drawingContext.fillRect(0,0,this.width,this.height),this._setFill(t)}this.drawingContext.restore(),this._pInst._pixelsDirty=!0},r.Renderer2D.prototype.clear=function(){this.drawingContext.save(),this.resetMatrix(),this.drawingContext.clearRect(0,0,this.width,this.height),this.drawingContext.restore(),this._pInst._pixelsDirty=!0},r.Renderer2D.prototype.fill=function(){var t=this._pInst.color.apply(this._pInst,arguments);this._setFill(t.toString())},r.Renderer2D.prototype.stroke=function(){var t=this._pInst.color.apply(this._pInst,arguments);this._setStroke(t.toString())},r.Renderer2D.prototype.image=function(t,e,i,n,o,s,a,h,l){var u;try{this._tint&&(r.MediaElement&&t instanceof r.MediaElement&&t.loadPixels(),t.canvas&&(u=this._getTintedImageCanvas(t))),u||(u=t.canvas||t.elt);var c=1;t.width&&t.width>0&&(c=u.width/t.width),this.drawingContext.drawImage(u,c*e,c*i,c*n,c*o,s,a,h,l)}catch(t){if("NS_ERROR_NOT_AVAILABLE"!==t.name)throw t}this._pInst._pixelsDirty=!0},r.Renderer2D.prototype._getTintedImageCanvas=function(t){if(!t.canvas)return t;var e=o._toPixels(t.canvas),i=document.createElement("canvas");i.width=t.canvas.width,i.height=t.canvas.height;for(var r=i.getContext("2d"),n=r.createImageData(t.canvas.width,t.canvas.height),s=n.data,a=0;a<e.length;a+=4){var h=e[a],l=e[a+1],u=e[a+2],c=e[a+3];s[a]=h*this._tint[0]/255,s[a+1]=l*this._tint[1]/255,s[a+2]=u*this._tint[2]/255,s[a+3]=c*this._tint[3]/255}return r.putImageData(n,0,0),i},r.Renderer2D.prototype.blendMode=function(t){this.drawingContext.globalCompositeOperation=t},r.Renderer2D.prototype.blend=function(){var t=this.drawingContext.globalCompositeOperation,e=arguments[arguments.length-1],i=Array.prototype.slice.call(arguments,0,arguments.length-1);this.drawingContext.globalCompositeOperation=e,this._pInst?this._pInst.copy.apply(this._pInst,i):this.copy.apply(this,i),this.drawingContext.globalCompositeOperation=t},r.Renderer2D.prototype.copy=function(){var t,e,i,n,o,s,a,h,l;if(9===arguments.length)t=arguments[0],e=arguments[1],i=arguments[2],n=arguments[3],o=arguments[4],s=arguments[5],a=arguments[6],h=arguments[7],l=arguments[8];else{if(8!==arguments.length)throw new Error("Signature not supported");t=this._pInst,e=arguments[0],i=arguments[1],n=arguments[2],o=arguments[3],s=arguments[4],a=arguments[5],h=arguments[6],l=arguments[7]}r.Renderer2D._copyHelper(this,t,e,i,n,o,s,a,h,l),this._pInst._pixelsDirty=!0},r.Renderer2D._copyHelper=function(t,e,i,r,n,o,s,a,h,l){e.loadPixels();var u=e.canvas.width/e.width;t.drawingContext.drawImage(e.canvas,u*i,u*r,u*n,u*o,s,a,h,l)},r.Renderer2D.prototype.get=function(t,e,i,n){if(void 0===i&&void 0===n&&(void 0===t&&void 0===e?(t=e=0,i=this.width,n=this.height):i=n=1),t+i<0||e+n<0||t>=this.width||e>=this.height)return[0,0,0,255];var o=this._pInst||this,s=o._pixelDensity;t=Math.floor(t),e=Math.floor(e),i=Math.floor(i),n=Math.floor(n);var a,h,l=t*s,u=e*s;if(1!==i||1!==n||this instanceof r.RendererGL){var c=Math.min(i,o.width),p=Math.min(n,o.height),d=c*s,f=p*s,m=new r.Image(c,p);return m.canvas.getContext("2d").drawImage(this.canvas,l,u,d,f,0,0,c,p),m}return o._pixelsDirty?(a=this.drawingContext.getImageData(l,u,1,1).data,h=0):(a=o.pixels,h=4*(l+u*this.width*s)),[a[h+0],a[h+1],a[h+2],a[h+3]]},r.Renderer2D.prototype.loadPixels=function(){var t=this._pInst||this;if(t._pixelsDirty){t._pixelsDirty=!1;var e=t._pixelDensity,i=this.width*e,r=this.height*e,n=this.drawingContext.getImageData(0,0,i,r);t._setProperty("imageData",n),t._setProperty("pixels",n.data)}},r.Renderer2D.prototype.set=function(t,e,i){t=Math.floor(t),e=Math.floor(e);var n=this._pInst||this;if(i instanceof r.Image)this.drawingContext.save(),this.drawingContext.setTransform(1,0,0,1,0,0),this.drawingContext.scale(n._pixelDensity,n._pixelDensity),this.drawingContext.drawImage(i.canvas,t,e),this.drawingContext.restore(),n._pixelsDirty=!0;else{var o=0,s=0,a=0,h=0,l=4*(e*n._pixelDensity*(this.width*n._pixelDensity)+t*n._pixelDensity);if(n.imageData&&!n._pixelsDirty||n.loadPixels.call(n),"number"==typeof i)l<n.pixels.length&&(o=i,s=i,a=i,h=255);else if(i instanceof Array){if(i.length<4)throw new Error("pixel array must be of the form [R, G, B, A]");l<n.pixels.length&&(o=i[0],s=i[1],a=i[2],h=i[3])}else i instanceof r.Color&&l<n.pixels.length&&(o=i.levels[0],s=i.levels[1],a=i.levels[2],h=i.levels[3]);for(var u=0;u<n._pixelDensity;u++)for(var c=0;c<n._pixelDensity;c++)l=4*((e*n._pixelDensity+c)*this.width*n._pixelDensity+(t*n._pixelDensity+u)),n.pixels[l]=o,n.pixels[l+1]=s,n.pixels[l+2]=a,n.pixels[l+3]=h}},r.Renderer2D.prototype.updatePixels=function(t,e,i,r){var n=this._pInst||this,o=n._pixelDensity;void 0===t&&void 0===e&&void 0===i&&void 0===r&&(t=0,e=0,i=this.width,r=this.height),i*=o,r*=o,this.drawingContext.putImageData(n.imageData,t,e,0,0,i,r),0===t&&0===e&&i===this.width&&r===this.height||(n._pixelsDirty=!0)},r.Renderer2D.prototype._acuteArcToBezier=function(t,e){var i=e/2,r=Math.cos(i),n=Math.sin(i),o=1/Math.tan(i),s=t+i,a=Math.cos(s),h=Math.sin(s),l=(4-r)/3,u=n+(r-l)*o;return{ax:Math.cos(t),ay:Math.sin(t),bx:l*a+u*h,by:l*h-u*a,cx:l*a-u*h,cy:l*h+u*a,dx:Math.cos(t+e),dy:Math.sin(t+e)}},r.Renderer2D.prototype.arc=function(t,e,i,r,o,s,a){var h=this.drawingContext,l=i/2,u=r/2,c=0,p=[];for(t+=l,e+=u;s-o>1e-5;)c=Math.min(s-o,n.HALF_PI),p.push(this._acuteArcToBezier(o,c)),o+=c;return this._doFill&&(h.beginPath(),p.forEach(function(i,r){0===r&&h.moveTo(t+i.ax*l,e+i.ay*u),h.bezierCurveTo(t+i.bx*l,e+i.by*u,t+i.cx*l,e+i.cy*u,t+i.dx*l,e+i.dy*u)}),a!==n.PIE&&null!=a||h.lineTo(t,e),h.closePath(),h.fill()),this._doStroke&&(h.beginPath(),p.forEach(function(i,r){0===r&&h.moveTo(t+i.ax*l,e+i.ay*u),h.bezierCurveTo(t+i.bx*l,e+i.by*u,t+i.cx*l,e+i.cy*u,t+i.dx*l,e+i.dy*u)}),a===n.PIE?(h.lineTo(t,e),h.closePath()):a===n.CHORD&&h.closePath(),h.stroke()),this},r.Renderer2D.prototype.ellipse=function(t){var e=this.drawingContext,i=this._doFill,r=this._doStroke,n=t[0],o=t[1],a=t[2],h=t[3];if(i&&!r){if(this._getFill()===s)return this}else if(!i&&r&&this._getStroke()===s)return this;var l=.5522847498,u=a/2*l,c=h/2*l,p=n+a,d=o+h,f=n+a/2,m=o+h/2;e.beginPath(),e.moveTo(n,m),e.bezierCurveTo(n,m-c,f-u,o,f,o),e.bezierCurveTo(f+u,o,p,m-c,p,m),e.bezierCurveTo(p,m+c,f+u,d,f,d),e.bezierCurveTo(f-u,d,n,m+c,n,m),e.closePath(),i&&e.fill(),r&&e.stroke()},r.Renderer2D.prototype.line=function(t,e,i,r){var n=this.drawingContext;return this._doStroke?this._getStroke()===s?this:(n.lineWidth%2==1&&n.translate(.5,.5),n.beginPath(),n.moveTo(t,e),n.lineTo(i,r),n.stroke(),n.lineWidth%2==1&&n.translate(-.5,-.5),this):this},r.Renderer2D.prototype.point=function(t,e){var i=this.drawingContext;if(!this._doStroke)return this;if(this._getStroke()===s)return this;var r=this._getStroke(),o=this._getFill();t=Math.round(t),e=Math.round(e),this._setFill(r),i.lineWidth>1?(i.beginPath(),i.arc(t,e,i.lineWidth/2,0,n.TWO_PI,!1),i.fill()):i.fillRect(t,e,1,1),this._setFill(o)},r.Renderer2D.prototype.quad=function(t,e,i,r,n,o,a,h){var l=this.drawingContext,u=this._doFill,c=this._doStroke;if(u&&!c){if(this._getFill()===s)return this}else if(!u&&c&&this._getStroke()===s)return this;return l.beginPath(),l.moveTo(t,e),l.lineTo(i,r),l.lineTo(n,o),l.lineTo(a,h),l.closePath(),u&&l.fill(),c&&l.stroke(),this},r.Renderer2D.prototype.rect=function(t){var e=t[0],i=t[1],r=t[2],n=t[3],o=t[4],a=t[5],h=t[6],l=t[7],u=this.drawingContext,c=this._doFill,p=this._doStroke;if(c&&!p){if(this._getFill()===s)return this}else if(!c&&p&&this._getStroke()===s)return this;if(this._doStroke&&u.lineWidth%2==1&&u.translate(.5,.5),u.beginPath(),void 0===o)u.rect(e,i,r,n);else{void 0===a&&(a=o),void 0===h&&(h=a),void 0===l&&(l=h);var d=r/2,f=n/2;r<2*o&&(o=d),n<2*o&&(o=f),r<2*a&&(a=d),n<2*a&&(a=f),r<2*h&&(h=d),n<2*h&&(h=f),r<2*l&&(l=d),n<2*l&&(l=f),u.beginPath(),u.moveTo(e+o,i),u.arcTo(e+r,i,e+r,i+n,a),u.arcTo(e+r,i+n,e,i+n,h),u.arcTo(e,i+n,e,i,l),u.arcTo(e,i,e+r,i,o),u.closePath()}return this._doFill&&u.fill(),this._doStroke&&u.stroke(),this._doStroke&&u.lineWidth%2==1&&u.translate(-.5,-.5),this},r.Renderer2D.prototype.triangle=function(t){var e=this.drawingContext,i=this._doFill,r=this._doStroke,n=t[0],o=t[1],a=t[2],h=t[3],l=t[4],u=t[5];if(i&&!r){if(this._getFill()===s)return this}else if(!i&&r&&this._getStroke()===s)return this;e.beginPath(),e.moveTo(n,o),e.lineTo(a,h),e.lineTo(l,u),e.closePath(),i&&e.fill(),r&&e.stroke()},r.Renderer2D.prototype.endShape=function(t,e,i,r,o,s,a){if(0===e.length)return this;if(!this._doStroke&&!this._doFill)return this;var h,l=t===n.CLOSE;l&&!s&&e.push(e[0]);var u,c,p=e.length;if(!i||a!==n.POLYGON&&null!==a)if(!r||a!==n.POLYGON&&null!==a)if(!o||a!==n.POLYGON&&null!==a)if(a===n.POINTS)for(u=0;u<p;u++)h=e[u],this._doStroke&&this._pInst.stroke(h[6]),this._pInst.point(h[0],h[1]);else if(a===n.LINES)for(u=0;u+1<p;u+=2)h=e[u],this._doStroke&&this._pInst.stroke(e[u+1][6]),this._pInst.line(h[0],h[1],e[u+1][0],e[u+1][1]);else if(a===n.TRIANGLES)for(u=0;u+2<p;u+=3)h=e[u],this.drawingContext.beginPath(),this.drawingContext.moveTo(h[0],h[1]),this.drawingContext.lineTo(e[u+1][0],e[u+1][1]),this.drawingContext.lineTo(e[u+2][0],e[u+2][1]),this.drawingContext.closePath(),this._doFill&&(this._pInst.fill(e[u+2][5]),this.drawingContext.fill()),this._doStroke&&(this._pInst.stroke(e[u+2][6]),this.drawingContext.stroke());else if(a===n.TRIANGLE_STRIP)for(u=0;u+1<p;u++)h=e[u],this.drawingContext.beginPath(),this.drawingContext.moveTo(e[u+1][0],e[u+1][1]),this.drawingContext.lineTo(h[0],h[1]),this._doStroke&&this._pInst.stroke(e[u+1][6]),this._doFill&&this._pInst.fill(e[u+1][5]),u+2<p&&(this.drawingContext.lineTo(e[u+2][0],e[u+2][1]),this._doStroke&&this._pInst.stroke(e[u+2][6]),this._doFill&&this._pInst.fill(e[u+2][5])),this._doFillStrokeClose();else if(a===n.TRIANGLE_FAN){if(p>2){for(this.drawingContext.beginPath(),u=2;u<p;u++)h=e[u],this.drawingContext.moveTo(e[0][0],e[0][1]),this.drawingContext.lineTo(e[u-1][0],e[u-1][1]),this.drawingContext.lineTo(h[0],h[1]),this.drawingContext.lineTo(e[0][0],e[0][1]),u<p-1&&(this._doFill&&h[5]!==e[u+1][5]||this._doStroke&&h[6]!==e[u+1][6])&&(this._doFill&&(this._pInst.fill(h[5]),this.drawingContext.fill(),this._pInst.fill(e[u+1][5])),this._doStroke&&(this._pInst.stroke(h[6]),this.drawingContext.stroke(),this._pInst.stroke(e[u+1][6])),this.drawingContext.closePath(),this.drawingContext.beginPath());this._doFillStrokeClose()}}else if(a===n.QUADS)for(u=0;u+3<p;u+=4){for(h=e[u],this.drawingContext.beginPath(),this.drawingContext.moveTo(h[0],h[1]),c=1;c<4;c++)this.drawingContext.lineTo(e[u+c][0],e[u+c][1]);this.drawingContext.lineTo(h[0],h[1]),this._doFill&&this._pInst.fill(e[u+3][5]),this._doStroke&&this._pInst.stroke(e[u+3][6]),this._doFillStrokeClose()}else if(a===n.QUAD_STRIP){if(p>3)for(u=0;u+1<p;u+=2)h=e[u],this.drawingContext.beginPath(),u+3<p?(this.drawingContext.moveTo(e[u+2][0],e[u+2][1]),this.drawingContext.lineTo(h[0],h[1]),this.drawingContext.lineTo(e[u+1][0],e[u+1][1]),this.drawingContext.lineTo(e[u+3][0],e[u+3][1]),this._doFill&&this._pInst.fill(e[u+3][5]),this._doStroke&&this._pInst.stroke(e[u+3][6])):(this.drawingContext.moveTo(h[0],h[1]),this.drawingContext.lineTo(e[u+1][0],e[u+1][1])),this._doFillStrokeClose()}else{for(this.drawingContext.beginPath(),this.drawingContext.moveTo(e[0][0],e[0][1]),u=1;u<p;u++)(h=e[u]).isVert&&(h.moveTo?this.drawingContext.moveTo(h[0],h[1]):this.drawingContext.lineTo(h[0],h[1]));this._doFillStrokeClose()}else{for(this.drawingContext.beginPath(),u=0;u<p;u++)e[u].isVert?e[u].moveTo?this.drawingContext.moveTo([0],e[u][1]):this.drawingContext.lineTo(e[u][0],e[u][1]):this.drawingContext.quadraticCurveTo(e[u][0],e[u][1],e[u][2],e[u][3]);this._doFillStrokeClose()}else{for(this.drawingContext.beginPath(),u=0;u<p;u++)e[u].isVert?e[u].moveTo?this.drawingContext.moveTo(e[u][0],e[u][1]):this.drawingContext.lineTo(e[u][0],e[u][1]):this.drawingContext.bezierCurveTo(e[u][0],e[u][1],e[u][2],e[u][3],e[u][4],e[u][5]);this._doFillStrokeClose()}else if(p>3){var d=[],f=1-this._curveTightness;for(this.drawingContext.beginPath(),this.drawingContext.moveTo(e[1][0],e[1][1]),u=1;u+2<p;u++)h=e[u],d[0]=[h[0],h[1]],d[1]=[h[0]+(f*e[u+1][0]-f*e[u-1][0])/6,h[1]+(f*e[u+1][1]-f*e[u-1][1])/6],d[2]=[e[u+1][0]+(f*e[u][0]-f*e[u+2][0])/6,e[u+1][1]+(f*e[u][1]-f*e[u+2][1])/6],d[3]=[e[u+1][0],e[u+1][1]],this.drawingContext.bezierCurveTo(d[1][0],d[1][1],d[2][0],d[2][1],d[3][0],d[3][1]);l&&this.drawingContext.lineTo(e[u+1][0],e[u+1][1]),this._doFillStrokeClose()}return i=!1,r=!1,o=!1,s=!1,l&&e.pop(),this._pInst._pixelsDirty=!0,this},r.Renderer2D.prototype.noSmooth=function(){return"imageSmoothingEnabled"in this.drawingContext&&(this.drawingContext.imageSmoothingEnabled=!1),this},r.Renderer2D.prototype.smooth=function(){return"imageSmoothingEnabled"in this.drawingContext&&(this.drawingContext.imageSmoothingEnabled=!0),this},r.Renderer2D.prototype.strokeCap=function(t){return t!==n.ROUND&&t!==n.SQUARE&&t!==n.PROJECT||(this.drawingContext.lineCap=t),this},r.Renderer2D.prototype.strokeJoin=function(t){return t!==n.ROUND&&t!==n.BEVEL&&t!==n.MITER||(this.drawingContext.lineJoin=t),this},r.Renderer2D.prototype.strokeWeight=function(t){return this.drawingContext.lineWidth=void 0===t||0===t?1e-4:t,this},r.Renderer2D.prototype._getFill=function(){return this._cachedFillStyle||(this._cachedFillStyle=this.drawingContext.fillStyle),this._cachedFillStyle},r.Renderer2D.prototype._setFill=function(t){t!==this._cachedFillStyle&&(this.drawingContext.fillStyle=t,this._cachedFillStyle=t)},r.Renderer2D.prototype._getStroke=function(){return this._cachedStrokeStyle||(this._cachedStrokeStyle=this.drawingContext.strokeStyle),this._cachedStrokeStyle},r.Renderer2D.prototype._setStroke=function(t){t!==this._cachedStrokeStyle&&(this.drawingContext.strokeStyle=t,this._cachedStrokeStyle=t)},r.Renderer2D.prototype.bezier=function(t,e,i,r,n,o,s,a){return this._pInst.beginShape(),this._pInst.vertex(t,e),this._pInst.bezierVertex(i,r,n,o,s,a),this._pInst.endShape(),this},r.Renderer2D.prototype.curve=function(t,e,i,r,n,o,s,a){return this._pInst.beginShape(),this._pInst.curveVertex(t,e),this._pInst.curveVertex(i,r),this._pInst.curveVertex(n,o),this._pInst.curveVertex(s,a),this._pInst.endShape(),this},r.Renderer2D.prototype._doFillStrokeClose=function(){this._doFill&&this.drawingContext.fill(),this._doStroke&&this.drawingContext.stroke(),this.drawingContext.closePath(),this._pInst._pixelsDirty=!0},r.Renderer2D.prototype.applyMatrix=function(t,e,i,r,n,o){this.drawingContext.transform(t,e,i,r,n,o)},r.Renderer2D.prototype.resetMatrix=function(){return this.drawingContext.setTransform(1,0,0,1,0,0),this.drawingContext.scale(this._pInst._pixelDensity,this._pInst._pixelDensity),this},r.Renderer2D.prototype.rotate=function(t){this.drawingContext.rotate(t)},r.Renderer2D.prototype.scale=function(t,e){return this.drawingContext.scale(t,e),this},r.Renderer2D.prototype.shearX=function(t){return this.drawingContext.transform(1,0,Math.tan(t),1,0,0),this},r.Renderer2D.prototype.shearY=function(t){return this.drawingContext.transform(1,Math.tan(t),0,1,0,0),this},r.Renderer2D.prototype.translate=function(t,e){return t instanceof r.Vector&&(e=t.y,t=t.x),this.drawingContext.translate(t,e),this},r.Renderer2D.prototype.text=function(t,e,i,o,s){var a;void 0!==o&&void 0!==s&&this.drawingContext.textBaseline===n.BASELINE&&(a=!0,this.drawingContext.textBaseline=n.TOP);var h=r.Renderer.prototype.text.apply(this,arguments);return a&&(this.drawingContext.textBaseline=n.BASELINE),h},r.Renderer2D.prototype._renderText=function(t,e,i,r,o){if(!(r>=o))return t.push(),this._isOpenType()?this._textFont._renderPath(e,i,r,{renderer:this}):(this._doStroke&&this._strokeSet&&this.drawingContext.strokeText(e,i,r),this._doFill&&(this._fillSet||this._setFill(n._DEFAULT_TEXT_FILL),this.drawingContext.fillText(e,i,r))),t.pop(),this._pInst._pixelsDirty=!0,t},r.Renderer2D.prototype.textWidth=function(t){return this._isOpenType()?this._textFont._textWidth(t,this._textSize):this.drawingContext.measureText(t).width},r.Renderer2D.prototype._applyTextProperties=function(){var t,e=this._pInst;return this._setProperty("_textAscent",null),this._setProperty("_textDescent",null),t=this._textFont,this._isOpenType()&&(t=this._textFont.font.familyName,this._setProperty("_textStyle",this._textFont.font.styleName)),this.drawingContext.font=(this._textStyle||"normal")+" "+(this._textSize||12)+"px "+(t||"sans-serif"),this.drawingContext.textAlign=this._textAlign,this._textBaseline===n.CENTER?this.drawingContext.textBaseline=n._CTX_MIDDLE:this.drawingContext.textBaseline=this._textBaseline,e},r.Renderer2D.prototype.push=function(){return this.drawingContext.save(),r.Renderer.prototype.push.apply(this)},r.Renderer2D.prototype.pop=function(t){this.drawingContext.restore(),this._cachedFillStyle=this.drawingContext.fillStyle,this._cachedStrokeStyle=this.drawingContext.strokeStyle,r.Renderer.prototype.pop.call(this,t)},e.exports=r.Renderer2D},{"../image/filters":42,"./constants":18,"./main":24,"./p5.Renderer":27}],29:[function(t,e,i){"use strict";var r=t("./main"),n=t("./constants");t("./p5.Graphics"),t("./p5.Renderer2D"),t("../webgl/p5.RendererGL");var o="defaultCanvas0",s="p5Canvas";r.prototype.createCanvas=function(t,e,i){r._validateParameters("createCanvas",arguments);var a,h=i||n.P2D;if(h===n.WEBGL){if(a=document.getElementById(o)){a.parentNode.removeChild(a);var l=this._renderer;this._elements=this._elements.filter(function(t){return t!==l})}(a=document.createElement("canvas")).id=o,a.classList.add(s)}else if(this._defaultGraphicsCreated)a=this.canvas;else{a=document.createElement("canvas");for(var u=0;document.getElementById("defaultCanvas"+u);)u++;o="defaultCanvas"+u,a.id=o,a.classList.add(s)}return this._setupDone||(a.dataset.hidden=!0,a.style.visibility="hidden"),this._userNode?this._userNode.appendChild(a):document.body.appendChild(a),h===n.WEBGL?(this._setProperty("_renderer",new r.RendererGL(a,this,!0)),this._elements.push(this._renderer)):this._defaultGraphicsCreated||(this._setProperty("_renderer",new r.Renderer2D(a,this,!0)),this._defaultGraphicsCreated=!0,this._elements.push(this._renderer)),this._renderer.resize(t,e),this._renderer._applyDefaults(),this._renderer},r.prototype.resizeCanvas=function(t,e,i){if(r._validateParameters("resizeCanvas",arguments),this._renderer){var n={};for(var o in this.drawingContext){var s=this.drawingContext[o];"object"!=typeof s&&"function"!=typeof s&&(n[o]=s)}for(var a in this._renderer.resize(t,e),this.width=t,this.height=e,n)try{this.drawingContext[a]=n[a]}catch(t){}i||this.redraw()}},r.prototype.noCanvas=function(){this.canvas&&this.canvas.parentNode.removeChild(this.canvas)},r.prototype.createGraphics=function(t,e,i){return r._validateParameters("createGraphics",arguments),new r.Graphics(t,e,i,this)},r.prototype.blendMode=function(t){if(r._validateParameters("blendMode",arguments),t!==n.BLEND&&t!==n.DARKEST&&t!==n.LIGHTEST&&t!==n.DIFFERENCE&&t!==n.MULTIPLY&&t!==n.EXCLUSION&&t!==n.SCREEN&&t!==n.REPLACE&&t!==n.OVERLAY&&t!==n.HARD_LIGHT&&t!==n.SOFT_LIGHT&&t!==n.DODGE&&t!==n.BURN&&t!==n.ADD&&t!==n.NORMAL)throw new Error("Mode "+t+" not recognized.");this._renderer.blendMode(t)},e.exports=r},{"../webgl/p5.RendererGL":74,"./constants":18,"./main":24,"./p5.Graphics":26,"./p5.Renderer2D":28}],30:[function(t,e,i){"use strict";var r=t("../main"),n=t("../constants"),o=t("../helpers");t("../error_helpers"),r.prototype.arc=function(t,e,i,s,a,h,l,u){if(r._validateParameters("arc",arguments),!this._renderer._doStroke&&!this._renderer._doFill)return this;for(a=this._toRadians(a),h=this._toRadians(h);a<0;)a+=n.TWO_PI;for(;h<0;)h+=n.TWO_PI;void 0!==a&&void 0!==h&&(h.toFixed(10)===a.toFixed(10)||Math.abs(h-a)===n.TWO_PI?(a%=n.TWO_PI,h%=n.TWO_PI,a+=n.TWO_PI):Math.abs(h-a)>n.TWO_PI&&(a%=n.TWO_PI,h%=n.TWO_PI,h+=n.TWO_PI)),a<=n.HALF_PI?a=Math.atan(i/s*Math.tan(a)):a>n.HALF_PI&&a<=3*n.HALF_PI&&(a=Math.atan(i/s*Math.tan(a))+n.PI),h<=n.HALF_PI?h=Math.atan(i/s*Math.tan(h)):h>n.HALF_PI&&h<=3*n.HALF_PI&&(h=Math.atan(i/s*Math.tan(h))+n.PI),a>h&&(h+=n.TWO_PI),i=Math.abs(i),s=Math.abs(s);var c=o.modeAdjust(t,e,i,s,this._renderer._ellipseMode);return this._renderer.arc(c.x,c.y,c.w,c.h,a,h,l,u),this},r.prototype.ellipse=function(t,e,i,n,s){if(r._validateParameters("ellipse",arguments),!this._renderer._doStroke&&!this._renderer._doFill)return this;i<0&&(i=Math.abs(i)),void 0===n?n=i:n<0&&(n=Math.abs(n));var a=o.modeAdjust(t,e,i,n,this._renderer._ellipseMode);return this._renderer.ellipse([a.x,a.y,a.w,a.h,s]),this},r.prototype.line=function(){return r._validateParameters("line",arguments),this._renderer._doStroke&&this._renderer.line.apply(this._renderer,arguments),this},r.prototype.point=function(){return r._validateParameters("point",arguments),this._renderer._doStroke&&this._renderer.point.apply(this._renderer,arguments),this},r.prototype.quad=function(){return r._validateParameters("quad",arguments),(this._renderer._doStroke||this._renderer._doFill)&&this._renderer.quad.apply(this._renderer,arguments),this},r.prototype.rect=function(){if(r._validateParameters("rect",arguments),this._renderer._doStroke||this._renderer._doFill){for(var t=o.modeAdjust(arguments[0],arguments[1],arguments[2],arguments[3],this._renderer._rectMode),e=[t.x,t.y,t.w,t.h],i=4;i<arguments.length;i++)e[i]=arguments[i];this._renderer.rect(e)}return this},r.prototype.triangle=function(){return r._validateParameters("triangle",arguments),(this._renderer._doStroke||this._renderer._doFill)&&this._renderer.triangle(arguments),this},e.exports=r},{"../constants":18,"../error_helpers":20,"../helpers":21,"../main":24}],31:[function(t,e,i){"use strict";var r=t("../main"),n=t("../constants");r.prototype.ellipseMode=function(t){return r._validateParameters("ellipseMode",arguments),t!==n.CORNER&&t!==n.CORNERS&&t!==n.RADIUS&&t!==n.CENTER||(this._renderer._ellipseMode=t),this},r.prototype.noSmooth=function(){return this._renderer.noSmooth(),this},r.prototype.rectMode=function(t){return r._validateParameters("rectMode",arguments),t!==n.CORNER&&t!==n.CORNERS&&t!==n.RADIUS&&t!==n.CENTER||(this._renderer._rectMode=t),this},r.prototype.smooth=function(){return this._renderer.smooth(),this},r.prototype.strokeCap=function(t){return r._validateParameters("strokeCap",arguments),t!==n.ROUND&&t!==n.SQUARE&&t!==n.PROJECT||this._renderer.strokeCap(t),this},r.prototype.strokeJoin=function(t){return r._validateParameters("strokeJoin",arguments),t!==n.ROUND&&t!==n.BEVEL&&t!==n.MITER||this._renderer.strokeJoin(t),this},r.prototype.strokeWeight=function(t){return r._validateParameters("strokeWeight",arguments),this._renderer.strokeWeight(t),this},e.exports=r},{"../constants":18,"../main":24}],32:[function(t,e,i){"use strict";var r=t("../main");t("../error_helpers"),r.prototype.bezier=function(){return r._validateParameters("bezier",arguments),this._renderer._doStroke||this._renderer._doFill?(this._renderer.bezier.apply(this._renderer,arguments),this):this},r.prototype.bezierDetail=function(t){return r._validateParameters("bezierDetail",arguments),this._bezierDetail=t,this},r.prototype.bezierPoint=function(t,e,i,n,o){r._validateParameters("bezierPoint",arguments);var s=1-o;return Math.pow(s,3)*t+3*Math.pow(s,2)*o*e+3*s*Math.pow(o,2)*i+Math.pow(o,3)*n},r.prototype.bezierTangent=function(t,e,i,n,o){r._validateParameters("bezierTangent",arguments);var s=1-o;return 3*n*Math.pow(o,2)-3*i*Math.pow(o,2)+6*i*s*o-6*e*s*o+3*e*Math.pow(s,2)-3*t*Math.pow(s,2)},r.prototype.curve=function(){return r._validateParameters("curve",arguments),this._renderer._doStroke&&this._renderer.curve.apply(this._renderer,arguments),this},r.prototype.curveDetail=function(t){return r._validateParameters("curveDetail",arguments),this._curveDetail=t<3?3:t,this},r.prototype.curveTightness=function(t){return r._validateParameters("curveTightness",arguments),this._renderer._curveTightness=t,this},r.prototype.curvePoint=function(t,e,i,n,o){r._validateParameters("curvePoint",arguments);var s=o*o*o,a=o*o;return t*(-.5*s+a-.5*o)+e*(1.5*s-2.5*a+1)+i*(-1.5*s+2*a+.5*o)+n*(.5*s-.5*a)},r.prototype.curveTangent=function(t,e,i,n,o){r._validateParameters("curveTangent",arguments);var s=o*o;return t*(-3*s/2+2*o-.5)+e*(9*s/2-5*o)+i*(-9*s/2+4*o+.5)+n*(3*s/2-o)},e.exports=r},{"../error_helpers":20,"../main":24}],33:[function(t,e,i){"use strict";var r=t("../main"),n=t("../constants"),o=null,s=[],a=[],h=!1,l=!1,u=!1,c=!1,p=!0;r.prototype.beginContour=function(){return a=[],c=!0,this},r.prototype.beginShape=function(t){return r._validateParameters("beginShape",arguments),this._renderer.isP3D?this._renderer.beginShape.apply(this._renderer,arguments):(o=t===n.POINTS||t===n.LINES||t===n.TRIANGLES||t===n.TRIANGLE_FAN||t===n.TRIANGLE_STRIP||t===n.QUADS||t===n.QUAD_STRIP?t:null,s=[],a=[]),this},r.prototype.bezierVertex=function(){if(r._validateParameters("bezierVertex",arguments),this._renderer.isP3D)this._renderer.bezierVertex.apply(this._renderer,arguments);else{if(0===s.length)throw"vertex() must be used once before calling bezierVertex()";h=!0;for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];t.isVert=!1,c?a.push(t):s.push(t)}return this},r.prototype.curveVertex=function(){return r._validateParameters("curveVertex",arguments),this._renderer.isP3D?this._renderer.curveVertex.apply(this._renderer,arguments):(l=!0,this.vertex(arguments[0],arguments[1])),this},r.prototype.endContour=function(){var t=a[0].slice();t.isVert=a[0].isVert,t.moveTo=!1,a.push(t),p&&(s.push(s[0]),p=!1);for(var e=0;e<a.length;e++)s.push(a[e]);return this},r.prototype.endShape=function(t){if(r._validateParameters("endShape",arguments),this._renderer.isP3D)this._renderer.endShape(t,l,h,u,c,o);else{if(0===s.length)return this;if(!this._renderer._doStroke&&!this._renderer._doFill)return this;var e=t===n.CLOSE;e&&!c&&s.push(s[0]),this._renderer.endShape(t,s,l,h,u,c,o),l=!1,h=!1,u=!1,c=!1,p=!0,e&&s.pop()}return this},r.prototype.quadraticVertex=function(){if(r._validateParameters("quadraticVertex",arguments),this._renderer.isP3D)this._renderer.quadraticVertex.apply(this._renderer,arguments);else{if(this._contourInited){var t={};return t.x=arguments[0],t.y=arguments[1],t.x3=arguments[2],t.y3=arguments[3],t.type=n.QUADRATIC,this._contourVertices.push(t),this}if(!(s.length>0))throw new Error("vertex() must be used once before calling quadraticVertex()");u=!0;for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];e.isVert=!1,c?a.push(e):s.push(e)}return this},r.prototype.vertex=function(t,e,i,r,n){if(this._renderer.isP3D)this._renderer.vertex.apply(this._renderer,arguments);else{var o=[];o.isVert=!0,o[0]=t,o[1]=e,o[2]=0,o[3]=0,o[4]=0,o[5]=this._renderer._getFill(),o[6]=this._renderer._getStroke(),i&&(o.moveTo=i),c?(0===a.length&&(o.moveTo=!0),a.push(o)):s.push(o)}return this},e.exports=r},{"../constants":18,"../main":24}],34:[function(t,e,i){"use strict";window.requestAnimationFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t,e){window.setTimeout(t,1e3/60)},"undefined"==typeof Uint8ClampedArray||Uint8ClampedArray.prototype.slice||Object.defineProperty(Uint8ClampedArray.prototype,"slice",{value:Array.prototype.slice,writable:!0,configurable:!0,enumerable:!1}),function(){if(!Object.assign){var t=Object.keys,e=Object.defineProperty,i="function"==typeof Symbol&&"symbol"==typeof Symbol(),r=Object.prototype.propertyIsEnumerable,n=function(t){return function(e){return r.call(t,e)}};e(Object,"assign",{value:function(e,r){if(!function(t){return void 0!==t&&null!==t}(e))throw new TypeError("target must be an object");var o,s,a,h,l=Object(e);for(o=1;o<arguments.length;++o)for(s=Object(arguments[o]),h=t(s),i&&Object.getOwnPropertySymbols&&h.push.apply(h,Object.getOwnPropertySymbols(s).filter(n(s))),a=0;a<h.length;++a)l[h[a]]=s[h[a]];return l},configurable:!0,enumerable:!1,writable:!0})}}()},{}],35:[function(t,e,i){"use strict";var r=t("./main");r.prototype.noLoop=function(){this._loop=!1},r.prototype.loop=function(){this._loop=!0,this._draw()},r.prototype.push=function(){this._styles.push({props:{_colorMode:this._colorMode},renderer:this._renderer.push()})},r.prototype.pop=function(){var t=this._styles.pop();t?(this._renderer.pop(t.renderer),Object.assign(this,t.props)):console.warn("pop() was called without matching push()")},r.prototype.redraw=function(t){var e=parseInt(t);(isNaN(e)||e<1)&&(e=1);var i=this._isGlobal?window:this,r=i.setup,n=i.draw;if("function"==typeof n){void 0===r&&i.scale(i._pixelDensity,i._pixelDensity);for(var o=function(t){t.call(i)},s=0;s<e;s++)i.resetMatrix(),i._renderer.isP3D&&i._renderer._update(),i._setProperty("frameCount",i.frameCount+1),i._registeredMethods.pre.forEach(o),n(),i._registeredMethods.post.forEach(o)}},e.exports=r},{"./main":24}],36:[function(t,e,i){"use strict";var r=t("./main");r.prototype.applyMatrix=function(t,e,i,r,n,o){return this._renderer.applyMatrix(t,e,i,r,n,o),this},r.prototype.popMatrix=function(){throw new Error("popMatrix() not used, see pop()")},r.prototype.printMatrix=function(){throw new Error("printMatrix() not implemented")},r.prototype.pushMatrix=function(){throw new Error("pushMatrix() not used, see push()")},r.prototype.resetMatrix=function(){return this._renderer.resetMatrix(),this},r.prototype.rotate=function(t,e){return r._validateParameters("rotate",arguments),this._renderer.rotate(this._toRadians(t),e),this},r.prototype.rotateX=function(t){return this._assert3d("rotateX"),r._validateParameters("rotateX",arguments),this._renderer.rotateX(this._toRadians(t)),this},r.prototype.rotateY=function(t){return this._assert3d("rotateY"),r._validateParameters("rotateY",arguments),this._renderer.rotateY(this._toRadians(t)),this},r.prototype.rotateZ=function(t){return this._assert3d("rotateZ"),r._validateParameters("rotateZ",arguments),this._renderer.rotateZ(this._toRadians(t)),this},r.prototype.scale=function(t,e,i){if(r._validateParameters("scale",arguments),t instanceof r.Vector){var n=t;t=n.x,e=n.y,i=n.z}else if(t instanceof Array){var o=t;t=o[0],e=o[1],i=o[2]||1}return isNaN(e)?e=i=t:isNaN(i)&&(i=1),this._renderer.scale.call(this._renderer,t,e,i),this},r.prototype.shearX=function(t){return r._validateParameters("shearX",arguments),this._renderer.shearX(this._toRadians(t)),this},r.prototype.shearY=function(t){return r._validateParameters("shearY",arguments),this._renderer.shearY(this._toRadians(t)),this},r.prototype.translate=function(t,e,i){return r._validateParameters("translate",arguments),this._renderer.isP3D?this._renderer.translate(t,e,i):this._renderer.translate(t,e),this},e.exports=r},{"./main":24}],37:[function(t,e,i){"use strict";var r=t("../core/main");r.prototype.createStringDict=function(t,e){return r._validateParameters("createStringDict",arguments),new r.StringDict(t,e)},r.prototype.createNumberDict=function(t,e){return r._validateParameters("createNumberDict",arguments),new r.NumberDict(t,e)},r.TypedDict=function(t,e){return t instanceof Object?this.data=t:(this.data={},this.data[t]=e),this},r.TypedDict.prototype.size=function(){return Object.keys(this.data).length},r.TypedDict.prototype.hasKey=function(t){return this.data.hasOwnProperty(t)},r.TypedDict.prototype.get=function(t){if(this.data.hasOwnProperty(t))return this.data[t];console.log(t+" does not exist in this Dictionary")},r.TypedDict.prototype.set=function(t,e){this._validate(e)?this.data[t]=e:console.log("Those values dont work for this dictionary type.")},r.TypedDict.prototype._addObj=function(t){for(var e in t)this.set(e,t[e])},r.TypedDict.prototype.create=function(t,e){t instanceof Object&&void 0===e?this._addObj(t):void 0!==t?this.set(t,e):console.log("In order to create a new Dictionary entry you must pass an object or a key, value pair")},r.TypedDict.prototype.clear=function(){this.data={}},r.TypedDict.prototype.remove=function(t){if(!this.data.hasOwnProperty(t))throw new Error(t+" does not exist in this Dictionary");delete this.data[t]},r.TypedDict.prototype.print=function(){for(var t in this.data)console.log("key:"+t+" value:"+this.data[t])},r.TypedDict.prototype.saveTable=function(t){var e="";for(var i in this.data)e+=i+","+this.data[i]+"\n";var n=new Blob([e],{type:"text/csv"});r.prototype.downloadFile(n,t||"mycsv","csv")},r.TypedDict.prototype.saveJSON=function(t,e){r.prototype.saveJSON(this.data,t,e)},r.TypedDict.prototype._validate=function(t){return!0},r.StringDict=function(){r.TypedDict.apply(this,arguments)},r.StringDict.prototype=Object.create(r.TypedDict.prototype),r.StringDict.prototype._validate=function(t){return"string"==typeof t},r.NumberDict=function(){r.TypedDict.apply(this,arguments)},r.NumberDict.prototype=Object.create(r.TypedDict.prototype),r.NumberDict.prototype._validate=function(t){return"number"==typeof t},r.NumberDict.prototype.add=function(t,e){this.data.hasOwnProperty(t)?this.data[t]+=e:console.log("The key - "+t+" does not exist in this dictionary.")},r.NumberDict.prototype.sub=function(t,e){this.add(t,-e)},r.NumberDict.prototype.mult=function(t,e){this.data.hasOwnProperty(t)?this.data[t]*=e:console.log("The key - "+t+" does not exist in this dictionary.")},r.NumberDict.prototype.div=function(t,e){this.data.hasOwnProperty(t)?this.data[t]/=e:console.log("The key - "+t+" does not exist in this dictionary.")},r.NumberDict.prototype._valueTest=function(t){if(0===Object.keys(this.data).length)throw new Error("Unable to search for a minimum or maximum value on an empty NumberDict");if(1===Object.keys(this.data).length)return this.data[Object.keys(this.data)[0]];var e=this.data[Object.keys(this.data)[0]];for(var i in this.data)this.data[i]*t<e*t&&(e=this.data[i]);return e},r.NumberDict.prototype.minValue=function(){return this._valueTest(1)},r.NumberDict.prototype.maxValue=function(){return this._valueTest(-1)},r.NumberDict.prototype._keyTest=function(t){if(0===Object.keys(this.data).length)throw new Error("Unable to use minValue on an empty NumberDict");if(1===Object.keys(this.data).length)return Object.keys(this.data)[0];for(var e=Object.keys(this.data)[0],i=1;i<Object.keys(this.data).length;i++)Object.keys(this.data)[i]*t<e*t&&(e=Object.keys(this.data)[i]);return e},r.NumberDict.prototype.minKey=function(){return this._keyTest(1)},r.NumberDict.prototype.maxKey=function(){return this._keyTest(-1)},e.exports=r.TypedDict},{"../core/main":24}],38:[function(t,e,i){"use strict";var r=t("../core/main");r.prototype.deviceOrientation=void 0,r.prototype.accelerationX=0,r.prototype.accelerationY=0,r.prototype.accelerationZ=0,r.prototype.pAccelerationX=0,r.prototype.pAccelerationY=0,r.prototype.pAccelerationZ=0,r.prototype._updatePAccelerations=function(){this._setProperty("pAccelerationX",this.accelerationX),this._setProperty("pAccelerationY",this.accelerationY),this._setProperty("pAccelerationZ",this.accelerationZ)},r.prototype.rotationX=0,r.prototype.rotationY=0,r.prototype.rotationZ=0,r.prototype.pRotationX=0,r.prototype.pRotationY=0,r.prototype.pRotationZ=0;var n,o,s,a=0,h=0,l=0,u="clockwise",c="clockwise",p="clockwise";r.prototype._updatePRotations=function(){this._setProperty("pRotationX",this.rotationX),this._setProperty("pRotationY",this.rotationY),this._setProperty("pRotationZ",this.rotationZ)},r.prototype.turnAxis=void 0;var d=.5,f=30;r.prototype.setMoveThreshold=function(t){r._validateParameters("setMoveThreshold",arguments),d=t},r.prototype.setShakeThreshold=function(t){r._validateParameters("setShakeThreshold",arguments),f=t},r.prototype._ondeviceorientation=function(t){this._updatePRotations(),this._setProperty("rotationX",t.beta),this._setProperty("rotationY",t.gamma),this._setProperty("rotationZ",t.alpha),this._handleMotion()},r.prototype._ondevicemotion=function(t){this._updatePAccelerations(),this._setProperty("accelerationX",2*t.acceleration.x),this._setProperty("accelerationY",2*t.acceleration.y),this._setProperty("accelerationZ",2*t.acceleration.z),this._handleMotion()},r.prototype._handleMotion=function(){90===window.orientation||-90===window.orientation?this._setProperty("deviceOrientation","landscape"):0===window.orientation?this._setProperty("deviceOrientation","portrait"):void 0===window.orientation&&this._setProperty("deviceOrientation","undefined");var t=this.deviceMoved||window.deviceMoved;"function"==typeof t&&(Math.abs(this.accelerationX-this.pAccelerationX)>d||Math.abs(this.accelerationY-this.pAccelerationY)>d||Math.abs(this.accelerationZ-this.pAccelerationZ)>d)&&t();var e=this.deviceTurned||window.deviceTurned;if("function"==typeof e){var i=this.rotationX+180,r=this.pRotationX+180,m=a+180;i-r>0&&i-r<270||i-r<-270?u="clockwise":(i-r<0||i-r>270)&&(u="counter-clockwise"),u!==n&&(m=i),Math.abs(i-m)>90&&Math.abs(i-m)<270&&(m=i,this._setProperty("turnAxis","X"),e()),n=u,a=m-180;var y=this.rotationY+180,v=this.pRotationY+180,g=h+180;y-v>0&&y-v<270||y-v<-270?c="clockwise":(y-v<0||y-this.pRotationY>270)&&(c="counter-clockwise"),c!==o&&(g=y),Math.abs(y-g)>90&&Math.abs(y-g)<270&&(g=y,this._setProperty("turnAxis","Y"),e()),o=c,h=g-180,this.rotationZ-this.pRotationZ>0&&this.rotationZ-this.pRotationZ<270||this.rotationZ-this.pRotationZ<-270?p="clockwise":(this.rotationZ-this.pRotationZ<0||this.rotationZ-this.pRotationZ>270)&&(p="counter-clockwise"),p!==s&&(l=this.rotationZ),Math.abs(this.rotationZ-l)>90&&Math.abs(this.rotationZ-l)<270&&(l=this.rotationZ,this._setProperty("turnAxis","Z"),e()),s=p,this._setProperty("turnAxis",void 0)}var _,b,S=this.deviceShaken||window.deviceShaken;"function"==typeof S&&(null!==this.pAccelerationX&&(_=Math.abs(this.accelerationX-this.pAccelerationX),b=Math.abs(this.accelerationY-this.pAccelerationY)),_+b>f&&S())},e.exports=r},{"../core/main":24}],39:[function(t,e,i){"use strict";var r=t("../core/main"),n={};r.prototype.isKeyPressed=!1,r.prototype.keyIsPressed=!1,r.prototype.key="",r.prototype.keyCode=0,r.prototype._onkeydown=function(t){if(!n[t.which]){this._setProperty("isKeyPressed",!0),this._setProperty("keyIsPressed",!0),this._setProperty("keyCode",t.which),n[t.which]=!0,this._setProperty("key",t.key||String.fromCharCode(t.which)||t.which);var e=this.keyPressed||window.keyPressed;"function"!=typeof e||t.charCode||!1===e(t)&&t.preventDefault()}},r.prototype._onkeyup=function(t){var e=this.keyReleased||window.keyReleased;n[t.which]=!1,function(){for(var t in n)if(n.hasOwnProperty(t)&&!0===n[t])return!0;return!1}()||(this._setProperty("isKeyPressed",!1),this._setProperty("keyIsPressed",!1)),this._setProperty("_lastKeyCodeTyped",null),this._setProperty("key",t.key||String.fromCharCode(t.which)||t.which),this._setProperty("keyCode",t.which),"function"==typeof e&&!1===e(t)&&t.preventDefault()},r.prototype._onkeypress=function(t){if(t.which!==this._lastKeyCodeTyped){this._setProperty("keyCode",t.which),this._setProperty("_lastKeyCodeTyped",t.which),this._setProperty("key",String.fromCharCode(t.which));var e=this.keyTyped||window.keyTyped;"function"==typeof e&&!1===e(t)&&t.preventDefault()}},r.prototype._onblur=function(t){n={}},r.prototype.keyIsDown=function(t){return r._validateParameters("keyIsDown",arguments),n[t]},e.exports=r},{"../core/main":24}],40:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("../core/constants");r.prototype._hasMouseInteracted=!1,r.prototype.mouseX=0,r.prototype.mouseY=0,r.prototype.pmouseX=0,r.prototype.pmouseY=0,r.prototype.winMouseX=0,r.prototype.winMouseY=0,r.prototype.pwinMouseX=0,r.prototype.pwinMouseY=0,r.prototype.mouseButton=0,r.prototype.mouseIsPressed=!1,r.prototype._updateNextMouseCoords=function(t){if(null!==this._curElement&&(!t.touches||t.touches.length>0)){var e=function(t,e,i,r){r&&!r.clientX&&(r.touches?r=r.touches[0]:r.changedTouches&&(r=r.changedTouches[0]));var n=t.getBoundingClientRect(),o=t.scrollWidth/e,s=t.scrollHeight/i;return{x:(r.clientX-n.left)/o,y:(r.clientY-n.top)/s,winX:r.clientX,winY:r.clientY,id:r.identifier}}(this._curElement.elt,this.width,this.height,t);this._setProperty("mouseX",e.x),this._setProperty("mouseY",e.y),this._setProperty("winMouseX",e.winX),this._setProperty("winMouseY",e.winY)}this._hasMouseInteracted||(this._updateMouseCoords(),this._setProperty("_hasMouseInteracted",!0))},r.prototype._updateMouseCoords=function(){this._setProperty("pmouseX",this.mouseX),this._setProperty("pmouseY",this.mouseY),this._setProperty("pwinMouseX",this.winMouseX),this._setProperty("pwinMouseY",this.winMouseY),this._setProperty("_pmouseWheelDeltaY",this._mouseWheelDeltaY)},r.prototype._setMouseButton=function(t){1===t.button?this._setProperty("mouseButton",n.CENTER):2===t.button?this._setProperty("mouseButton",n.RIGHT):this._setProperty("mouseButton",n.LEFT)},r.prototype._onmousemove=function(t){var e=this._isGlobal?window:this;this._updateNextMouseCoords(t),this.mouseIsPressed?"function"==typeof e.mouseDragged?!1===e.mouseDragged(t)&&t.preventDefault():"function"==typeof e.touchMoved&&!1===e.touchMoved(t)&&t.preventDefault():"function"==typeof e.mouseMoved&&!1===e.mouseMoved(t)&&t.preventDefault()},r.prototype._onmousedown=function(t){var e=this._isGlobal?window:this;this._setProperty("mouseIsPressed",!0),this._setMouseButton(t),this._updateNextMouseCoords(t),"function"==typeof e.mousePressed?!1===e.mousePressed(t)&&t.preventDefault():"function"==typeof e.touchStarted&&!1===e.touchStarted(t)&&t.preventDefault()},r.prototype._onmouseup=function(t){var e=this._isGlobal?window:this;this._setProperty("mouseIsPressed",!1),"function"==typeof e.mouseReleased?!1===e.mouseReleased(t)&&t.preventDefault():"function"==typeof e.touchEnded&&!1===e.touchEnded(t)&&t.preventDefault()},r.prototype._ondragend=r.prototype._onmouseup,r.prototype._ondragover=r.prototype._onmousemove,r.prototype._onclick=function(t){var e=this._isGlobal?window:this;"function"==typeof e.mouseClicked&&!1===e.mouseClicked(t)&&t.preventDefault()},r.prototype._ondblclick=function(t){var e=this._isGlobal?window:this;"function"==typeof e.doubleClicked&&!1===e.doubleClicked(t)&&t.preventDefault()},r.prototype._mouseWheelDeltaY=0,r.prototype._pmouseWheelDeltaY=0,r.prototype._onwheel=function(t){var e=this._isGlobal?window:this;this._setProperty("_mouseWheelDeltaY",t.deltaY),"function"==typeof e.mouseWheel&&(t.delta=t.deltaY,!1===e.mouseWheel(t)&&t.preventDefault())},e.exports=r},{"../core/constants":18,"../core/main":24}],41:[function(t,e,i){"use strict";function r(t,e,i,r,n){n=n||0;var o=t.getBoundingClientRect(),s=t.scrollWidth/e,a=t.scrollHeight/i,h=r.touches[n]||r.changedTouches[n];return{x:(h.clientX-o.left)/s,y:(h.clientY-o.top)/a,winX:h.clientX,winY:h.clientY,id:h.identifier}}var n=t("../core/main");n.prototype.touches=[],n.prototype._updateTouchCoords=function(t){if(null!==this._curElement){for(var e=[],i=0;i<t.touches.length;i++)e[i]=r(this._curElement.elt,this.width,this.height,t,i);this._setProperty("touches",e)}},n.prototype._ontouchstart=function(t){var e=this._isGlobal?window:this;this._setProperty("mouseIsPressed",!0),this._updateTouchCoords(t),this._updateNextMouseCoords(t),this._updateMouseCoords(),"function"==typeof e.touchStarted?!1===e.touchStarted(t)&&t.preventDefault():"function"==typeof e.mousePressed&&!1===e.mousePressed(t)&&t.preventDefault()},n.prototype._ontouchmove=function(t){var e=this._isGlobal?window:this;this._updateTouchCoords(t),this._updateNextMouseCoords(t),"function"==typeof e.touchMoved?!1===e.touchMoved(t)&&t.preventDefault():"function"==typeof e.mouseDragged&&!1===e.mouseDragged(t)&&t.preventDefault()},n.prototype._ontouchend=function(t){this._setProperty("mouseIsPressed",!1),this._updateTouchCoords(t),this._updateNextMouseCoords(t);var e=this._isGlobal?window:this;"function"==typeof e.touchEnded?!1===e.touchEnded(t)&&t.preventDefault():"function"==typeof e.mouseReleased&&!1===e.mouseReleased(t)&&t.preventDefault()},e.exports=n},{"../core/main":24}],42:[function(t,e,i){"use strict";function r(t,e){for(var i=h._toPixels(t),r=t.width,l=t.height,u=r*l,c=new Int32Array(u),p=0;p<u;p++)c[p]=h._getARGB(i,p);var d,f,m,y,v,g,_,b,S,x,w,T,A,M,P=new Int32Array(u),E=new Int32Array(u),k=new Int32Array(u),C=new Int32Array(u),R=0;for(function(t){var e=3.5*t|0;if(n!==(e=e<1?1:e<248?e:248)){o=1+(n=e)<<1,s=new Int32Array(o),a=new Array(o);for(var i=0;i<o;i++)a[i]=new Int32Array(256);for(var r,h,l,u,c=1,p=e-1;c<e;c++){s[e+c]=s[p]=h=p*p,l=a[e+c],u=a[p--];for(var d=0;d<256;d++)l[d]=u[d]=h*d}r=s[e]=e*e,l=a[e];for(var f=0;f<256;f++)l[f]=r*f}}(e),T=0;T<l;T++){for(w=0;w<r;w++){if(y=m=f=v=d=0,(g=w-n)<0)x=-g,g=0;else{if(g>=r)break;x=0}for(A=x;A<o&&!(g>=r);A++){var O=c[g+R];M=a[A],v+=M[(-16777216&O)>>>24],f+=M[(16711680&O)>>16],m+=M[(65280&O)>>8],y+=M[255&O],d+=s[A],g++}P[_=R+w]=v/d,E[_]=f/d,k[_]=m/d,C[_]=y/d}R+=r}for(R=0,S=(b=-n)*r,T=0;T<l;T++){for(w=0;w<r;w++){if(y=m=f=v=d=0,b<0)x=_=-b,g=w;else{if(b>=l)break;x=0,_=b,g=w+S}for(A=x;A<o&&!(_>=l);A++)M=a[A],v+=M[P[g]],f+=M[E[g]],m+=M[k[g]],y+=M[C[g]],d+=s[A],_++,g+=r;c[w+R]=v/d<<24|f/d<<16|m/d<<8|y/d}R+=r,S+=r,b++}h._setPixels(i,c)}var n,o,s,a,h={_toPixels:function(t){return t instanceof ImageData?t.data:t.getContext("2d").getImageData(0,0,t.width,t.height).data},_getARGB:function(t,e){var i=4*e;return t[i+3]<<24&4278190080|t[i]<<16&16711680|t[i+1]<<8&65280|255&t[i+2]},_setPixels:function(t,e){for(var i=0,r=0,n=t.length;r<n;r++)t[0+(i=4*r)]=(16711680&e[r])>>>16,t[i+1]=(65280&e[r])>>>8,t[i+2]=255&e[r],t[i+3]=(4278190080&e[r])>>>24},_toImageData:function(t){return t instanceof ImageData?t:t.getContext("2d").getImageData(0,0,t.width,t.height)},_createImageData:function(t,e){return h._tmpCanvas=document.createElement("canvas"),h._tmpCtx=h._tmpCanvas.getContext("2d"),this._tmpCtx.createImageData(t,e)},apply:function(t,e,i){var r=t.getContext("2d"),n=r.getImageData(0,0,t.width,t.height),o=e(n,i);o instanceof ImageData?r.putImageData(o,0,0,0,0,t.width,t.height):r.putImageData(n,0,0,0,0,t.width,t.height)},threshold:function(t,e){var i=h._toPixels(t);void 0===e&&(e=.5);for(var r=Math.floor(255*e),n=0;n<i.length;n+=4){var o,s=i[n],a=i[n+1],l=i[n+2],u=.2126*s+.7152*a+.0722*l;o=u>=r?255:0,i[n]=i[n+1]=i[n+2]=o}},gray:function(t){for(var e=h._toPixels(t),i=0;i<e.length;i+=4){var r=e[i],n=e[i+1],o=e[i+2],s=.2126*r+.7152*n+.0722*o;e[i]=e[i+1]=e[i+2]=s}},opaque:function(t){for(var e=h._toPixels(t),i=0;i<e.length;i+=4)e[i+3]=255;return e},invert:function(t){for(var e=h._toPixels(t),i=0;i<e.length;i+=4)e[i]=255-e[i],e[i+1]=255-e[i+1],e[i+2]=255-e[i+2]},posterize:function(t,e){var i=h._toPixels(t);if(e<2||e>255)throw new Error("Level must be greater than 2 and less than 255 for posterize");for(var r=e-1,n=0;n<i.length;n+=4){var o=i[n],s=i[n+1],a=i[n+2];i[n]=255*(o*e>>8)/r,i[n+1]=255*(s*e>>8)/r,i[n+2]=255*(a*e>>8)/r}},dilate:function(t){for(var e,i,r,n,o,s,a,l,u,c,p,d,f,m,y,v,g,_=h._toPixels(t),b=0,S=_.length?_.length/4:0,x=new Int32Array(S);b<S;)for(e=b,i=b+t.width;b<i;)r=n=h._getARGB(_,b),a=b-1,s=b+1,l=b-t.width,u=b+t.width,a<e&&(a=b),s>=i&&(s=b),l<0&&(l=0),u>=S&&(u=b),d=h._getARGB(_,l),p=h._getARGB(_,a),f=h._getARGB(_,u),c=h._getARGB(_,s),m=77*(c>>16&255)+151*(c>>8&255)+28*(255&c),v=77*(d>>16&255)+151*(d>>8&255)+28*(255&d),g=77*(f>>16&255)+151*(f>>8&255)+28*(255&f),(y=77*(p>>16&255)+151*(p>>8&255)+28*(255&p))>(o=77*(r>>16&255)+151*(r>>8&255)+28*(255&r))&&(n=p,o=y),m>o&&(n=c,o=m),v>o&&(n=d,o=v),g>o&&(n=f,o=g),x[b++]=n;h._setPixels(_,x)},erode:function(t){for(var e,i,r,n,o,s,a,l,u,c,p,d,f,m,y,v,g,_=h._toPixels(t),b=0,S=_.length?_.length/4:0,x=new Int32Array(S);b<S;)for(e=b,i=b+t.width;b<i;)r=n=h._getARGB(_,b),a=b-1,s=b+1,l=b-t.width,u=b+t.width,a<e&&(a=b),s>=i&&(s=b),l<0&&(l=0),u>=S&&(u=b),d=h._getARGB(_,l),p=h._getARGB(_,a),f=h._getARGB(_,u),c=h._getARGB(_,s),m=77*(c>>16&255)+151*(c>>8&255)+28*(255&c),v=77*(d>>16&255)+151*(d>>8&255)+28*(255&d),g=77*(f>>16&255)+151*(f>>8&255)+28*(255&f),(y=77*(p>>16&255)+151*(p>>8&255)+28*(255&p))<(o=77*(r>>16&255)+151*(r>>8&255)+28*(255&r))&&(n=p,o=y),m<o&&(n=c,o=m),v<o&&(n=d,o=v),g<o&&(n=f,o=g),x[b++]=n;h._setPixels(_,x)},blur:function(t,e){r(t,e)}};e.exports=h},{}],43:[function(t,e,i){"use strict";var r=t("../core/main"),n=[];r.prototype.createImage=function(t,e){return r._validateParameters("createImage",arguments),new r.Image(t,e)},r.prototype.saveCanvas=function(){r._validateParameters("saveCanvas",arguments);var t,e,i,n,o=[].slice.call(arguments);switch(arguments[0]instanceof HTMLCanvasElement?(t=arguments[0],o.shift()):arguments[0]instanceof r.Element?(t=arguments[0].elt,o.shift()):t=this._curElement&&this._curElement.elt,o.length>=1&&(e=o[0]),o.length>=2&&(i=o[1]),i=i||r.prototype._checkFileExtension(e,i)[1]||"png"){default:n="image/png";break;case"jpeg":case"jpg":n="image/jpeg"}t.toBlob(function(t){r.prototype.downloadFile(t,e,i)},n)},r.prototype.saveFrames=function(t,e,i,o,s){r._validateParameters("saveFrames",arguments);var a=i||3;a=r.prototype.constrain(a,0,15),a*=1e3;var h=o||15;h=r.prototype.constrain(h,0,22);var l=0,u=r.prototype._makeFrame,c=this._curElement.elt,p=setInterval(function(){u(t+l,e,c),l++},1e3/h);setTimeout(function(){if(clearInterval(p),s)s(n);else for(var t=0;t<n.length;t++){var e=n[t];r.prototype.downloadFile(e.imageData,e.filename,e.ext)}n=[]},a+.01)},r.prototype._makeFrame=function(t,e,i){var r,o;if(r=this?this._curElement.elt:i,e)switch(e.toLowerCase()){case"png":o="image/png";break;case"jpeg":case"jpg":o="image/jpeg";break;default:o="image/png"}else e="png",o="image/png";var s=r.toDataURL(o);s=s.replace(o,"image/octet-stream");var a={};a.imageData=s,a.filename=t,a.ext=e,n.push(a)},e.exports=r},{"../core/main":24}],44:[function(t,e,i){"use strict";function r(t,e){return t>0&&t<e?t:e}var n=t("../core/main"),o=t("./filters"),s=t("../core/helpers"),a=t("../core/constants");t("../core/error_helpers"),n.prototype.loadImage=function(t,e,i){n._validateParameters("loadImage",arguments);var r=new Image,o=new n.Image(1,1,this),s=this;return r.onload=function(){o.width=o.canvas.width=r.width,o.height=o.canvas.height=r.height,o.drawingContext.drawImage(r,0,0),o.modified=!0,"function"==typeof e&&e(o),s._decrementPreload()},r.onerror=function(t){n._friendlyFileLoadError(0,r.src),"function"==typeof i&&i(t)},0!==t.indexOf("data:image/")&&(r.crossOrigin="Anonymous"),r.src=t,o},n.prototype.image=function(t,e,i,o,a,h,l,u,c){n._validateParameters("image",arguments);var p=t.width,d=t.height;t.elt&&t.elt.videoWidth&&!t.canvas&&(p=t.elt.videoWidth,d=t.elt.videoHeight);var f=e,m=i,y=o||p,v=a||d,g=h||0,_=l||0,b=u||p,S=c||d;b=r(b,p),S=r(S,d);var x=1;t.elt&&!t.canvas&&t.elt.style.width&&(x=t.elt.videoWidth&&!o?t.elt.videoWidth:t.elt.width,x/=parseInt(t.elt.style.width,10)),g*=x,_*=x,S*=x,b*=x;var w=s.modeAdjust(f,m,y,v,this._renderer._imageMode);this._renderer.image(t,g,_,b,S,w.x,w.y,w.w,w.h)},n.prototype.tint=function(){n._validateParameters("tint",arguments);var t=this.color.apply(this,arguments);this._renderer._tint=t.levels},n.prototype.noTint=function(){this._renderer._tint=null},n.prototype._getTintedImageCanvas=function(t){if(!t.canvas)return t;var e=o._toPixels(t.canvas),i=document.createElement("canvas");i.width=t.canvas.width,i.height=t.canvas.height;for(var r=i.getContext("2d"),n=r.createImageData(t.canvas.width,t.canvas.height),s=n.data,a=0;a<e.length;a+=4){var h=e[a],l=e[a+1],u=e[a+2],c=e[a+3];s[a]=h*this._renderer._tint[0]/255,s[a+1]=l*this._renderer._tint[1]/255,s[a+2]=u*this._renderer._tint[2]/255,s[a+3]=c*this._renderer._tint[3]/255}return r.putImageData(n,0,0),i},n.prototype.imageMode=function(t){n._validateParameters("imageMode",arguments),t!==a.CORNER&&t!==a.CORNERS&&t!==a.CENTER||(this._renderer._imageMode=t)},e.exports=n},{"../core/constants":18,"../core/error_helpers":20,"../core/helpers":21,"../core/main":24,"./filters":42}],45:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("./filters");r.Image=function(t,e){this.width=t,this.height=e,this.canvas=document.createElement("canvas"),this.canvas.width=this.width,this.canvas.height=this.height,this.drawingContext=this.canvas.getContext("2d"),this._pixelDensity=1,this._modified=!1,this._pixelsDirty=!0,this.pixels=[]},r.Image.prototype._setProperty=function(t,e){this[t]=e,this.setModified(!0)},r.Image.prototype.loadPixels=function(){r.Renderer2D.prototype.loadPixels.call(this),this.setModified(!0)},r.Image.prototype.updatePixels=function(t,e,i,n){r.Renderer2D.prototype.updatePixels.call(this,t,e,i,n),this.setModified(!0)},r.Image.prototype.get=function(t,e,i,n){return r.Renderer2D.prototype.get.call(this,t,e,i,n)},r.Image.prototype.set=function(t,e,i){r.Renderer2D.prototype.set.call(this,t,e,i),this.setModified(!0)},r.Image.prototype.resize=function(t,e){0===t&&0===e?(t=this.canvas.width,e=this.canvas.height):0===t?t=this.canvas.width*e/this.canvas.height:0===e&&(e=this.canvas.height*t/this.canvas.width),t=Math.floor(t),e=Math.floor(e);var i=document.createElement("canvas");i.width=t,i.height=e,i.getContext("2d").drawImage(this.canvas,0,0,this.canvas.width,this.canvas.height,0,0,i.width,i.height),this.canvas.width=this.width=t,this.canvas.height=this.height=e,this.drawingContext.drawImage(i,0,0,t,e,0,0,t,e),this.pixels.length>0&&this.loadPixels(),this.setModified(!0),this._pixelsDirty=!0},r.Image.prototype.copy=function(){var t,e,i,n,o,s,a,h,l;if(9===arguments.length)t=arguments[0],e=arguments[1],i=arguments[2],n=arguments[3],o=arguments[4],s=arguments[5],a=arguments[6],h=arguments[7],l=arguments[8];else{if(8!==arguments.length)throw new Error("Signature not supported");t=this,e=arguments[0],i=arguments[1],n=arguments[2],o=arguments[3],s=arguments[4],a=arguments[5],h=arguments[6],l=arguments[7]}r.Renderer2D._copyHelper(this,t,e,i,n,o,s,a,h,l),this._pixelsDirty=!0},r.Image.prototype.mask=function(t){void 0===t&&(t=this);var e=this.drawingContext.globalCompositeOperation,i=1;t instanceof r.Renderer&&(i=t._pInst._pixelDensity);var n=[t,0,0,i*t.width,i*t.height,0,0,this.width,this.height];this.drawingContext.globalCompositeOperation="destination-in",r.Image.prototype.copy.apply(this,n),this.drawingContext.globalCompositeOperation=e,this.setModified(!0)},r.Image.prototype.filter=function(t,e){n.apply(this.canvas,n[t.toLowerCase()],e),this.setModified(!0)},r.Image.prototype.blend=function(){r.prototype.blend.apply(this,arguments),this.setModified(!0)},r.Image.prototype.setModified=function(t){this._modified=t},r.Image.prototype.isModified=function(){return this._modified},r.Image.prototype.save=function(t,e){r.prototype.saveCanvas(this.canvas,t,e)},e.exports=r.Image},{"../core/main":24,"./filters":42}],46:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("./filters");t("../color/p5.Color"),r.prototype.pixels=[],r.prototype.blend=function(){r._validateParameters("blend",arguments),this._renderer?this._renderer.blend.apply(this._renderer,arguments):r.Renderer2D.prototype.blend.apply(this,arguments)},r.prototype.copy=function(){r._validateParameters("copy",arguments),r.Renderer2D.prototype.copy.apply(this._renderer,arguments)},r.prototype.filter=function(t,e){r._validateParameters("filter",arguments),void 0!==this.canvas?n.apply(this.canvas,n[t.toLowerCase()],e):n.apply(this.elt,n[t.toLowerCase()],e)},r.prototype.get=function(t,e,i,r){return this._renderer.get(t,e,i,r)},r.prototype.loadPixels=function(){r._validateParameters("loadPixels",arguments),this._renderer.loadPixels()},r.prototype.set=function(t,e,i){this._renderer.set(t,e,i)},r.prototype.updatePixels=function(t,e,i,n){r._validateParameters("updatePixels",arguments),0!==this.pixels.length&&this._renderer.updatePixels(t,e,i,n)},e.exports=r},{"../color/p5.Color":16,"../core/main":24,"./filters":42}],47:[function(t,e,i){"use strict";function r(t,e){var i={};if(void 0===(e=e||[]))for(var r=0;r<t.length;r++)e[r.toString()]=r;for(var n=0;n<e.length;n++){var o=e[n],s=t[n];i[o]=s}return i}function n(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")}function o(t,e){e&&!0!==e&&"true"!==e||(e=""),t||(t="untitled");var i="";return t&&t.indexOf(".")>-1&&(i=t.split(".").pop()),e&&i!==e&&(t=t+"."+(i=e)),[t,i]}var s=t("../core/main");t("whatwg-fetch"),t("es6-promise").polyfill();var a=t("fetch-jsonp");t("../core/error_helpers"),s.prototype.loadJSON=function(){s._validateParameters("loadJSON",arguments);for(var t,e,i,r=arguments[0],n={},o="json",a=1;a<arguments.length;a++){var h=arguments[a];"string"==typeof h?"jsonp"!==h&&"json"!==h||(o=h):"function"==typeof h?t?e=h:t=h:"object"==typeof h&&h.hasOwnProperty("jsonpCallback")&&(o="jsonp",i=h)}var l=this;return this.httpDo(r,"GET",i,o,function(e){for(var i in e)n[i]=e[i];void 0!==t&&t(e),l._decrementPreload()},function(t){if(s._friendlyFileLoadError(5,r),!e)throw t;e(t)}),n},s.prototype.loadStrings=function(){s._validateParameters("loadStrings",arguments);for(var t,e,i=[],r=1;r<arguments.length;r++){var n=arguments[r];"function"==typeof n&&(void 0===t?t=n:void 0===e&&(e=n))}var o=this;return s.prototype.httpDo.call(this,arguments[0],"GET","text",function(e){var r=e.replace(/\r\n/g,"\r").replace(/\n/g,"\r").split(/\r/);Array.prototype.push.apply(i,r),void 0!==t&&t(i),o._decrementPreload()},function(t){if(s._friendlyFileLoadError(3,arguments[0]),!e)throw t;e(t)}),i},s.prototype.loadTable=function(t){var e,i,n=[],o=!1,a=t.substring(t.lastIndexOf(".")+1,t.length),h=",",l=!1;"tsv"===a&&(h="\t");for(var u=1;u<arguments.length;u++)if("function"==typeof arguments[u])void 0===e?e=arguments[u]:void 0===i&&(i=arguments[u]);else if("string"==typeof arguments[u])if(n.push(arguments[u]),"header"===arguments[u]&&(o=!0),"csv"===arguments[u]){if(l)throw new Error("Cannot set multiple separator types.");h=",",l=!0}else if("tsv"===arguments[u]){if(l)throw new Error("Cannot set multiple separator types.");h="\t",l=!0}var c=new s.Table,p=this;return this.httpDo(t,"GET","table",function(t){for(var i,n={},a='"',l=[],d=0,f=null,m=function(){n.currentState=0,n.token=""},y=function(){f.push(n.token),m()},v=function(){n.currentState=4,l.push(f),f=null};;){if(null==(i=t[d++])){if(n.escaped)throw new Error("Unclosed quote in file.");if(f){y(),v();break}}if(null===f&&(n.escaped=!1,f=[],m()),0===n.currentState){if(i===a){n.escaped=!0,n.currentState=1;continue}n.currentState=1}if(1===n.currentState&&n.escaped)if(i===a)t[d]===a?(n.token+=a,d++):(n.escaped=!1,n.currentState=2);else{if("\r"===i)continue;n.token+=i}else"\r"===i?("\n"===t[d]&&d++,y(),v()):"\n"===i?(y(),v()):i===h?y():1===n.currentState&&(n.token+=i)}if(o)c.columns=l.shift();else for(u=0;u<l[0].length;u++)c.columns[u]="null";var g;for(u=0;u<l.length;u++)(1!==l[u].length||"undefined"!==l[u][0]&&""!==l[u][0])&&((g=new s.TableRow).arr=l[u],g.obj=r(l[u],c.columns),c.addRow(g));"function"==typeof e&&e(c),p._decrementPreload()},function(e){if(s._friendlyFileLoadError(2,t),!i)throw e;i(e)}),c},s.prototype.loadXML=function(){for(var t,e,i={},r=1;r<arguments.length;r++){var n=arguments[r];"function"==typeof n&&(void 0===t?t=n:void 0===e&&(e=n))}var o=this;return this.httpDo(arguments[0],"GET","xml",function(e){for(var r in e)i[r]=e[r];void 0!==t&&t(i),o._decrementPreload()},function(t){if(s._friendlyFileLoadError(1,arguments[0]),!e)throw t;e(t)}),i},s.prototype.loadBytes=function(t,e,i){var r={},n=this;return this.httpDo(t,"GET","arrayBuffer",function(t){r.bytes=new Uint8Array(t),"function"==typeof e&&e(r),n._decrementPreload()},function(e){if(s._friendlyFileLoadError(6,t),!i)throw e;i(e)}),r},s.prototype.httpGet=function(){s._validateParameters("httpGet",arguments);var t=Array.prototype.slice.call(arguments);return t.splice(1,0,"GET"),s.prototype.httpDo.apply(this,t)},s.prototype.httpPost=function(){s._validateParameters("httpPost",arguments);var t=Array.prototype.slice.call(arguments);return t.splice(1,0,"POST"),s.prototype.httpDo.apply(this,t)},s.prototype.httpDo=function(){for(var t,e,i,r,n,o={},h=0,l="text/plain",u=arguments.length-1;u>0&&"function"==typeof arguments[u];u--)h++;var c=arguments.length-h,p=arguments[0];if(2===c&&"string"==typeof p&&"object"==typeof arguments[1])r=new Request(p,arguments[1]),e=arguments[2],i=arguments[3];else{for(var d,f="GET",m=1;m<arguments.length;m++){var y=arguments[m];if("string"==typeof y)"GET"===y||"POST"===y||"PUT"===y||"DELETE"===y?f=y:"json"===y||"jsonp"===y||"binary"===y||"arrayBuffer"===y||"xml"===y||"text"===y||"table"===y?t=y:d=y;else if("number"==typeof y)d=y.toString();else if("object"==typeof y)if(y.hasOwnProperty("jsonpCallback"))for(var v in y)o[v]=y[v];else d=JSON.stringify(y),l="application/json";else"function"==typeof y&&(e?i=y:e=y)}r=new Request(p,{method:f,mode:"cors",body:d,headers:new Headers({"Content-Type":l})})}return t||(t=-1!==p.indexOf("json")?"json":-1!==p.indexOf("xml")?"xml":"text"),(n=(n="jsonp"===t?a(p,o):fetch(r)).then(function(e){if(!e.ok){var i=new Error(e.body);throw i.status=e.status,i.ok=!1,i}var r=e.headers.get("content-length");switch(r&&r>64e6&&s._friendlyFileLoadError(7,p),t){case"json":case"jsonp":return e.json();case"binary":return e.blob();case"arrayBuffer":return e.arrayBuffer();case"xml":return e.text().then(function(t){return function t(e){var i=new s.XML,r=e.childNodes;if(r&&r.length){for(var n=0;n<r.length;n++){var o=t(r[n]);i.addChild(o)}i.setName(e.nodeName),i._setCont(e.textContent),i._setAttributes(e);for(var a=0;a<i.children.length;a++)i.children[a].parent=i;return i}return i.setName(e.nodeName),i._setCont(e.textContent),i._setAttributes(e),i}((new DOMParser).parseFromString(t,"text/xml").documentElement)});default:return e.text()}})).then(e||function(){}),n.catch(i||console.error),n},window.URL=window.URL||window.webkitURL,s.prototype._pWriters=[],s.prototype.createWriter=function(t,e){var i;for(var r in s.prototype._pWriters)if(s.prototype._pWriters[r].name===t)return i=new s.PrintWriter(t+this.millis(),e),s.prototype._pWriters.push(i),i;return i=new s.PrintWriter(t,e),s.prototype._pWriters.push(i),i},s.PrintWriter=function(t,e){var i=this;this.name=t,this.content="",this.write=function(t){this.content+=t},this.print=function(t){this.content+=t+"\n"},this.clear=function(){this.content=""},this.close=function(){var r=[];for(var n in r.push(this.content),s.prototype.writeFile(r,t,e),s.prototype._pWriters)s.prototype._pWriters[n].name===this.name&&s.prototype._pWriters.splice(n,1);i.clear(),i={}}},s.prototype.save=function(t,e,i){var r=arguments,n=this._curElement.elt;if(0!==r.length)if(r[0]instanceof s.Renderer||r[0]instanceof s.Graphics)s.prototype.saveCanvas(r[0].elt,r[1],r[2]);else if(1===r.length&&"string"==typeof r[0])s.prototype.saveCanvas(n,r[0]);else switch(o(r[1],r[2])[1]){case"json":return void s.prototype.saveJSON(r[0],r[1],r[2]);case"txt":return void s.prototype.saveStrings(r[0],r[1],r[2]);default:r[0]instanceof Array?s.prototype.saveStrings(r[0],r[1],r[2]):r[0]instanceof s.Table?s.prototype.saveTable(r[0],r[1],r[2]):r[0]instanceof s.Image?s.prototype.saveCanvas(r[0].canvas,r[1]):r[0]instanceof s.SoundFile&&s.prototype.saveSound(r[0],r[1],r[2],r[3])}else s.prototype.saveCanvas(n)},s.prototype.saveJSON=function(t,e,i){var r;s._validateParameters("saveJSON",arguments),r=i?JSON.stringify(t):JSON.stringify(t,void 0,2),this.saveStrings(r.split("\n"),e,"json")},s.prototype.saveJSONObject=s.prototype.saveJSON,s.prototype.saveJSONArray=s.prototype.saveJSON,s.prototype.saveStrings=function(t,e,i){s._validateParameters("saveStrings",arguments);for(var r=i||"txt",n=this.createWriter(e,r),o=0;o<t.length;o++)t.length,n.print(t[o]);n.close(),n.clear()},s.prototype.saveTable=function(t,e,i){var r;s._validateParameters("saveTable",arguments),r=void 0===i?e.substring(e.lastIndexOf(".")+1,e.length):i;var o=this.createWriter(e,r),a=t.columns,h=",";if("tsv"===r&&(h="\t"),"html"!==r){if("0"!==a[0]){for(var l=0;l<a.length;l++)l<a.length-1?o.write(a[l]+h):o.write(a[l]);o.write("\n")}for(var u=0;u<t.rows.length;u++){var c;for(c=0;c<t.rows[u].arr.length;c++)c<t.rows[u].arr.length-1?o.write(t.rows[u].arr[c]+h):(t.rows.length,o.write(t.rows[u].arr[c]));o.write("\n")}}else{o.print("<html>"),o.print("<head>");var p='  <meta http-equiv="content-type" content';if(p+='="text/html;charset=utf-8" />',o.print(p),o.print("</head>"),o.print("<body>"),o.print("  <table>"),"0"!==a[0]){o.print("    <tr>");for(var d=0;d<a.length;d++){var f=n(a[d]);o.print("      <td>"+f),o.print("      </td>")}o.print("    </tr>")}for(var m=0;m<t.rows.length;m++){o.print("    <tr>");for(var y=0;y<t.columns.length;y++){var v=t.rows[m].getString(y),g=n(v);o.print("      <td>"+g),o.print("      </td>")}o.print("    </tr>")}o.print("  </table>"),o.print("</body>"),o.print("</html>")}o.close(),o.clear()},s.prototype.writeFile=function(t,e,i){var r="application/octet-stream";s.prototype._isSafari()&&(r="text/plain");var n=new Blob(t,{type:r});s.prototype.downloadFile(n,e,i)},s.prototype.downloadFile=function(e,i,r){var n=o(i,r),a=n[0];if(e instanceof Blob)t("file-saver").saveAs(e,a);else{var h=document.createElement("a");if(h.href=e,h.download=a,h.onclick=function(t){(function(t){document.body.removeChild(t.target)})(t),t.stopPropagation()},h.style.display="none",document.body.appendChild(h),s.prototype._isSafari()){var l="Hello, Safari user! To download this file...\n";l+="1. Go to File --\x3e Save As.\n",l+='2. Choose "Page Source" as the Format.\n',l+='3. Name it with this extension: ."'+n[1]+'"',alert(l)}h.click()}},s.prototype._checkFileExtension=o,s.prototype._isSafari=function(){return Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor")>0},e.exports=s},{"../core/error_helpers":20,"../core/main":24,"es6-promise":4,"fetch-jsonp":5,"file-saver":6,"whatwg-fetch":12}],48:[function(t,e,i){"use strict";var r=t("../core/main");r.Table=function(t){this.columns=[],this.rows=[]},r.Table.prototype.addRow=function(t){var e=t||new r.TableRow;if(void 0===e.arr||void 0===e.obj)throw new Error("invalid TableRow: "+e);return e.table=this,this.rows.push(e),e},r.Table.prototype.removeRow=function(t){this.rows[t].table=null;var e=this.rows.splice(t+1,this.rows.length);this.rows.pop(),this.rows=this.rows.concat(e)},r.Table.prototype.getRow=function(t){return this.rows[t]},r.Table.prototype.getRows=function(){return this.rows},r.Table.prototype.findRow=function(t,e){if("string"==typeof e){for(var i=0;i<this.rows.length;i++)if(this.rows[i].obj[e]===t)return this.rows[i]}else for(var r=0;r<this.rows.length;r++)if(this.rows[r].arr[e]===t)return this.rows[r];return null},r.Table.prototype.findRows=function(t,e){var i=[];if("string"==typeof e)for(var r=0;r<this.rows.length;r++)this.rows[r].obj[e]===t&&i.push(this.rows[r]);else for(var n=0;n<this.rows.length;n++)this.rows[n].arr[e]===t&&i.push(this.rows[n]);return i},r.Table.prototype.matchRow=function(t,e){if("number"==typeof e){for(var i=0;i<this.rows.length;i++)if(this.rows[i].arr[e].match(t))return this.rows[i]}else for(var r=0;r<this.rows.length;r++)if(this.rows[r].obj[e].match(t))return this.rows[r];return null},r.Table.prototype.matchRows=function(t,e){var i=[];if("number"==typeof e)for(var r=0;r<this.rows.length;r++)this.rows[r].arr[e].match(t)&&i.push(this.rows[r]);else for(var n=0;n<this.rows.length;n++)this.rows[n].obj[e].match(t)&&i.push(this.rows[n]);return i},r.Table.prototype.getColumn=function(t){var e=[];if("string"==typeof t)for(var i=0;i<this.rows.length;i++)e.push(this.rows[i].obj[t]);else for(var r=0;r<this.rows.length;r++)e.push(this.rows[r].arr[t]);return e},r.Table.prototype.clearRows=function(){delete this.rows,this.rows=[]},r.Table.prototype.addColumn=function(t){var e=t||null;this.columns.push(e)},r.Table.prototype.getColumnCount=function(){return this.columns.length},r.Table.prototype.getRowCount=function(){return this.rows.length},r.Table.prototype.removeTokens=function(t,e){for(var i=function(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")},r=[],n=0;n<t.length;n++)r.push(i(t.charAt(n)));var o=new RegExp(r.join("|"),"g");if(void 0===e)for(var s=0;s<this.columns.length;s++)for(var a=0;a<this.rows.length;a++){var h=this.rows[a].arr[s];h=h.replace(o,""),this.rows[a].arr[s]=h,this.rows[a].obj[this.columns[s]]=h}else if("string"==typeof e)for(var l=0;l<this.rows.length;l++){var u=this.rows[l].obj[e];u=u.replace(o,""),this.rows[l].obj[e]=u;var c=this.columns.indexOf(e);this.rows[l].arr[c]=u}else for(var p=0;p<this.rows.length;p++){var d=this.rows[p].arr[e];d=d.replace(o,""),this.rows[p].arr[e]=d,this.rows[p].obj[this.columns[e]]=d}},r.Table.prototype.trim=function(t){var e=new RegExp(" ","g");if(void 0===t)for(var i=0;i<this.columns.length;i++)for(var r=0;r<this.rows.length;r++){var n=this.rows[r].arr[i];n=n.replace(e,""),this.rows[r].arr[i]=n,this.rows[r].obj[this.columns[i]]=n}else if("string"==typeof t)for(var o=0;o<this.rows.length;o++){var s=this.rows[o].obj[t];s=s.replace(e,""),this.rows[o].obj[t]=s;var a=this.columns.indexOf(t);this.rows[o].arr[a]=s}else for(var h=0;h<this.rows.length;h++){var l=this.rows[h].arr[t];l=l.replace(e,""),this.rows[h].arr[t]=l,this.rows[h].obj[this.columns[t]]=l}},r.Table.prototype.removeColumn=function(t){var e,i;"string"==typeof t?(e=t,i=this.columns.indexOf(t)):(i=t,e=this.columns[t]);var r=this.columns.splice(i+1,this.columns.length);this.columns.pop(),this.columns=this.columns.concat(r);for(var n=0;n<this.rows.length;n++){var o=this.rows[n].arr,s=o.splice(i+1,o.length);o.pop(),this.rows[n].arr=o.concat(s),delete this.rows[n].obj[e]}},r.Table.prototype.set=function(t,e,i){this.rows[t].set(e,i)},r.Table.prototype.setNum=function(t,e,i){this.rows[t].setNum(e,i)},r.Table.prototype.setString=function(t,e,i){this.rows[t].setString(e,i)},r.Table.prototype.get=function(t,e){return this.rows[t].get(e)},r.Table.prototype.getNum=function(t,e){return this.rows[t].getNum(e)},r.Table.prototype.getString=function(t,e){return this.rows[t].getString(e)},r.Table.prototype.getObject=function(t){for(var e,i,r={},n=0;n<this.rows.length;n++)if(e=this.rows[n].obj,"string"==typeof t){if(!(this.columns.indexOf(t)>=0))throw new Error('This table has no column named "'+t+'"');i=e[t],r[i]=e}else r[n]=this.rows[n].obj;return r},r.Table.prototype.getArray=function(){for(var t=[],e=0;e<this.rows.length;e++)t.push(this.rows[e].arr);return t},e.exports=r},{"../core/main":24}],49:[function(t,e,i){"use strict";var r=t("../core/main");r.TableRow=function(t,e){var i=[],r={};t&&(e=e||",",i=t.split(e));for(var n=0;n<i.length;n++){var o=n,s=i[n];r[o]=s}this.arr=i,this.obj=r,this.table=null},r.TableRow.prototype.set=function(t,e){if("string"==typeof t){var i=this.table.columns.indexOf(t);if(!(i>=0))throw new Error('This table has no column named "'+t+'"');this.obj[t]=e,this.arr[i]=e}else{if(!(t<this.table.columns.length))throw new Error("Column #"+t+" is out of the range of this table");this.arr[t]=e;var r=this.table.columns[t];this.obj[r]=e}},r.TableRow.prototype.setNum=function(t,e){var i=parseFloat(e);this.set(t,i)},r.TableRow.prototype.setString=function(t,e){var i=e.toString();this.set(t,i)},r.TableRow.prototype.get=function(t){return"string"==typeof t?this.obj[t]:this.arr[t]},r.TableRow.prototype.getNum=function(t){var e;if("NaN"===(e="string"==typeof t?parseFloat(this.obj[t]):parseFloat(this.arr[t])).toString())throw"Error: "+this.obj[t]+" is NaN (Not a Number)";return e},r.TableRow.prototype.getString=function(t){return"string"==typeof t?this.obj[t].toString():this.arr[t].toString()},e.exports=r},{"../core/main":24}],50:[function(t,e,i){"use strict";var r=t("../core/main");r.XML=function(){this.name=null,this.attributes={},this.children=[],this.parent=null,this.content=null},r.XML.prototype.getParent=function(){return this.parent},r.XML.prototype.getName=function(){return this.name},r.XML.prototype.setName=function(t){this.name=t},r.XML.prototype.hasChildren=function(){return this.children.length>0},r.XML.prototype.listChildren=function(){return this.children.map(function(t){return t.name})},r.XML.prototype.getChildren=function(t){return t?this.children.filter(function(e){return e.name===t}):this.children},r.XML.prototype.getChild=function(t){if("string"!=typeof t)return this.children[t];for(var e=0;e<this.children.length;e++){var i=this.children[e];if(i.name===t)return i}},r.XML.prototype.addChild=function(t){t instanceof r.XML&&this.children.push(t)},r.XML.prototype.removeChild=function(t){var e=-1;if("string"==typeof t){for(var i=0;i<this.children.length;i++)if(this.children[i].name===t){e=i;break}}else e=t;-1!==e&&this.children.splice(e,1)},r.XML.prototype.getAttributeCount=function(){return Object.keys(this.attributes).length},r.XML.prototype.listAttributes=function(){return Object.keys(this.attributes)},r.XML.prototype.hasAttribute=function(t){return!!this.attributes[t]},r.XML.prototype.getNum=function(t,e){return Number(this.attributes[t])||e||0},r.XML.prototype.getString=function(t,e){return String(this.attributes[t])||e||null},r.XML.prototype.setAttribute=function(t,e){this.attributes[t]&&(this.attributes[t]=e)},r.XML.prototype.getContent=function(t){return this.content||t||null},r.XML.prototype.setContent=function(t){this.children.length||(this.content=t)},r.XML.prototype._setCont=function(t){var e;e=(e=t).replace(/\s\s+/g,","),this.content=e},r.XML.prototype._setAttributes=function(t){var e={},i=t.attributes;if(i)for(var r=0;r<i.length;r++){var n=i[r];e[n.nodeName]=n.nodeValue}this.attributes=e},e.exports=r},{"../core/main":24}],51:[function(t,e,i){"use strict";function r(t,e,i){if("function"==typeof Math.hypot)return Math.hypot.apply(null,arguments);for(var r=arguments.length,n=[],o=0,s=0;s<r;s++){var a=arguments[s];if((a=+a)==1/0||a===-1/0)return 1/0;(a=Math.abs(a))>o&&(o=a),n[s]=a}0===o&&(o=1);for(var h=0,l=0,u=0;u<r;u++){var c=n[u]/o,p=c*c-l,d=h+p;l=d-h-p,h=d}return Math.sqrt(h)*o}var n=t("../core/main");n.prototype.abs=Math.abs,n.prototype.ceil=Math.ceil,n.prototype.constrain=function(t,e,i){return n._validateParameters("constrain",arguments),Math.max(Math.min(t,i),e)},n.prototype.dist=function(){return n._validateParameters("dist",arguments),4===arguments.length?r(arguments[2]-arguments[0],arguments[3]-arguments[1]):6===arguments.length?r(arguments[3]-arguments[0],arguments[4]-arguments[1],arguments[5]-arguments[2]):void 0},n.prototype.exp=Math.exp,n.prototype.floor=Math.floor,n.prototype.lerp=function(t,e,i){return n._validateParameters("lerp",arguments),i*(e-t)+t},n.prototype.log=Math.log,n.prototype.mag=function(t,e){return n._validateParameters("mag",arguments),r(t,e)},n.prototype.map=function(t,e,i,r,o,s){n._validateParameters("map",arguments);var a=(t-e)/(i-e)*(o-r)+r;return s?r<o?this.constrain(a,r,o):this.constrain(a,o,r):a},n.prototype.max=function(){return n._validateParameters("max",arguments),arguments[0]instanceof Array?Math.max.apply(null,arguments[0]):Math.max.apply(null,arguments)},n.prototype.min=function(){return n._validateParameters("min",arguments),arguments[0]instanceof Array?Math.min.apply(null,arguments[0]):Math.min.apply(null,arguments)},n.prototype.norm=function(t,e,i){return n._validateParameters("norm",arguments),this.map(t,e,i,0,1)},n.prototype.pow=Math.pow,n.prototype.round=Math.round,n.prototype.sq=function(t){return t*t},n.prototype.sqrt=Math.sqrt,e.exports=n},{"../core/main":24}],52:[function(t,e,i){"use strict";var r=t("../core/main");r.prototype.createVector=function(t,e,i){return this instanceof r?new r.Vector(this,arguments):new r.Vector(t,e,i)},e.exports=r},{"../core/main":24}],53:[function(t,e,i){"use strict";var r,n=t("../core/main"),o=4095,s=4,a=.5,h=function(t){return.5*(1-Math.cos(t*Math.PI))};n.prototype.noise=function(t,e,i){if(e=e||0,i=i||0,null==r){r=new Array(o+1);for(var n=0;n<o+1;n++)r[n]=Math.random()}t<0&&(t=-t),e<0&&(e=-e),i<0&&(i=-i);for(var l,u,c,p,d,f=Math.floor(t),m=Math.floor(e),y=Math.floor(i),v=t-f,g=e-m,_=i-y,b=0,S=.5,x=0;x<s;x++){var w=f+(m<<4)+(y<<8);l=h(v),u=h(g),c=r[w&o],c+=l*(r[w+1&o]-c),p=r[w+16&o],p+=l*(r[w+16+1&o]-p),c+=u*(p-c),p=r[(w+=256)&o],p+=l*(r[w+1&o]-p),d=r[w+16&o],d+=l*(r[w+16+1&o]-d),p+=u*(d-p),c+=h(_)*(p-c),b+=c*S,S*=a,f<<=1,m<<=1,g*=2,y<<=1,_*=2,(v*=2)>=1&&(f++,v--),g>=1&&(m++,g--),_>=1&&(y++,_--)}return b},n.prototype.noiseDetail=function(t,e){t>0&&(s=t),e>0&&(a=e)},n.prototype.noiseSeed=function(t){var e=function(){var t,e,i=4294967296;return{setSeed:function(r){e=t=(null==r?Math.random()*i:r)>>>0},getSeed:function(){return t},rand:function(){return(e=(1664525*e+1013904223)%i)/i}}}();e.setSeed(t),r=new Array(o+1);for(var i=0;i<o+1;i++)r[i]=e.rand()},e.exports=n},{"../core/main":24}],54:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("../core/constants");r.Vector=function(){var t,e,i;arguments[0]instanceof r?(this.p5=arguments[0],t=arguments[1][0]||0,e=arguments[1][1]||0,i=arguments[1][2]||0):(t=arguments[0]||0,e=arguments[1]||0,i=arguments[2]||0),this.x=t,this.y=e,this.z=i},r.Vector.prototype.toString=function(){return"p5.Vector Object : ["+this.x+", "+this.y+", "+this.z+"]"},r.Vector.prototype.set=function(t,e,i){return t instanceof r.Vector?(this.x=t.x||0,this.y=t.y||0,this.z=t.z||0,this):t instanceof Array?(this.x=t[0]||0,this.y=t[1]||0,this.z=t[2]||0,this):(this.x=t||0,this.y=e||0,this.z=i||0,this)},r.Vector.prototype.copy=function(){return this.p5?new r.Vector(this.p5,[this.x,this.y,this.z]):new r.Vector(this.x,this.y,this.z)},r.Vector.prototype.add=function(t,e,i){return t instanceof r.Vector?(this.x+=t.x||0,this.y+=t.y||0,this.z+=t.z||0,this):t instanceof Array?(this.x+=t[0]||0,this.y+=t[1]||0,this.z+=t[2]||0,this):(this.x+=t||0,this.y+=e||0,this.z+=i||0,this)},r.Vector.prototype.sub=function(t,e,i){return t instanceof r.Vector?(this.x-=t.x||0,this.y-=t.y||0,this.z-=t.z||0,this):t instanceof Array?(this.x-=t[0]||0,this.y-=t[1]||0,this.z-=t[2]||0,this):(this.x-=t||0,this.y-=e||0,this.z-=i||0,this)},r.Vector.prototype.mult=function(t){return"number"==typeof t&&isFinite(t)?(this.x*=t,this.y*=t,this.z*=t,this):(console.warn("p5.Vector.prototype.mult:","n is undefined or not a finite number"),this)},r.Vector.prototype.div=function(t){return"number"==typeof t&&isFinite(t)?0===t?(console.warn("p5.Vector.prototype.div:","divide by 0"),this):(this.x/=t,this.y/=t,this.z/=t,this):(console.warn("p5.Vector.prototype.div:","n is undefined or not a finite number"),this)},r.Vector.prototype.mag=function(){return Math.sqrt(this.magSq())},r.Vector.prototype.magSq=function(){var t=this.x,e=this.y,i=this.z;return t*t+e*e+i*i},r.Vector.prototype.dot=function(t,e,i){return t instanceof r.Vector?this.dot(t.x,t.y,t.z):this.x*(t||0)+this.y*(e||0)+this.z*(i||0)},r.Vector.prototype.cross=function(t){var e=this.y*t.z-this.z*t.y,i=this.z*t.x-this.x*t.z,n=this.x*t.y-this.y*t.x;return this.p5?new r.Vector(this.p5,[e,i,n]):new r.Vector(e,i,n)},r.Vector.prototype.dist=function(t){return t.copy().sub(this).mag()},r.Vector.prototype.normalize=function(){var t=this.mag();return 0!==t&&this.mult(1/t),this},r.Vector.prototype.limit=function(t){var e=this.magSq();return e>t*t&&this.div(Math.sqrt(e)).mult(t),this},r.Vector.prototype.setMag=function(t){return this.normalize().mult(t)},r.Vector.prototype.heading=function(){var t=Math.atan2(this.y,this.x);return this.p5?this.p5._fromRadians(t):t},r.Vector.prototype.rotate=function(t){var e=this.heading()+t;this.p5&&(e=this.p5._toRadians(e));var i=this.mag();return this.x=Math.cos(e)*i,this.y=Math.sin(e)*i,this},r.Vector.prototype.angleBetween=function(t){var e=this.dot(t)/(this.mag()*t.mag()),i=Math.acos(Math.min(1,Math.max(-1,e)));return this.p5?this.p5._fromRadians(i):i},r.Vector.prototype.lerp=function(t,e,i,n){return t instanceof r.Vector?this.lerp(t.x,t.y,t.z,e):(this.x+=(t-this.x)*n||0,this.y+=(e-this.y)*n||0,this.z+=(i-this.z)*n||0,this)},r.Vector.prototype.array=function(){return[this.x||0,this.y||0,this.z||0]},r.Vector.prototype.equals=function(t,e,i){var n,o,s;return t instanceof r.Vector?(n=t.x||0,o=t.y||0,s=t.z||0):t instanceof Array?(n=t[0]||0,o=t[1]||0,s=t[2]||0):(n=t||0,o=e||0,s=i||0),this.x===n&&this.y===o&&this.z===s},r.Vector.fromAngle=function(t,e){return void 0===e&&(e=1),new r.Vector(e*Math.cos(t),e*Math.sin(t),0)},r.Vector.fromAngles=function(t,e,i){void 0===i&&(i=1);var n=Math.cos(e),o=Math.sin(e),s=Math.cos(t),a=Math.sin(t);return new r.Vector(i*a*o,-i*s,i*a*n)},r.Vector.random2D=function(){return this.fromAngle(Math.random()*n.TWO_PI)},r.Vector.random3D=function(){var t=Math.random()*n.TWO_PI,e=2*Math.random()-1,i=Math.sqrt(1-e*e),o=i*Math.cos(t),s=i*Math.sin(t);return new r.Vector(o,s,e)},r.Vector.add=function(t,e,i){return i?i.set(t):i=t.copy(),i.add(e),i},r.Vector.sub=function(t,e,i){return i?i.set(t):i=t.copy(),i.sub(e),i},r.Vector.mult=function(t,e,i){return i?i.set(t):i=t.copy(),i.mult(e),i},r.Vector.div=function(t,e,i){return i?i.set(t):i=t.copy(),i.div(e),i},r.Vector.dot=function(t,e){return t.dot(e)},r.Vector.cross=function(t,e){return t.cross(e)},r.Vector.dist=function(t,e){return t.dist(e)},r.Vector.lerp=function(t,e,i,r){return r?r.set(t):r=t.copy(),r.lerp(e,i),r},r.Vector.mag=function(t){var e=t.x,i=t.y,r=t.z,n=e*e+i*i+r*r;return Math.sqrt(n)},e.exports=r.Vector},{"../core/constants":18,"../core/main":24}],55:[function(t,e,i){"use strict";var r=t("../core/main"),n=!1,o=!1,s=0,a=function(){var t,e,i=4294967296;return{setSeed:function(r){e=t=(null==r?Math.random()*i:r)>>>0},getSeed:function(){return t},rand:function(){return(e=(1664525*e+1013904223)%i)/i}}}();r.prototype.randomSeed=function(t){a.setSeed(t),n=!0,o=!1},r.prototype.random=function(t,e){var i;if(i=n?a.rand():Math.random(),void 0===t)return i;if(void 0===e)return t instanceof Array?t[Math.floor(i*t.length)]:i*t;if(t>e){var r=t;t=e,e=r}return i*(e-t)+t},r.prototype.randomGaussian=function(t,e){var i,r,n,a;if(o)i=s,o=!1;else{do{r=this.random(2)-1,n=this.random(2)-1,a=r*r+n*n}while(a>=1);a=Math.sqrt(-2*Math.log(a)/a),i=r*a,s=n*a,o=!0}var h=t||0;return i*(e||1)+h},e.exports=r},{"../core/main":24}],56:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("../core/constants");r.prototype._angleMode=n.RADIANS,r.prototype.acos=function(t){return this._fromRadians(Math.acos(t))},r.prototype.asin=function(t){return this._fromRadians(Math.asin(t))},r.prototype.atan=function(t){return this._fromRadians(Math.atan(t))},r.prototype.atan2=function(t,e){return this._fromRadians(Math.atan2(t,e))},r.prototype.cos=function(t){return Math.cos(this._toRadians(t))},r.prototype.sin=function(t){return Math.sin(this._toRadians(t))},r.prototype.tan=function(t){return Math.tan(this._toRadians(t))},r.prototype.degrees=function(t){return t*n.RAD_TO_DEG},r.prototype.radians=function(t){return t*n.DEG_TO_RAD},r.prototype.angleMode=function(t){t!==n.DEGREES&&t!==n.RADIANS||(this._angleMode=t)},r.prototype._toRadians=function(t){return this._angleMode===n.DEGREES?t*n.DEG_TO_RAD:t},r.prototype._toDegrees=function(t){return this._angleMode===n.RADIANS?t*n.RAD_TO_DEG:t},r.prototype._fromRadians=function(t){return this._angleMode===n.DEGREES?t*n.RAD_TO_DEG:t},e.exports=r},{"../core/constants":18,"../core/main":24}],57:[function(t,e,i){"use strict";var r=t("../core/main");r.prototype.textAlign=function(t,e){return r._validateParameters("textAlign",arguments),this._renderer.textAlign.apply(this._renderer,arguments)},r.prototype.textLeading=function(t){return r._validateParameters("textLeading",arguments),this._renderer.textLeading.apply(this._renderer,arguments)},r.prototype.textSize=function(t){return r._validateParameters("textSize",arguments),this._renderer.textSize.apply(this._renderer,arguments)},r.prototype.textStyle=function(t){return r._validateParameters("textStyle",arguments),this._renderer.textStyle.apply(this._renderer,arguments)},r.prototype.textWidth=function(t){return r._validateParameters("textWidth",arguments),0===t.length?0:this._renderer.textWidth.apply(this._renderer,arguments)},r.prototype.textAscent=function(){return r._validateParameters("textAscent",arguments),this._renderer.textAscent()},r.prototype.textDescent=function(){return r._validateParameters("textDescent",arguments),this._renderer.textDescent()},r.prototype._updateTextMetrics=function(){return this._renderer._updateTextMetrics()},e.exports=r},{"../core/main":24}],58:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("../core/constants"),o=t("opentype.js");t("../core/error_helpers"),r.prototype.loadFont=function(t,e,i){r._validateParameters("loadFont",arguments);var n=new r.Font(this),s=this;return o.load(t,function(o,a){if(o)return void 0!==i?i(o):(r._friendlyFileLoadError(4,t),void console.error(o,t));n.font=a,void 0!==e&&e(n),s._decrementPreload();var h,l,u=t.split("\\").pop().split("/").pop(),c=u.lastIndexOf("."),p=c<1?null:u.substr(c+1);["ttf","otf","woff","woff2"].indexOf(p)>-1&&(h=u.substr(0,c),(l=document.createElement("style")).appendChild(document.createTextNode("\n@font-face {\nfont-family: "+h+";\nsrc: url("+t+");\n}\n")),document.head.appendChild(l))}),n},r.prototype.text=function(t,e,i,n,o){return r._validateParameters("text",arguments),this._renderer._doFill||this._renderer._doStroke?this._renderer.text.apply(this._renderer,arguments):this},r.prototype.textFont=function(t,e){if(r._validateParameters("textFont",arguments),arguments.length){if(!t)throw new Error("null font passed to textFont");return this._renderer._setProperty("_textFont",t),e&&(this._renderer._setProperty("_textSize",e),this._renderer._setProperty("_textLeading",e*n._DEFAULT_LEADMULT)),this._renderer._applyTextProperties()}return this._renderer._textFont},e.exports=r},{"../core/constants":18,"../core/error_helpers":20,"../core/main":24,"opentype.js":10}],59:[function(t,e,i){"use strict";function r(t,e){for(var i=function(t,e){if("object"!=typeof t)t=e;else for(var i in e)void 0===t[i]&&(t[i]=e[i]);return t}(e,{sampleFactor:.1,simplifyThreshold:0}),r=c(t,0,1),o=r/(r*i.sampleFactor),s=[],a=0;a<r;a+=o)s.push(c(t,a));return i.simplifyThreshold&&n(s,i.simplifyThreshold),s}function n(t,e){e=void 0===e?0:e;for(var i=0,r=t.length-1;t.length>3&&r>=0;--r)h(a(t,r-1),a(t,r),a(t,r+1),e)&&(t.splice(r%t.length,1),i++);return i}function o(t){for(var e,i=[],r=0;r<t.length;r++)"M"===t[r].type&&(e&&i.push(e),e=[]),e.push(s(t[r]));return i.push(e),i}function s(t){var e=[t.type];return"M"===t.type||"L"===t.type?e.push(t.x,t.y):"C"===t.type?e.push(t.x1,t.y1,t.x2,t.y2,t.x,t.y):"Q"===t.type&&e.push(t.x1,t.y1,t.x,t.y),e}function a(t,e){var i=t.length;return t[e<0?e%i+i:e%i]}function h(t,e,i,r){if(!r)return 0===function(t,e,i){return(e[0]-t[0])*(i[1]-t[1])-(i[0]-t[0])*(e[1]-t[1])}(t,e,i);void 0===h.tmpPoint1&&(h.tmpPoint1=[],h.tmpPoint2=[]);var n=h.tmpPoint1,o=h.tmpPoint2;n.x=e.x-t.x,n.y=e.y-t.y,o.x=i.x-e.x,o.y=i.y-e.y;var s=n.x*o.x+n.y*o.y,a=Math.sqrt(n.x*n.x+n.y*n.y),l=Math.sqrt(o.x*o.x+o.y*o.y);return Math.acos(s/(a*l))<r}function l(t,e,i,r,n,o,s,a,h){var l=1-h,u=Math.pow(l,3),c=Math.pow(l,2),p=h*h,d=p*h,f=u*t+3*c*h*i+3*l*h*h*n+d*s,m=u*e+3*c*h*r+3*l*h*h*o+d*a,y=t+2*h*(i-t)+p*(n-2*i+t),v=e+2*h*(r-e)+p*(o-2*r+e),g=i+2*h*(n-i)+p*(s-2*n+i),_=r+2*h*(o-r)+p*(a-2*o+r),b=l*t+h*i,S=l*e+h*r,x=l*n+h*s,w=l*o+h*a,T=90-180*Math.atan2(y-g,v-_)/Math.PI;return(y>g||v<_)&&(T+=180),{x:f,y:m,m:{x:y,y:v},n:{x:g,y:_},start:{x:b,y:S},end:{x:x,y:w},alpha:T}}function u(t,e,i,r,n,o,s,a,h){return null==h?v(t,e,i,r,n,o,s,a):l(t,e,i,r,n,o,s,a,function(t,e,i,r,n,o,s,a,h){if(!(h<0||v(t,e,i,r,n,o,s,a)<h)){var l,u=.5,c=1-u;for(l=v(t,e,i,r,n,o,s,a,c);Math.abs(l-h)>.01;)u/=2,l=v(t,e,i,r,n,o,s,a,c+=(l<h?1:-1)*u);return c}}(t,e,i,r,n,o,s,a,h))}function c(t,e,i){for(var r,n,o,s,a,h=0,c=0,p=(t=d(t)).length;c<p;c++){if("M"===(o=t[c])[0])r=+o[1],n=+o[2];else{if(s=u(r,n,o[1],o[2],o[3],o[4],o[5],o[6]),h+s>e&&!i)return{x:(a=u(r,n,o[1],o[2],o[3],o[4],o[5],o[6],e-h)).x,y:a.y,alpha:a.alpha};h+=s,r=+o[5],n=+o[6]}o.shift()}return(a=i?h:l(r,n,o[0],o[1],o[2],o[3],o[4],o[5],1)).alpha&&(a={x:a.x,y:a.y,alpha:a.alpha}),a}function p(t){var e=[],i=0,r=0,n=0,o=0,s=0;if(!t)return e;"M"===t[0][0]&&(i=+t[0][1],r=+t[0][2],n=i,o=r,s++,e[0]=["M",i,r]);for(var a,h,l,u=3===t.length&&"M"===t[0][0]&&"R"===t[1][0].toUpperCase()&&"Z"===t[2][0].toUpperCase(),c=s,p=t.length;c<p;c++){if(e.push(h=[]),(l=t[c])[0]!==String.prototype.toUpperCase.call(l[0]))switch(h[0]=String.prototype.toUpperCase.call(l[0]),h[0]){case"A":h[1]=l[1],h[2]=l[2],h[3]=l[3],h[4]=l[4],h[5]=l[5],h[6]=+(l[6]+i),h[7]=+(l[7]+r);break;case"V":h[1]=+l[1]+r;break;case"H":h[1]=+l[1]+i;break;case"R":for(var d=2,m=(a=[i,r].concat(l.slice(1))).length;d<m;d++)a[d]=+a[d]+i,a[++d]=+a[d]+r;e.pop(),e=e.concat(f(a,u));break;case"M":n=+l[1]+i,o=+l[2]+r;break;default:for(d=1,m=l.length;d<m;d++)h[d]=+l[d]+(d%2?i:r)}else if("R"===l[0])a=[i,r].concat(l.slice(1)),e.pop(),e=e.concat(f(a,u)),h=["R"].concat(l.slice(-2));else for(var y=0,v=l.length;y<v;y++)h[y]=l[y];switch(h[0]){case"Z":i=n,r=o;break;case"H":i=h[1];break;case"V":r=h[1];break;case"M":n=h[h.length-2],o=h[h.length-1];break;default:i=h[h.length-2],r=h[h.length-1]}}return e}function d(t,e){var i,r=p(t),n=e&&p(e),o={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},s={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},a=[],h=[],l=function(t,e,i){var r,n;if(!t)return["C",e.x,e.y,e.x,e.y,e.x,e.y];switch(t[0]in{T:1,Q:1}||(e.qx=e.qy=null),t[0]){case"M":e.X=t[1],e.Y=t[2];break;case"A":t=["C"].concat(function t(e,i,r,n,o,s,a,h,l,u){var c,p,d,f,m,y=Math.PI,v=120*y/180,g=y/180*(+o||0),_=[],b=function(t,e,i){return{x:t*Math.cos(i)-e*Math.sin(i),y:t*Math.sin(i)+e*Math.cos(i)}};if(u)c=u[0],p=u[1],d=u[2],f=u[3];else{m=b(e,i,-g),e=m.x,i=m.y,m=b(h,l,-g),h=m.x,l=m.y;var S=(e-h)/2,x=(i-l)/2,w=S*S/(r*r)+x*x/(n*n);w>1&&(w=Math.sqrt(w),r*=w,n*=w);var T=r*r,A=n*n,M=(s===a?-1:1)*Math.sqrt(Math.abs((T*A-T*x*x-A*S*S)/(T*x*x+A*S*S)));d=M*r*x/n+(e+h)/2,f=M*-n*S/r+(i+l)/2,c=Math.asin(((i-f)/n).toFixed(9)),p=Math.asin(((l-f)/n).toFixed(9)),c=e<d?y-c:c,p=h<d?y-p:p,c<0&&(c=2*y+c),p<0&&(p=2*y+p),a&&c>p&&(c-=2*y),!a&&p>c&&(p-=2*y)}var P=p-c;if(Math.abs(P)>v){var E=p,k=h,C=l;p=c+v*(a&&p>c?1:-1),h=d+r*Math.cos(p),l=f+n*Math.sin(p),_=t(h,l,r,n,o,0,a,k,C,[p,E,d,f])}P=p-c;var R=Math.cos(c),O=Math.sin(c),L=Math.cos(p),F=Math.sin(p),I=Math.tan(P/4),D=4/3*r*I,U=4/3*n*I,B=[e,i],N=[e+D*O,i-U*R],G=[h+D*F,l-U*L],q=[h,l];if(N[0]=2*B[0]-N[0],N[1]=2*B[1]-N[1],u)return[N,G,q].concat(_);for(var V=[],j=0,z=(_=[N,G,q].concat(_).join().split(",")).length;j<z;j++)V[j]=j%2?b(_[j-1],_[j],g).y:b(_[j],_[j+1],g).x;return V}.apply(0,[e.x,e.y].concat(t.slice(1))));break;case"S":"C"===i||"S"===i?(r=2*e.x-e.bx,n=2*e.y-e.by):(r=e.x,n=e.y),t=["C",r,n].concat(t.slice(1));break;case"T":"Q"===i||"T"===i?(e.qx=2*e.x-e.qx,e.qy=2*e.y-e.qy):(e.qx=e.x,e.qy=e.y),t=["C"].concat(y(e.x,e.y,e.qx,e.qy,t[1],t[2]));break;case"Q":e.qx=t[1],e.qy=t[2],t=["C"].concat(y(e.x,e.y,t[1],t[2],t[3],t[4]));break;case"L":t=["C"].concat(m(e.x,e.y,t[1],t[2]));break;case"H":t=["C"].concat(m(e.x,e.y,t[1],e.y));break;case"V":t=["C"].concat(m(e.x,e.y,e.x,t[1]));break;case"Z":t=["C"].concat(m(e.x,e.y,e.X,e.Y))}return t},u=function(t,e){if(t[e].length>7){t[e].shift();for(var o=t[e];o.length;)a[e]="A",n&&(h[e]="A"),t.splice(e++,0,["C"].concat(o.splice(0,6)));t.splice(e,1),i=Math.max(r.length,n&&n.length||0)}},c=function(t,e,o,s,a){t&&e&&"M"===t[a][0]&&"M"!==e[a][0]&&(e.splice(a,0,["M",s.x,s.y]),o.bx=0,o.by=0,o.x=t[a][1],o.y=t[a][2],i=Math.max(r.length,n&&n.length||0))},d="",f="";i=Math.max(r.length,n&&n.length||0);for(var v=0;v<i;v++){r[v]&&(d=r[v][0]),"C"!==d&&(a[v]=d,v&&(f=a[v-1])),r[v]=l(r[v],o,f),"A"!==a[v]&&"C"===d&&(a[v]="C"),u(r,v),n&&(n[v]&&(d=n[v][0]),"C"!==d&&(h[v]=d,v&&(f=h[v-1])),n[v]=l(n[v],s,f),"A"!==h[v]&&"C"===d&&(h[v]="C"),u(n,v)),c(r,n,o,s,v),c(n,r,s,o,v);var g=r[v],_=n&&n[v],b=g.length,S=n&&_.length;o.x=g[b-2],o.y=g[b-1],o.bx=parseFloat(g[b-4])||o.x,o.by=parseFloat(g[b-3])||o.y,s.bx=n&&(parseFloat(_[S-4])||s.x),s.by=n&&(parseFloat(_[S-3])||s.y),s.x=n&&_[S-2],s.y=n&&_[S-1]}return n?[r,n]:r}function f(t,e){for(var i=[],r=0,n=t.length;n-2*!e>r;r+=2){var o=[{x:+t[r-2],y:+t[r-1]},{x:+t[r],y:+t[r+1]},{x:+t[r+2],y:+t[r+3]},{x:+t[r+4],y:+t[r+5]}];e?r?n-4===r?o[3]={x:+t[0],y:+t[1]}:n-2===r&&(o[2]={x:+t[0],y:+t[1]},o[3]={x:+t[2],y:+t[3]}):o[0]={x:+t[n-2],y:+t[n-1]}:n-4===r?o[3]=o[2]:r||(o[0]={x:+t[r],y:+t[r+1]}),i.push(["C",(-o[0].x+6*o[1].x+o[2].x)/6,(-o[0].y+6*o[1].y+o[2].y)/6,(o[1].x+6*o[2].x-o[3].x)/6,(o[1].y+6*o[2].y-o[3].y)/6,o[2].x,o[2].y])}return i}function m(t,e,i,r){return[t,e,i,r,i,r]}function y(t,e,i,r,n,o){var s=1/3,a=2/3;return[s*t+a*i,s*e+a*r,s*n+a*i,s*o+a*r,n,o]}function v(t,e,i,r,n,o,s,a,h){null==h&&(h=1);for(var l=(h=h>1?1:h<0?0:h)/2,u=[-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],c=0,p=[.2491,.2491,.2335,.2335,.2032,.2032,.1601,.1601,.1069,.1069,.0472,.0472],d=0;d<12;d++){var f=l*u[d]+l,m=g(f,t,i,n,s),y=g(f,e,r,o,a),v=m*m+y*y;c+=p[d]*Math.sqrt(v)}return l*c}function g(t,e,i,r,n){return t*(t*(-3*e+9*i-9*r+3*n)+6*e-12*i+6*r)-3*e+3*i}function _(){for(var t="",e=arguments.length-1;e>=0;--e){var i=arguments[e];t+=i===Object(i)?JSON.stringify(i):i}return t}var b=t("../core/main"),S=t("../core/constants");b.Font=function(t){this.parent=t,this.cache={},this.font=void 0},b.Font.prototype.list=function(){throw new Error("not yet implemented")},b.Font.prototype.textBounds=function(t,e,i,r,n){e=void 0!==e?e:0,i=void 0!==i?i:0,r=r||this.parent._renderer._textSize;var o=n&&n.renderer&&n.renderer._pInst||this.parent,s=o._renderer,a=s._textAlign||S.LEFT,h=s._textBaseline||S.BASELINE,l=_("textBounds",t,e,i,r,a,h),u=this.cache[l];if(!u){var c,p,d,f,m,y=[],v=[],g=this._scale(r);this.font.forEachGlyph(t,e,i,r,n,function(t,e,i,r){var n=t.getMetrics();y.push(e+n.xMin*g),y.push(e+n.xMax*g),v.push(i+-n.yMin*g),v.push(i+-n.yMax*g)}),c=Math.min.apply(null,y),p=Math.min.apply(null,v),d=Math.max.apply(null,y),f=Math.max.apply(null,v),u={x:c,y:p,h:f-p,w:d-c,advance:c-e},m=this._handleAlignment(s,t,u.x,u.y,u.w+u.advance),u.x=m.x,u.y=m.y,this.cache[_("textBounds",t,e,i,r,a,h)]=u}return u},b.Font.prototype.textToPoints=function(t,e,i,n,s){function a(e){return u[e].name&&"space"===u[e].name||t.length===u.length&&" "===t[e]||u[e].index&&3===u[e].index}var h=0,l=[],u=this._getGlyphs(t);n=n||this.parent._renderer._textSize;for(var c=0;c<u.length;c++){if(!a(c))for(var p=u[c].getPath(e,i,n),d=o(p.commands),f=0;f<d.length;f++)for(var m=r(d[f],s),y=0;y<m.length;y++)m[y].x+=h,l.push(m[y]);h+=u[c].advanceWidth*this._scale(n)}return l},b.Font.prototype._getGlyphs=function(t){return this.font.stringToGlyphs(t)},b.Font.prototype._getPath=function(t,e,i,r){var n=r&&r.renderer&&r.renderer._pInst||this.parent,o=n._renderer,s=this._handleAlignment(o,t,e,i);return this.font.getPath(t,s.x,s.y,o._textSize,r)},b.Font.prototype._getPathData=function(t,e,i,r){var n=3;return"string"==typeof t&&arguments.length>2?t=this._getPath(t,e,i,r):"object"==typeof e&&(r=e),r&&"number"==typeof r.decimals&&(n=r.decimals),t.toPathData(n)},b.Font.prototype._getSVG=function(t,e,i,r){var n=3;return"string"==typeof t&&arguments.length>2?t=this._getPath(t,e,i,r):"object"==typeof e&&(r=e),r&&("number"==typeof r.decimals&&(n=r.decimals),"number"==typeof r.strokeWidth&&(t.strokeWidth=r.strokeWidth),void 0!==r.fill&&(t.fill=r.fill),void 0!==r.stroke&&(t.stroke=r.stroke)),t.toSVG(n)},b.Font.prototype._renderPath=function(t,e,i,r){var n,o=r&&r.renderer||this.parent._renderer,s=o.drawingContext;n="object"==typeof t&&t.commands?t.commands:this._getPath(t,e,i,r).commands,s.beginPath();for(var a=0;a<n.length;a+=1){var h=n[a];"M"===h.type?s.moveTo(h.x,h.y):"L"===h.type?s.lineTo(h.x,h.y):"C"===h.type?s.bezierCurveTo(h.x1,h.y1,h.x2,h.y2,h.x,h.y):"Q"===h.type?s.quadraticCurveTo(h.x1,h.y1,h.x,h.y):"Z"===h.type&&s.closePath()}return o._doStroke&&o._strokeSet&&s.stroke(),o._doFill&&(o._fillSet||o._setFill(S._DEFAULT_TEXT_FILL),s.fill()),this},b.Font.prototype._textWidth=function(t,e){return this.font.getAdvanceWidth(t,e)},b.Font.prototype._textAscent=function(t){return this.font.ascender*this._scale(t)},b.Font.prototype._textDescent=function(t){return-this.font.descender*this._scale(t)},b.Font.prototype._scale=function(t){return 1/this.font.unitsPerEm*(t||this.parent._renderer._textSize)},b.Font.prototype._handleAlignment=function(t,e,i,r,n){var o=t._textSize;switch(void 0===n&&(n=this._textWidth(e,o)),t._textAlign){case S.CENTER:i-=n/2;break;case S.RIGHT:i-=n}switch(t._textBaseline){case S.TOP:r+=this._textAscent(o);break;case S.CENTER:r+=this._textAscent(o)/2;break;case S.BOTTOM:r-=this._textDescent(o)}return{x:i,y:r}},e.exports=b},{"../core/constants":18,"../core/main":24}],60:[function(t,e,i){"use strict";var r=t("../core/main");r.prototype.append=function(t,e){return t.push(e),t},r.prototype.arrayCopy=function(t,e,i,r,n){var o,s;void 0!==n?(s=Math.min(n,t.length),o=r,t=t.slice(e,s+e)):(void 0!==i?(s=i,s=Math.min(s,t.length)):s=t.length,o=0,i=e,t=t.slice(0,s)),Array.prototype.splice.apply(i,[o,s].concat(t))},r.prototype.concat=function(t,e){return t.concat(e)},r.prototype.reverse=function(t){return t.reverse()},r.prototype.shorten=function(t){return t.pop(),t},r.prototype.shuffle=function(t,e){for(var i,r,n=ArrayBuffer&&ArrayBuffer.isView&&ArrayBuffer.isView(t),o=(t=e||n?t:t.slice()).length;o>1;)i=Math.random()*o|0,r=t[--o],t[o]=t[i],t[i]=r;return t},r.prototype.sort=function(t,e){var i=e?t.slice(0,Math.min(e,t.length)):t,r=e?t.slice(Math.min(e,t.length)):[];return(i="string"==typeof i[0]?i.sort():i.sort(function(t,e){return t-e})).concat(r)},r.prototype.splice=function(t,e,i){return Array.prototype.splice.apply(t,[i,0].concat(e)),t},r.prototype.subset=function(t,e,i){return void 0!==i?t.slice(e,e+i):t.slice(e,t.length)},e.exports=r},{"../core/main":24}],61:[function(t,e,i){"use strict";var r=t("../core/main");r.prototype.float=function(t){return t instanceof Array?t.map(parseFloat):parseFloat(t)},r.prototype.int=function(t,e){return e=e||10,"string"==typeof t?parseInt(t,e):"number"==typeof t?0|t:"boolean"==typeof t?t?1:0:t instanceof Array?t.map(function(t){return r.prototype.int(t,e)}):void 0},r.prototype.str=function(t){return t instanceof Array?t.map(r.prototype.str):String(t)},r.prototype.boolean=function(t){return"number"==typeof t?0!==t:"string"==typeof t?"true"===t.toLowerCase():"boolean"==typeof t?t:t instanceof Array?t.map(r.prototype.boolean):void 0},r.prototype.byte=function(t){var e=r.prototype.int(t,10);return"number"==typeof e?(e+128)%256-128:e instanceof Array?e.map(r.prototype.byte):void 0},r.prototype.char=function(t){return"number"!=typeof t||isNaN(t)?t instanceof Array?t.map(r.prototype.char):"string"==typeof t?r.prototype.char(parseInt(t,10)):void 0:String.fromCharCode(t)},r.prototype.unchar=function(t){return"string"==typeof t&&1===t.length?t.charCodeAt(0):t instanceof Array?t.map(r.prototype.unchar):void 0},r.prototype.hex=function(t,e){if(e=void 0===e||null===e?e=8:e,t instanceof Array)return t.map(function(t){return r.prototype.hex(t,e)});if("number"==typeof t){t<0&&(t=4294967295+t+1);for(var i=Number(t).toString(16).toUpperCase();i.length<e;)i="0"+i;return i.length>=e&&(i=i.substring(i.length-e,i.length)),i}},r.prototype.unhex=function(t){return t instanceof Array?t.map(r.prototype.unhex):parseInt("0x"+t,16)},e.exports=r},{"../core/main":24}],62:[function(t,e,i){"use strict";function r(t,e,i){var r=t<0,n=r?t.toString().substring(1):t.toString(),o=n.indexOf("."),s=-1!==o?n.substring(0,o):n,a=-1!==o?n.substring(o+1):"",h=r?"-":"";if(void 0!==i){var l="";(-1!==o||i-a.length>0)&&(l="."),a.length>i&&(a=a.substring(0,i));for(var u=0;u<e-s.length;u++)h+="0";h+=s,h+=l,h+=a;for(var c=0;c<i-a.length;c++)h+="0";return h}for(var p=0;p<Math.max(e-s.length,0);p++)h+="0";return h+=n}function n(t,e){var i=(t=t.toString()).indexOf("."),r=-1!==i?t.substring(i):"",n=-1!==i?t.substring(0,i):t;if(n=n.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),0===e)r="";else if(void 0!==e)if(e>r.length)for(var o=e-(r+=-1===i?".":"").length+1,s=0;s<o;s++)r+="0";else r=r.substring(0,e+1);return n+r}function o(t){return parseFloat(t)>0?"+"+t.toString():t.toString()}function s(t){return parseFloat(t)>0?" "+t.toString():t.toString()}var a=t("../core/main");t("../core/error_helpers"),a.prototype.join=function(t,e){return a._validateParameters("join",arguments),t.join(e)},a.prototype.match=function(t,e){return a._validateParameters("match",arguments),t.match(e)},a.prototype.matchAll=function(t,e){a._validateParameters("matchAll",arguments);for(var i=new RegExp(e,"g"),r=i.exec(t),n=[];null!==r;)n.push(r),r=i.exec(t);return n},a.prototype.nf=function(t,e,i){return a._validateParameters("nf",arguments),t instanceof Array?t.map(function(t){return r(t,e,i)}):"[object Arguments]"===Object.prototype.toString.call(t)?3===t.length?this.nf(t[0],t[1],t[2]):2===t.length?this.nf(t[0],t[1]):this.nf(t[0]):r(t,e,i)},a.prototype.nfc=function(t,e){return a._validateParameters("nfc",arguments),t instanceof Array?t.map(function(t){return n(t,e)}):n(t,e)},a.prototype.nfp=function(){a._validateParameters("nfp",arguments);var t=a.prototype.nf.apply(this,arguments);return t instanceof Array?t.map(o):o(t)},a.prototype.nfs=function(){a._validateParameters("nfs",arguments);var t=a.prototype.nf.apply(this,arguments);return t instanceof Array?t.map(s):s(t)},a.prototype.split=function(t,e){return a._validateParameters("split",arguments),t.split(e)},a.prototype.splitTokens=function(t,e){var i;if(a._validateParameters("splitTokens",arguments),void 0!==e){var r=e,n=/\]/g.exec(r),o=/\[/g.exec(r);o&&n?(r=r.slice(0,n.index)+r.slice(n.index+1),o=/\[/g.exec(r),r=r.slice(0,o.index)+r.slice(o.index+1),i=new RegExp("[\\["+r+"\\]]","g")):n?(r=r.slice(0,n.index)+r.slice(n.index+1),i=new RegExp("["+r+"\\]]","g")):o?(r=r.slice(0,o.index)+r.slice(o.index+1),i=new RegExp("["+r+"\\[]","g")):i=new RegExp("["+r+"]","g")}else i=/\s/g;return t.split(i).filter(function(t){return t})},a.prototype.trim=function(t){return a._validateParameters("trim",arguments),t instanceof Array?t.map(this.trim):t.trim()},e.exports=a},{"../core/error_helpers":20,"../core/main":24}],63:[function(t,e,i){"use strict";var r=t("../core/main");r.prototype.day=function(){return(new Date).getDate()},r.prototype.hour=function(){return(new Date).getHours()},r.prototype.minute=function(){return(new Date).getMinutes()},r.prototype.millis=function(){return window.performance.now()},r.prototype.month=function(){return(new Date).getMonth()+1},r.prototype.second=function(){return(new Date).getSeconds()},r.prototype.year=function(){return(new Date).getFullYear()},e.exports=r},{"../core/main":24}],64:[function(t,e,i){"use strict";var r=t("../core/main");t("./p5.Geometry");var n=t("../core/constants");r.prototype.plane=function(t,e,i,n){this._assert3d("plane"),r._validateParameters("plane",arguments),void 0===t&&(t=50),void 0===e&&(e=t),void 0===i&&(i=1),void 0===n&&(n=1);var o="plane|"+i+"|"+n;if(!this._renderer.geometryInHash(o)){var s=new r.Geometry(i,n,function(){for(var t,e,i,n=0;n<=this.detailY;n++){e=n/this.detailY;for(var o=0;o<=this.detailX;o++)t=o/this.detailX,i=new r.Vector(t-.5,e-.5,0),this.vertices.push(i),this.uvs.push(t,e)}});s.computeFaces().computeNormals(),i<=1&&n<=1?s._makeTriangleEdges()._edgesToVertices():console.log("Cannot draw stroke on plane objects with more than 1 detailX or 1 detailY"),this._renderer.createBuffers(o,s)}return this._renderer.drawBuffersScaled(o,t,e,1),this},r.prototype.box=function(t,e,i,n,o){this._assert3d("box"),r._validateParameters("box",arguments),void 0===t&&(t=50),void 0===e&&(e=t),void 0===i&&(i=e);var s=this._renderer.attributes&&this._renderer.attributes.perPixelLighting;void 0===n&&(n=s?1:4),void 0===o&&(o=s?1:4);var a="box|"+n+"|"+o;if(!this._renderer.geometryInHash(a)){var h=new r.Geometry(n,o,function(){var t=[[0,4,2,6],[1,3,5,7],[0,1,4,5],[2,6,3,7],[0,2,1,3],[4,5,6,7]];this.strokeIndices=[[0,1],[1,3],[3,2],[6,7],[8,9],[9,11],[14,15],[16,17],[17,19],[18,19],[20,21],[22,23]];for(var e=0;e<t.length;e++){for(var i=t[e],n=4*e,o=0;o<4;o++){var s=i[o],a=new r.Vector((2*(1&s)-1)/2,((2&s)-1)/2,((4&s)/2-1)/2);this.vertices.push(a),this.uvs.push(1&o,(2&o)/2)}this.faces.push([n,n+1,n+2]),this.faces.push([n+2,n+1,n+3])}});h.computeNormals(),n<=4&&o<=4?h._makeTriangleEdges()._edgesToVertices():console.log("Cannot draw stroke on box objects with more than 4 detailX or 4 detailY"),this._renderer.createBuffers(a,h)}return this._renderer.drawBuffersScaled(a,t,e,i),this},r.prototype.sphere=function(t,e,i){return this._assert3d("sphere"),r._validateParameters("sphere",arguments),void 0===t&&(t=50),void 0===e&&(e=24),void 0===i&&(i=16),this.ellipsoid(t,t,t,e,i),this};var o=function(t,e,i,n,o,s,a){t=t<=0?1:t,e=e<0?0:e,i=i<=0?t:i,n=n<3?3:n,o=o<1?1:o,s=void 0===s||s,a=void 0===a?0!==e:a;var h,l,u,c,p,d=s?-2:0,f=o+(a?2:0),m={},y=Math.atan2(t-e,i);for(h=d;h<=f;++h){var v,g=h/o,_=i*g;for(h<0?(_=0,g=0,v=t):h>o?(_=i,g=1,v=e):v=t+(e-t)*g,-2!==h&&h!==o+2||(v=0),_-=i/2,m[h]=0===v?1:n,l=0;l<m[h];++l){var b=l/n;this.vertices.push(new r.Vector(Math.sin(2*b*Math.PI)*v,_,Math.cos(2*b*Math.PI)*v)),this.vertexNormals.push(new r.Vector(h<0||h>o?0:Math.sin(2*b*Math.PI)*Math.cos(y),h<0?-1:h>o?1:Math.sin(y),h<0||h>o?0:Math.cos(2*b*Math.PI)*Math.cos(y))),this.uvs.push(b,g)}}var S=0;if(s){for(u=0;u<m[-1];++u)p=(u+1)%m[-1],this.faces.push([S,S+1+p,S+1+u]);S+=m[-2]+m[-1]}for(h=0;h<o;++h){for(l=0;l<m[h];++l)1===m[h+1]?(c=(l+1)%m[h],this.faces.push([S+l,S+c,S+m[h]])):(c=(l+1)%m[h],this.faces.push([S+l,S+c,S+m[h]+c]),this.faces.push([S+l,S+m[h]+c,S+m[h]+l]));S+=m[h]}if(a)for(S+=m[o],l=0;l<m[o+1];++l)c=(l+1)%m[o+1],this.faces.push([S+l,S+c,S+m[o+1]])};r.prototype.cylinder=function(t,e,i,n,s,a){this._assert3d("cylinder"),r._validateParameters("cylinder",arguments),void 0===t&&(t=50),void 0===e&&(e=t),void 0===i&&(i=24),void 0===n&&(n=1),void 0===a&&(a=!0),void 0===s&&(s=!0);var h="cylinder|"+i+"|"+n+"|"+s+"|"+a;if(!this._renderer.geometryInHash(h)){var l=new r.Geometry(i,n);o.call(l,1,1,1,i,n,s,a),l.computeNormals(),i<=24&&n<=16?l._makeTriangleEdges()._edgesToVertices():console.log("Cannot draw stroke on cylinder objects with more than 24 detailX or 16 detailY"),this._renderer.createBuffers(h,l)}return this._renderer.drawBuffersScaled(h,t,e,t),this},r.prototype.cone=function(t,e,i,n,s){this._assert3d("cone"),r._validateParameters("cone",arguments),void 0===t&&(t=50),void 0===e&&(e=t),void 0===i&&(i=24),void 0===n&&(n=1),void 0===s&&(s=!0);var a="cone|"+i+"|"+n+"|"+s;if(!this._renderer.geometryInHash(a)){var h=new r.Geometry(i,n);o.call(h,1,0,1,i,n,s,!1),h.computeNormals(),i<=24&&n<=16?h._makeTriangleEdges()._edgesToVertices():console.log("Cannot draw stroke on cone objects with more than 24 detailX or 16 detailY"),this._renderer.createBuffers(a,h)}return this._renderer.drawBuffersScaled(a,t,e,t),this},r.prototype.ellipsoid=function(t,e,i,n,o){this._assert3d("ellipsoid"),r._validateParameters("ellipsoid",arguments),void 0===t&&(t=50),void 0===e&&(e=t),void 0===i&&(i=t),void 0===n&&(n=24),void 0===o&&(o=16);var s="ellipsoid|"+n+"|"+o;if(!this._renderer.geometryInHash(s)){var a=new r.Geometry(n,o,function(){for(var t=0;t<=this.detailY;t++)for(var e=t/this.detailY,i=Math.PI*e-Math.PI/2,n=Math.cos(i),o=Math.sin(i),s=0;s<=this.detailX;s++){var a=s/this.detailX,h=2*Math.PI*a,l=Math.cos(h),u=Math.sin(h),c=new r.Vector(n*u,o,n*l);this.vertices.push(c),this.vertexNormals.push(c),this.uvs.push(a,e)}});a.computeFaces(),n<=24&&o<=24?a._makeTriangleEdges()._edgesToVertices():console.log("Cannot draw stroke on ellipsoids with more than 24 detailX or 24 detailY"),this._renderer.createBuffers(s,a)}return this._renderer.drawBuffersScaled(s,t,e,i),this},r.prototype.torus=function(t,e,i,n){if(this._assert3d("torus"),r._validateParameters("torus",arguments),void 0===t)t=50;else if(!t)return;if(void 0===e)e=10;else if(!e)return;void 0===i&&(i=24),void 0===n&&(n=16);var o=(e/t).toPrecision(4),s="torus|"+o+"|"+i+"|"+n;if(!this._renderer.geometryInHash(s)){var a=new r.Geometry(i,n,function(){for(var t=0;t<=this.detailY;t++)for(var e=t/this.detailY,i=2*Math.PI*e,n=Math.cos(i),s=Math.sin(i),a=1+o*n,h=0;h<=this.detailX;h++){var l=h/this.detailX,u=2*Math.PI*l,c=Math.cos(u),p=Math.sin(u),d=new r.Vector(a*c,a*p,o*s),f=new r.Vector(n*c,n*p,s);this.vertices.push(d),this.vertexNormals.push(f),this.uvs.push(l,e)}});a.computeFaces(),i<=24&&n<=16?a._makeTriangleEdges()._edgesToVertices():console.log("Cannot draw strokes on torus object with more than 24 detailX or 16 detailY"),this._renderer.createBuffers(s,a)}return this._renderer.drawBuffersScaled(s,t,t,t),this},r.RendererGL.prototype.point=function(t,e,i){this._usePointShader(),this.curPointShader.bindShader(),void 0===i&&(i=0);var n=[];return n.push(new r.Vector(t,e,i)),this._drawPoints(n,this._pointVertexBuffer),this.curPointShader.unbindShader(),this},r.RendererGL.prototype.triangle=function(t){var e=t[0],i=t[1],n=t[2],o=t[3],s=t[4],a=t[5],h="tri";if(!this.geometryInHash(h)){var l=new r.Geometry(1,1,function(){var t=[];t.push(new r.Vector(0,0,0)),t.push(new r.Vector(0,1,0)),t.push(new r.Vector(1,0,0)),this.strokeIndices=[[0,1],[1,2],[2,0]],this.vertices=t,this.faces=[[0,1,2]],this.uvs=[0,0,0,1,1,1]});l._makeTriangleEdges()._edgesToVertices(),l.computeNormals(),this.createBuffers(h,l)}var u=this.uMVMatrix.copy();try{var c=new r.Matrix([n-e,o-i,0,0,s-e,a-i,0,0,0,0,1,0,e,i,0,1]).mult(this.uMVMatrix);this.uMVMatrix=c,this.drawBuffers(h)}finally{this.uMVMatrix=u}return this},r.RendererGL.prototype.ellipse=function(t){this.arc(t[0],t[1],t[2],t[3],0,n.TWO_PI,n.OPEN,t[4])},r.RendererGL.prototype.arc=function(t){var e,i,o=arguments[0],s=arguments[1],a=arguments[2],h=arguments[3],l=arguments[4],u=arguments[5],c=arguments[6],p=arguments[7]||25;if(i=Math.abs(u-l)>=n.TWO_PI?(e="ellipse")+"|"+p+"|":(e="arc")+"|"+l+"|"+u+"|"+c+"|"+p+"|",!this.geometryInHash(i)){var d=new r.Geometry(p,1,function(){if(this.strokeIndices=[],l.toFixed(10)!==u.toFixed(10)){c!==n.PIE&&void 0!==c||(this.vertices.push(new r.Vector(.5,.5,0)),this.uvs.push([.5,.5]));for(var t=0;t<=p;t++){var e=t/p,i=(u-l)*e+l,o=.5+Math.cos(i)/2,s=.5+Math.sin(i)/2;this.vertices.push(new r.Vector(o,s,0)),this.uvs.push([o,s]),t<p-1&&(this.faces.push([0,t+1,t+2]),this.strokeIndices.push([t+1,t+2]))}switch(c){case n.PIE:this.faces.push([0,this.vertices.length-2,this.vertices.length-1]),this.strokeIndices.push([0,1]),this.strokeIndices.push([this.vertices.length-2,this.vertices.length-1]),this.strokeIndices.push([0,this.vertices.length-1]);break;case n.CHORD:this.strokeIndices.push([0,1]),this.strokeIndices.push([0,this.vertices.length-1]);break;case n.OPEN:this.strokeIndices.push([0,1]);break;default:this.faces.push([0,this.vertices.length-2,this.vertices.length-1]),this.strokeIndices.push([this.vertices.length-2,this.vertices.length-1])}}});d.computeNormals(),p<=50?d._makeTriangleEdges()._edgesToVertices(d):console.log("Cannot stroke "+e+" with more than 50 detail"),this.createBuffers(i,d)}var f=this.uMVMatrix.copy();try{this.uMVMatrix.translate([o,s,0]),this.uMVMatrix.scale(a,h,1),this.drawBuffers(i)}finally{this.uMVMatrix=f}return this},r.RendererGL.prototype.rect=function(t){var e=this.attributes.perPixelLighting,i=t[0],n=t[1],o=t[2],s=t[3],a=t[4]||(e?1:24),h=t[5]||(e?1:16),l="rect|"+a+"|"+h;if(!this.geometryInHash(l)){var u=new r.Geometry(a,h,function(){for(var t=0;t<=this.detailY;t++)for(var e=t/this.detailY,i=0;i<=this.detailX;i++){var n=i/this.detailX,o=new r.Vector(n,e,0);this.vertices.push(o),this.uvs.push(n,e)}a>0&&h>0&&(this.strokeIndices=[[0,a],[a,(a+1)*(h+1)-1],[(a+1)*(h+1)-1,(a+1)*h],[(a+1)*h,0]])});u.computeFaces().computeNormals()._makeTriangleEdges()._edgesToVertices(),this.createBuffers(l,u)}var c=this.uMVMatrix.copy();try{this.uMVMatrix.translate([i,n,0]),this.uMVMatrix.scale(o,s,1),this.drawBuffers(l)}finally{this.uMVMatrix=c}return this},r.RendererGL.prototype.quad=function(t,e,i,n,o,s,a,h){var l="quad|"+t+"|"+e+"|"+i+"|"+n+"|"+o+"|"+s+"|"+a+"|"+h;if(!this.geometryInHash(l)){var u=new r.Geometry(2,2,function(){this.vertices.push(new r.Vector(t,e,0)),this.vertices.push(new r.Vector(i,n,0)),this.vertices.push(new r.Vector(o,s,0)),this.vertices.push(new r.Vector(a,h,0)),this.uvs.push(0,0,1,0,1,1,0,1),this.strokeIndices=[[0,1],[1,2],[2,3],[3,0]]});u.computeNormals()._makeTriangleEdges()._edgesToVertices(),u.faces=[[0,1,2],[2,3,0]],this.createBuffers(l,u)}return this.drawBuffers(l),this},r.RendererGL.prototype.bezier=function(t,e,i,r,n,o,s,a,h,l,u,c){8===arguments.length&&(l=s,u=a,s=n,a=r,n=r=i,i=o=h=c=0);var p=this._pInst._bezierDetail||20;this.beginShape();for(var d=0;d<=p;d++){var f=Math.pow(1-d/p,3),m=d/p*3*Math.pow(1-d/p,2),y=3*Math.pow(d/p,2)*(1-d/p),v=Math.pow(d/p,3);this.vertex(t*f+r*m+s*y+l*v,e*f+n*m+a*y+u*v,i*f+o*m+h*y+c*v)}return this.endShape(),this},r.RendererGL.prototype.curve=function(t,e,i,r,n,o,s,a,h,l,u,c){8===arguments.length&&(l=s,u=a,s=n,a=r,n=r=i,i=o=h=c=0);var p=this._pInst._curveDetail;this.beginShape();for(var d=0;d<=p;d++){var f=.5*Math.pow(d/p,3),m=.5*Math.pow(d/p,2),y=d/p*.5,v=f*(3*r-t-3*s+l)+m*(2*t-5*r+4*s-l)+y*(-t+s)+2*r*.5,g=f*(3*n-e-3*a+u)+m*(2*e-5*n+4*a-u)+y*(-e+a)+2*n*.5,_=f*(3*o-i-3*h+c)+m*(2*i-5*o+4*h-c)+y*(-i+h)+2*o*.5;this.vertex(v,g,_)}return this.endShape(),this},r.RendererGL.prototype.line=function(){return 6===arguments.length?(this.beginShape(),this.vertex(arguments[0],arguments[1],arguments[2]),this.vertex(arguments[3],arguments[4],arguments[5]),this.endShape()):4===arguments.length&&(this.beginShape(),this.vertex(arguments[0],arguments[1],0),this.vertex(arguments[2],arguments[3],0),this.endShape()),this},r.RendererGL.prototype.bezierVertex=function(){if(0===this.immediateMode._bezierVertex.length)throw Error("vertex() must be used once before calling bezierVertex()");var t,e,i,r,n,o=[],s=[],a=[],h=arguments.length;if(t=0,0===this._lookUpTableBezier.length||this._lutBezierDetail!==this._pInst._curveDetail){this._lookUpTableBezier=[],this._lutBezierDetail=this._pInst._curveDetail;for(var l=1/this._lutBezierDetail,u=0,c=1,p=0;u<1;){if(t=parseFloat(u.toFixed(6)),this._lookUpTableBezier[p]=this._bezierCoefficients(t),c.toFixed(6)===l.toFixed(6)){t=parseFloat(c.toFixed(6))+parseFloat(u.toFixed(6)),++p,this._lookUpTableBezier[p]=this._bezierCoefficients(t);break}u+=l,c-=l,++p}}var d=this._lookUpTableBezier.length;if(6===h){for(this.isBezier=!0,o=[this.immediateMode._bezierVertex[0],arguments[0],arguments[2],arguments[4]],s=[this.immediateMode._bezierVertex[1],arguments[1],arguments[3],arguments[5]],n=0;n<d;n++)e=o[0]*this._lookUpTableBezier[n][0]+o[1]*this._lookUpTableBezier[n][1]+o[2]*this._lookUpTableBezier[n][2]+o[3]*this._lookUpTableBezier[n][3],i=s[0]*this._lookUpTableBezier[n][0]+s[1]*this._lookUpTableBezier[n][1]+s[2]*this._lookUpTableBezier[n][2]+s[3]*this._lookUpTableBezier[n][3],this.vertex(e,i);this.immediateMode._bezierVertex[0]=arguments[4],this.immediateMode._bezierVertex[1]=arguments[5]}else if(9===h){for(this.isBezier=!0,o=[this.immediateMode._bezierVertex[0],arguments[0],arguments[3],arguments[6]],s=[this.immediateMode._bezierVertex[1],arguments[1],arguments[4],arguments[7]],a=[this.immediateMode._bezierVertex[2],arguments[2],arguments[5],arguments[8]],n=0;n<d;n++)e=o[0]*this._lookUpTableBezier[n][0]+o[1]*this._lookUpTableBezier[n][1]+o[2]*this._lookUpTableBezier[n][2]+o[3]*this._lookUpTableBezier[n][3],i=s[0]*this._lookUpTableBezier[n][0]+s[1]*this._lookUpTableBezier[n][1]+s[2]*this._lookUpTableBezier[n][2]+s[3]*this._lookUpTableBezier[n][3],r=a[0]*this._lookUpTableBezier[n][0]+a[1]*this._lookUpTableBezier[n][1]+a[2]*this._lookUpTableBezier[n][2]+a[3]*this._lookUpTableBezier[n][3],this.vertex(e,i,r);this.immediateMode._bezierVertex[0]=arguments[6],this.immediateMode._bezierVertex[1]=arguments[7],this.immediateMode._bezierVertex[2]=arguments[8]}},r.RendererGL.prototype.quadraticVertex=function(){if(0===this.immediateMode._quadraticVertex.length)throw Error("vertex() must be used once before calling quadraticVertex()");var t,e,i,r,n,o=[],s=[],a=[],h=arguments.length;if(t=0,0===this._lookUpTableQuadratic.length||this._lutQuadraticDetail!==this._pInst._curveDetail){this._lookUpTableQuadratic=[],this._lutQuadraticDetail=this._pInst._curveDetail;for(var l=1/this._lutQuadraticDetail,u=0,c=1,p=0;u<1;){if(t=parseFloat(u.toFixed(6)),this._lookUpTableQuadratic[p]=this._quadraticCoefficients(t),c.toFixed(6)===l.toFixed(6)){t=parseFloat(c.toFixed(6))+parseFloat(u.toFixed(6)),++p,this._lookUpTableQuadratic[p]=this._quadraticCoefficients(t);break}u+=l,c-=l,++p}}var d=this._lookUpTableQuadratic.length;if(4===h){for(this.isQuadratic=!0,o=[this.immediateMode._quadraticVertex[0],arguments[0],arguments[2]],s=[this.immediateMode._quadraticVertex[1],arguments[1],arguments[3]],n=0;n<d;n++)e=o[0]*this._lookUpTableQuadratic[n][0]+o[1]*this._lookUpTableQuadratic[n][1]+o[2]*this._lookUpTableQuadratic[n][2],i=s[0]*this._lookUpTableQuadratic[n][0]+s[1]*this._lookUpTableQuadratic[n][1]+s[2]*this._lookUpTableQuadratic[n][2],this.vertex(e,i);this.immediateMode._quadraticVertex[0]=arguments[2],this.immediateMode._quadraticVertex[1]=arguments[3]}else if(6===h){for(this.isQuadratic=!0,o=[this.immediateMode._quadraticVertex[0],arguments[0],arguments[3]],s=[this.immediateMode._quadraticVertex[1],arguments[1],arguments[4]],a=[this.immediateMode._quadraticVertex[2],arguments[2],arguments[5]],n=0;n<d;n++)e=o[0]*this._lookUpTableQuadratic[n][0]+o[1]*this._lookUpTableQuadratic[n][1]+o[2]*this._lookUpTableQuadratic[n][2],i=s[0]*this._lookUpTableQuadratic[n][0]+s[1]*this._lookUpTableQuadratic[n][1]+s[2]*this._lookUpTableQuadratic[n][2],r=a[0]*this._lookUpTableQuadratic[n][0]+a[1]*this._lookUpTableQuadratic[n][1]+a[2]*this._lookUpTableQuadratic[n][2],this.vertex(e,i,r);this.immediateMode._quadraticVertex[0]=arguments[3],this.immediateMode._quadraticVertex[1]=arguments[4],this.immediateMode._quadraticVertex[2]=arguments[5]}},r.RendererGL.prototype.curveVertex=function(){var t,e,i,r,n,o=[],s=[],a=[];t=0;var h=arguments.length;if(0===this._lookUpTableBezier.length||this._lutBezierDetail!==this._pInst._curveDetail){this._lookUpTableBezier=[],this._lutBezierDetail=this._pInst._curveDetail;for(var l=1/this._lutBezierDetail,u=0,c=1,p=0;u<1;){if(t=parseFloat(u.toFixed(6)),this._lookUpTableBezier[p]=this._bezierCoefficients(t),c.toFixed(6)===l.toFixed(6)){t=parseFloat(c.toFixed(6))+parseFloat(u.toFixed(6)),++p,this._lookUpTableBezier[p]=this._bezierCoefficients(t);break}u+=l,c-=l,++p}}var d=this._lookUpTableBezier.length;if(2===h){if(this.immediateMode._curveVertex.push(arguments[0]),this.immediateMode._curveVertex.push(arguments[1]),8===this.immediateMode._curveVertex.length){for(this.isCurve=!0,o=this._bezierToCatmull([this.immediateMode._curveVertex[0],this.immediateMode._curveVertex[2],this.immediateMode._curveVertex[4],this.immediateMode._curveVertex[6]]),s=this._bezierToCatmull([this.immediateMode._curveVertex[1],this.immediateMode._curveVertex[3],this.immediateMode._curveVertex[5],this.immediateMode._curveVertex[7]]),n=0;n<d;n++)e=o[0]*this._lookUpTableBezier[n][0]+o[1]*this._lookUpTableBezier[n][1]+o[2]*this._lookUpTableBezier[n][2]+o[3]*this._lookUpTableBezier[n][3],i=s[0]*this._lookUpTableBezier[n][0]+s[1]*this._lookUpTableBezier[n][1]+s[2]*this._lookUpTableBezier[n][2]+s[3]*this._lookUpTableBezier[n][3],this.vertex(e,i);for(n=0;n<h;n++)this.immediateMode._curveVertex.shift()}}else if(3===h&&(this.immediateMode._curveVertex.push(arguments[0]),this.immediateMode._curveVertex.push(arguments[1]),this.immediateMode._curveVertex.push(arguments[2]),12===this.immediateMode._curveVertex.length)){for(this.isCurve=!0,o=this._bezierToCatmull([this.immediateMode._curveVertex[0],this.immediateMode._curveVertex[3],this.immediateMode._curveVertex[6],this.immediateMode._curveVertex[9]]),s=this._bezierToCatmull([this.immediateMode._curveVertex[1],this.immediateMode._curveVertex[4],this.immediateMode._curveVertex[7],this.immediateMode._curveVertex[10]]),a=this._bezierToCatmull([this.immediateMode._curveVertex[2],this.immediateMode._curveVertex[5],this.immediateMode._curveVertex[8],this.immediateMode._curveVertex[11]]),n=0;n<d;n++)e=o[0]*this._lookUpTableBezier[n][0]+o[1]*this._lookUpTableBezier[n][1]+o[2]*this._lookUpTableBezier[n][2]+o[3]*this._lookUpTableBezier[n][3],i=s[0]*this._lookUpTableBezier[n][0]+s[1]*this._lookUpTableBezier[n][1]+s[2]*this._lookUpTableBezier[n][2]+s[3]*this._lookUpTableBezier[n][3],r=a[0]*this._lookUpTableBezier[n][0]+a[1]*this._lookUpTableBezier[n][1]+a[2]*this._lookUpTableBezier[n][2]+a[3]*this._lookUpTableBezier[n][3],this.vertex(e,i,r);for(n=0;n<h;n++)this.immediateMode._curveVertex.shift()}},e.exports=r},{"../core/constants":18,"../core/main":24,"./p5.Geometry":70}],65:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("../core/constants");r.prototype.orbitControl=function(t,e){if(this._assert3d("orbitControl"),r._validateParameters("orbitControl",arguments),this.mouseX<this.width&&this.mouseX>0&&this.mouseY<this.height&&this.mouseY>0){var i=this._renderer._curCamera;void 0===t&&(t=1),void 0===e&&(e=t),!0!==this.contextMenuDisabled&&(this.canvas.oncontextmenu=function(){return!1},this._setProperty("contextMenuDisabled",!0)),!0!==this.wheelDefaultDisabled&&(this.canvas.onwheel=function(){return!1},this._setProperty("wheelDefaultDisabled",!0));var n=this.height<this.width?this.height:this.width;if(this._mouseWheelDeltaY!==this._pmouseWheelDeltaY&&(this._mouseWheelDeltaY>0?this._renderer._curCamera._orbit(0,0,.5*n):this._renderer._curCamera._orbit(0,0,-.5*n)),this.mouseIsPressed)if(this.mouseButton===this.LEFT){var o=-t*(this.mouseX-this.pmouseX)/n,s=e*(this.mouseY-this.pmouseY)/n;this._renderer._curCamera._orbit(o,s,0)}else if(this.mouseButton===this.RIGHT){var a=i._getLocalAxes(),h=Math.sqrt(a.x[0]*a.x[0]+a.x[2]*a.x[2]);0!==h&&(a.x[0]/=h,a.x[2]/=h);var l=Math.sqrt(a.y[0]*a.y[0]+a.y[2]*a.y[2]);0!==l&&(a.y[0]/=l,a.y[2]/=l);var u=-1*t*(this.mouseX-this.pmouseX),c=-1*e*(this.mouseY-this.pmouseY);i.setPosition(i.eyeX+u*a.x[0]+c*a.z[0],i.eyeY,i.eyeZ+u*a.x[2]+c*a.z[2])}return this}},r.prototype.debugMode=function(){this._assert3d("debugMode"),r._validateParameters("debugMode",arguments);for(var t=this._registeredMethods.post.length-1;t>=0;t--)this._registeredMethods.post[t].toString()!==this._grid().toString()&&this._registeredMethods.post[t].toString()!==this._axesIcon().toString()||this._registeredMethods.post.splice(t,1);arguments[0]===n.GRID?this.registerMethod("post",this._grid.call(this,arguments[1],arguments[2],arguments[3],arguments[4],arguments[5])):arguments[0]===n.AXES?this.registerMethod("post",this._axesIcon.call(this,arguments[1],arguments[2],arguments[3],arguments[4])):(this.registerMethod("post",this._grid.call(this,arguments[0],arguments[1],arguments[2],arguments[3],arguments[4])),this.registerMethod("post",this._axesIcon.call(this,arguments[5],arguments[6],arguments[7],arguments[8])))},r.prototype.noDebugMode=function(){this._assert3d("noDebugMode");for(var t=this._registeredMethods.post.length-1;t>=0;t--)this._registeredMethods.post[t].toString()!==this._grid().toString()&&this._registeredMethods.post[t].toString()!==this._axesIcon().toString()||this._registeredMethods.post.splice(t,1)},r.prototype._grid=function(t,e,i,r,n){void 0===t&&(t=this.width/2),void 0===e&&(e=Math.round(t/30)<4?4:Math.round(t/30)),void 0===i&&(i=0),void 0===r&&(r=0),void 0===n&&(n=0);var o=t/e,s=t/2;return function(){this.push(),this.stroke(255*this._renderer.curStrokeColor[0],255*this._renderer.curStrokeColor[1],255*this._renderer.curStrokeColor[2]),this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix.mat4[0],this._renderer._curCamera.cameraMatrix.mat4[1],this._renderer._curCamera.cameraMatrix.mat4[2],this._renderer._curCamera.cameraMatrix.mat4[3],this._renderer._curCamera.cameraMatrix.mat4[4],this._renderer._curCamera.cameraMatrix.mat4[5],this._renderer._curCamera.cameraMatrix.mat4[6],this._renderer._curCamera.cameraMatrix.mat4[7],this._renderer._curCamera.cameraMatrix.mat4[8],this._renderer._curCamera.cameraMatrix.mat4[9],this._renderer._curCamera.cameraMatrix.mat4[10],this._renderer._curCamera.cameraMatrix.mat4[11],this._renderer._curCamera.cameraMatrix.mat4[12],this._renderer._curCamera.cameraMatrix.mat4[13],this._renderer._curCamera.cameraMatrix.mat4[14],this._renderer._curCamera.cameraMatrix.mat4[15]);for(var t=0;t<=e;t++)this.beginShape(this.LINES),this.vertex(-s+i,r,t*o-s+n),this.vertex(+s+i,r,t*o-s+n),this.endShape();for(var a=0;a<=e;a++)this.beginShape(this.LINES),this.vertex(a*o-s+i,r,-s+n),this.vertex(a*o-s+i,r,+s+n),this.endShape();this.pop()}},r.prototype._axesIcon=function(t,e,i,r){return void 0===t&&(t=this.width/20>40?this.width/20:40),void 0===e&&(e=-this.width/4),void 0===i&&(i=e),void 0===r&&(r=e),function(){this.push(),this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix.mat4[0],this._renderer._curCamera.cameraMatrix.mat4[1],this._renderer._curCamera.cameraMatrix.mat4[2],this._renderer._curCamera.cameraMatrix.mat4[3],this._renderer._curCamera.cameraMatrix.mat4[4],this._renderer._curCamera.cameraMatrix.mat4[5],this._renderer._curCamera.cameraMatrix.mat4[6],this._renderer._curCamera.cameraMatrix.mat4[7],this._renderer._curCamera.cameraMatrix.mat4[8],this._renderer._curCamera.cameraMatrix.mat4[9],this._renderer._curCamera.cameraMatrix.mat4[10],this._renderer._curCamera.cameraMatrix.mat4[11],this._renderer._curCamera.cameraMatrix.mat4[12],this._renderer._curCamera.cameraMatrix.mat4[13],this._renderer._curCamera.cameraMatrix.mat4[14],this._renderer._curCamera.cameraMatrix.mat4[15]),this.strokeWeight(2),this.stroke(255,0,0),this.beginShape(this.LINES),this.vertex(e,i,r),this.vertex(e+t,i,r),this.endShape(),this.stroke(0,255,0),this.beginShape(this.LINES),this.vertex(e,i,r),this.vertex(e,i+t,r),this.endShape(),this.stroke(0,0,255),this.beginShape(this.LINES),this.vertex(e,i,r),this.vertex(e,i,r+t),this.endShape(),this.pop()}},e.exports=r},{"../core/constants":18,"../core/main":24}],66:[function(t,e,i){"use strict";var r=t("../core/main");r.prototype.ambientLight=function(t,e,i,n){this._assert3d("ambientLight"),r._validateParameters("ambientLight",arguments);var o=this.color.apply(this,arguments),s=this._renderer._useLightShader();return s.setUniform("uUseLighting",!0),s.setUniform("uMaterialColor",this._renderer.curFillColor),this._renderer.ambientLightColors.push(o._array[0],o._array[1],o._array[2]),s.setUniform("uAmbientColor",this._renderer.ambientLightColors),s.setUniform("uAmbientLightCount",this._renderer.ambientLightColors.length/3),this},r.prototype.directionalLight=function(t,e,i,n,o,s){this._assert3d("directionalLight"),r._validateParameters("directionalLight",arguments);var a,h=this._renderer._useLightShader();a=t instanceof r.Color?t:this.color(t,e,i);var l,u,c,p=arguments[arguments.length-1];"number"==typeof p?(l=arguments[arguments.length-3],u=arguments[arguments.length-2],c=arguments[arguments.length-1]):(l=p.x,u=p.y,c=p.z),h.setUniform("uUseLighting",!0),h.setUniform("uMaterialColor",this._renderer.curFillColor);var d=Math.sqrt(l*l+u*u+c*c);return this._renderer.directionalLightDirections.push(l/d,u/d,c/d),h.setUniform("uLightingDirection",this._renderer.directionalLightDirections),this._renderer.directionalLightColors.push(a._array[0],a._array[1],a._array[2]),h.setUniform("uDirectionalColor",this._renderer.directionalLightColors),h.setUniform("uDirectionalLightCount",this._renderer.directionalLightColors.length/3),this},r.prototype.pointLight=function(t,e,i,n,o,s){var a;this._assert3d("pointLight"),r._validateParameters("pointLight",arguments),a=t instanceof r.Color?t:this.color(t,e,i);var h,l,u,c=arguments[arguments.length-1];"number"==typeof c?(h=arguments[arguments.length-3],l=arguments[arguments.length-2],u=arguments[arguments.length-1]):(h=c.x,l=c.y,u=c.z);var p=this._renderer._useLightShader();return p.setUniform("uUseLighting",!0),p.setUniform("uMaterialColor",this._renderer.curFillColor),this._renderer.pointLightPositions.push(h,l,u),p.setUniform("uPointLightLocation",this._renderer.pointLightPositions),this._renderer.pointLightColors.push(a._array[0],a._array[1],a._array[2]),p.setUniform("uPointLightColor",this._renderer.pointLightColors),p.setUniform("uPointLightCount",this._renderer.pointLightColors.length/3),this},e.exports=r},{"../core/main":24}],67:[function(t,e,i){"use strict";var r=t("../core/main");t("./p5.Geometry"),r.prototype.loadModel=function(t){var e,i,n;r._validateParameters("loadModel",arguments),"boolean"==typeof arguments[1]?(e=arguments[1],i=arguments[2],n=arguments[3]):(e=!1,i=arguments[1],n=arguments[2]);var o=new r.Geometry;o.gid=t+"|"+e;var s=this;return this.loadStrings(t,function(t){(function(t,e){for(var i={v:[],vt:[],vn:[]},n={},o=0;o<e.length;++o){var s=e[o].trim().split(/\b\s+/);if(s.length>0)if("v"===s[0]||"vn"===s[0]){var a=new r.Vector(parseFloat(s[1]),parseFloat(s[2]),parseFloat(s[3]));i[s[0]].push(a)}else if("vt"===s[0]){var h=[parseFloat(s[1]),parseFloat(s[2])];i[s[0]].push(h)}else if("f"===s[0])for(var l=3;l<s.length;++l){for(var u=[],c=[1,l-1,l],p=0;p<c.length;++p){var d=s[c[p]],f=0;if(void 0!==n[d])f=n[d];else{for(var m=d.split("/"),y=0;y<m.length;y++)m[y]=parseInt(m[y])-1;f=n[d]=t.vertices.length,t.vertices.push(i.v[m[0]].copy()),i.vt[m[1]]?t.uvs.push(i.vt[m[1]].slice()):t.uvs.push([0,0]),i.vn[m[2]]&&t.vertexNormals.push(i.vn[m[2]].copy())}u.push(f)}u[0]!==u[1]&&u[0]!==u[2]&&u[1]!==u[2]&&t.faces.push(u)}}0===t.vertexNormals.length&&t.computeNormals()})(o,t),e&&o.normalize(),s._decrementPreload(),"function"==typeof i&&i(o)}.bind(this),n),o},r.prototype.model=function(t){this._assert3d("model"),r._validateParameters("model",arguments),t.vertices.length>0&&(this._renderer.geometryInHash(t.gid)||(t._makeTriangleEdges()._edgesToVertices(),this._renderer.createBuffers(t.gid,t)),this._renderer.drawBuffers(t.gid))},e.exports=r},{"../core/main":24,"./p5.Geometry":70}],68:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("../core/constants");t("./p5.Texture"),r.prototype.loadShader=function(t,e){r._validateParameters("loadShader",arguments);var i=new r.Shader,n=this,o=!1,s=!1;return this.loadStrings(e,function(t){i._fragSrc=t.join("\n"),o=!0,s&&n._decrementPreload()}),this.loadStrings(t,function(t){i._vertSrc=t.join("\n"),s=!0,o&&n._decrementPreload()}),i},r.prototype.createShader=function(t,e){return this._assert3d("createShader"),r._validateParameters("createShader",arguments),new r.Shader(this._renderer,t,e)},r.prototype.shader=function(t){return this._assert3d("shader"),r._validateParameters("shader",arguments),void 0===t._renderer&&(t._renderer=this._renderer),t.isStrokeShader()?this._renderer.setStrokeShader(t):this._renderer.setFillShader(t),this},r.prototype.normalMaterial=function(){return this._assert3d("normalMaterial"),r._validateParameters("normalMaterial",arguments),this._renderer.drawMode=n.FILL,this._renderer.setFillShader(this._renderer._getNormalShader()),this._renderer.curFillColor=[1,1,1,1],this.noStroke(),this},r.prototype.texture=function(t){this._assert3d("texture"),r._validateParameters("texture",arguments),this._renderer.drawMode=n.TEXTURE;var e=this._renderer._useLightShader();return e.setUniform("uSpecular",!1),e.setUniform("isTexture",!0),e.setUniform("uSampler",t),this.noStroke(),this},r.prototype.ambientMaterial=function(t,e,i,n){this._assert3d("ambientMaterial"),r._validateParameters("ambientMaterial",arguments);var o=r.prototype.color.apply(this,arguments);this._renderer.curFillColor=o._array;var s=this._renderer._useLightShader();return s.setUniform("uMaterialColor",this._renderer.curFillColor),s.setUniform("uSpecular",!1),s.setUniform("isTexture",!1),this},r.prototype.specularMaterial=function(t,e,i,n){this._assert3d("specularMaterial"),r._validateParameters("specularMaterial",arguments);var o=r.prototype.color.apply(this,arguments);this._renderer.curFillColor=o._array;var s=this._renderer._useLightShader();return s.setUniform("uMaterialColor",this._renderer.curFillColor),s.setUniform("uSpecular",!0),s.setUniform("isTexture",!1),this},r.RendererGL.prototype._applyColorBlend=function(t){var e=this.GL,i=this.drawMode===n.TEXTURE;return i||t[t.length-1]<1?(e.depthMask(i),e.enable(e.BLEND),e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA)):(e.depthMask(!0),e.disable(e.BLEND)),t},e.exports=r},{"../core/constants":18,"../core/main":24,"./p5.Texture":76}],69:[function(t,e,i){"use strict";var r=t("../core/main");r.prototype.camera=function(){return this._assert3d("camera"),r._validateParameters("camera",arguments),this._renderer._curCamera.camera.apply(this._renderer._curCamera,arguments),this},r.prototype.perspective=function(){return this._assert3d("perspective"),r._validateParameters("perspective",arguments),this._renderer._curCamera.perspective.apply(this._renderer._curCamera,arguments),this},r.prototype.ortho=function(){return this._assert3d("ortho"),r._validateParameters("ortho",arguments),this._renderer._curCamera.ortho.apply(this._renderer._curCamera,arguments),this},r.prototype.createCamera=function(){this._assert3d("createCamera");var t=new r.Camera(this._renderer);return t._computeCameraDefaultSettings(),t._setDefaultCamera(),this._renderer._curCamera=t,t},r.Camera=function(t){this._renderer=t,this.cameraType="default",this.cameraMatrix=new r.Matrix,this.projMatrix=new r.Matrix},r.Camera.prototype.perspective=function(t,e,i,n){void 0===t?(t=this.defaultCameraFOV,this.cameraFOV=t):this.cameraFOV=this._renderer._pInst._toRadians(t),void 0===e&&(e=this.defaultAspectRatio),void 0===i&&(i=this.defaultCameraNear),void 0===n&&(n=this.defaultCameraFar),i<=1e-4&&(i=.01,console.log("Avoid perspective near plane values close to or below 0. Setting value to 0.01.")),n<i&&console.log("Perspective far plane value is less than near plane value. Nothing will be shown."),this.cameraFOV=this._renderer._pInst._toRadians(t),this.aspectRatio=e,this.cameraNear=i,this.cameraFar=n,this.projMatrix=r.Matrix.identity();var o=1/Math.tan(this.cameraFOV/2),s=1/(this.cameraNear-this.cameraFar);this.projMatrix.set(o/e,0,0,0,0,-o,0,0,0,0,(n+i)*s,-1,0,0,2*n*i*s,0),this._isActive()&&this._renderer.uPMatrix.set(this.projMatrix.mat4[0],this.projMatrix.mat4[1],this.projMatrix.mat4[2],this.projMatrix.mat4[3],this.projMatrix.mat4[4],this.projMatrix.mat4[5],this.projMatrix.mat4[6],this.projMatrix.mat4[7],this.projMatrix.mat4[8],this.projMatrix.mat4[9],this.projMatrix.mat4[10],this.projMatrix.mat4[11],this.projMatrix.mat4[12],this.projMatrix.mat4[13],this.projMatrix.mat4[14],this.projMatrix.mat4[15]),this.cameraType="custom"},r.Camera.prototype.ortho=function(t,e,i,n,o,s){void 0===t&&(t=-this._renderer.width/2),void 0===e&&(e=+this._renderer.width/2),void 0===i&&(i=-this._renderer.height/2),void 0===n&&(n=+this._renderer.height/2),void 0===o&&(o=0),void 0===s&&(s=Math.max(this._renderer.width,this._renderer.height));var a=e-t,h=n-i,l=s-o,u=2/a,c=2/h,p=-2/l,d=-(e+t)/a,f=-(n+i)/h,m=-(s+o)/l;this.projMatrix=r.Matrix.identity(),this.projMatrix.set(u,0,0,0,0,-c,0,0,0,0,p,0,d,f,m,1),this._isActive()&&this._renderer.uPMatrix.set(this.projMatrix.mat4[0],this.projMatrix.mat4[1],this.projMatrix.mat4[2],this.projMatrix.mat4[3],this.projMatrix.mat4[4],this.projMatrix.mat4[5],this.projMatrix.mat4[6],this.projMatrix.mat4[7],this.projMatrix.mat4[8],this.projMatrix.mat4[9],this.projMatrix.mat4[10],this.projMatrix.mat4[11],this.projMatrix.mat4[12],this.projMatrix.mat4[13],this.projMatrix.mat4[14],this.projMatrix.mat4[15]),this.cameraType="custom"},r.Camera.prototype._rotateView=function(t,e,i,n){var o=this.centerX,s=this.centerY,a=this.centerZ;o-=this.eyeX,s-=this.eyeY,a-=this.eyeZ;var h=r.Matrix.identity(this._renderer._pInst);h.rotate(t,e,i,n);var l=[o*h.mat4[0]+s*h.mat4[4]+a*h.mat4[8],o*h.mat4[1]+s*h.mat4[5]+a*h.mat4[9],o*h.mat4[2]+s*h.mat4[6]+a*h.mat4[10]];l[0]+=this.eyeX,l[1]+=this.eyeY,l[2]+=this.eyeZ,this.camera(this.eyeX,this.eyeY,this.eyeZ,l[0],l[1],l[2],this.upX,this.upY,this.upZ)},r.Camera.prototype.pan=function(t){var e=this._getLocalAxes();this._rotateView(t,e.y[0],e.y[1],e.y[2])},r.Camera.prototype.tilt=function(t){var e=this._getLocalAxes();this._rotateView(t,e.x[0],e.x[1],e.x[2])},r.Camera.prototype.lookAt=function(t,e,i){this.camera(this.eyeX,this.eyeY,this.eyeZ,t,e,i,this.upX,this.upY,this.upZ)},r.Camera.prototype.camera=function(t,e,i,r,n,o,s,a,h){void 0===t&&(t=this.defaultEyeX,e=this.defaultEyeY,i=this.defaultEyeZ,r=t,n=e,o=0,s=0,a=1,h=0),this.eyeX=t,this.eyeY=e,this.eyeZ=i,this.centerX=r,this.centerY=n,this.centerZ=o,this.upX=s,this.upY=a,this.upZ=h;var l=this._getLocalAxes();this.cameraMatrix.set(l.x[0],l.y[0],l.z[0],0,l.x[1],l.y[1],l.z[1],0,l.x[2],l.y[2],l.z[2],0,0,0,0,1);var u=-t,c=-e,p=-i;return this.cameraMatrix.translate([u,c,p]),this._isActive()&&this._renderer.uMVMatrix.set(this.cameraMatrix.mat4[0],this.cameraMatrix.mat4[1],this.cameraMatrix.mat4[2],this.cameraMatrix.mat4[3],this.cameraMatrix.mat4[4],this.cameraMatrix.mat4[5],this.cameraMatrix.mat4[6],this.cameraMatrix.mat4[7],this.cameraMatrix.mat4[8],this.cameraMatrix.mat4[9],this.cameraMatrix.mat4[10],this.cameraMatrix.mat4[11],this.cameraMatrix.mat4[12],this.cameraMatrix.mat4[13],this.cameraMatrix.mat4[14],this.cameraMatrix.mat4[15]),this},r.Camera.prototype.move=function(t,e,i){var r=this._getLocalAxes(),n=[r.x[0]*t,r.x[1]*t,r.x[2]*t],o=[r.y[0]*e,r.y[1]*e,r.y[2]*e],s=[r.z[0]*i,r.z[1]*i,r.z[2]*i];this.camera(this.eyeX+n[0]+o[0]+s[0],this.eyeY+n[1]+o[1]+s[1],this.eyeZ+n[2]+o[2]+s[2],this.centerX+n[0]+o[0]+s[0],this.centerY+n[1]+o[1]+s[1],this.centerZ+n[2]+o[2]+s[2],0,1,0)},r.Camera.prototype.setPosition=function(t,e,i){var r=t-this.eyeX,n=e-this.eyeY,o=i-this.eyeZ;this.camera(t,e,i,this.centerX+r,this.centerY+n,this.centerZ+o,0,1,0)},r.Camera.prototype._computeCameraDefaultSettings=function(){this.defaultCameraFOV=60/180*Math.PI,this.defaultAspectRatio=this._renderer.width/this._renderer.height,this.defaultEyeX=0,this.defaultEyeY=0,this.defaultEyeZ=this._renderer.height/2/Math.tan(this.defaultCameraFOV/2),this.defaultCenterX=0,this.defaultCenterY=0,this.defaultCenterZ=0,this.defaultCameraNear=.1*this.defaultEyeZ,this.defaultCameraFar=10*this.defaultEyeZ},r.Camera.prototype._setDefaultCamera=function(){this.cameraFOV=this.defaultCameraFOV,this.aspectRatio=this.defaultAspectRatio,this.eyeX=this.defaultEyeX,this.eyeY=this.defaultEyeY,this.eyeZ=this.defaultEyeZ,this.centerX=this.defaultCenterX,this.centerY=this.defaultCenterY,this.centerZ=this.defaultCenterZ,this.upX=0,this.upY=1,this.upZ=0,this.cameraNear=this.defaultCameraNear,this.cameraFar=this.defaultCameraFar,this.perspective(),this.camera(),this.cameraType="default"},r.Camera.prototype._resize=function(){"default"===this.cameraType?(this._computeCameraDefaultSettings(),this._setDefaultCamera()):this.perspective(this.cameraFOV,this._renderer.width/this._renderer.height)},r.Camera.prototype.copy=function(){var t=new r.Camera(this._renderer);return t.cameraFOV=this.cameraFOV,t.aspectRatio=this.aspectRatio,t.eyeX=this.eyeX,t.eyeY=this.eyeY,t.eyeZ=this.eyeZ,t.centerX=this.centerX,t.centerY=this.centerY,t.centerZ=this.centerZ,t.cameraNear=this.cameraNear,t.cameraFar=this.cameraFar,t.cameraType=this.cameraType,t.cameraMatrix=this.cameraMatrix.copy(),t.projMatrix=this.projMatrix.copy(),t},r.Camera.prototype._getLocalAxes=function(){var t=this.eyeX-this.centerX,e=this.eyeY-this.centerY,i=this.eyeZ-this.centerZ,r=Math.sqrt(t*t+e*e+i*i);0!==r&&(t/=r,e/=r,i/=r);var n=this.upX,o=this.upY,s=this.upZ,a=o*i-s*e,h=-n*i+s*t,l=n*e-o*t;n=e*l-i*h,o=-t*l+i*a,s=t*h-e*a;var u=Math.sqrt(a*a+h*h+l*l);0!==u&&(a/=u,h/=u,l/=u);var c=Math.sqrt(n*n+o*o+s*s);return 0!==c&&(n/=c,o/=c,s/=c),{x:[a,h,l],y:[n,o,s],z:[t,e,i]}},r.Camera.prototype._orbit=function(t,e,i){var r=this.eyeX-this.centerX,n=this.eyeY-this.centerY,o=this.eyeZ-this.centerZ,s=Math.sqrt(r*r+n*n+o*o),a=Math.atan2(r,o),h=Math.acos(Math.max(-1,Math.min(1,n/s)));a+=t,h+=e,(s+=i)<0&&(s=.1),h>Math.PI?h=Math.PI:h<=0&&(h=.001);var l=Math.sin(h)*s*Math.sin(a),u=Math.cos(h)*s,c=Math.sin(h)*s*Math.cos(a);this.camera(l+this.centerX,u+this.centerY,c+this.centerZ,this.centerX,this.centerY,this.centerZ,0,1,0)},r.Camera.prototype._isActive=function(){return this===this._renderer._curCamera},r.prototype.setCamera=function(t){this._renderer._curCamera=t,this._renderer.uPMatrix.set(t.projMatrix.mat4[0],t.projMatrix.mat4[1],t.projMatrix.mat4[2],t.projMatrix.mat4[3],t.projMatrix.mat4[4],t.projMatrix.mat4[5],t.projMatrix.mat4[6],t.projMatrix.mat4[7],t.projMatrix.mat4[8],t.projMatrix.mat4[9],t.projMatrix.mat4[10],t.projMatrix.mat4[11],t.projMatrix.mat4[12],t.projMatrix.mat4[13],t.projMatrix.mat4[14],t.projMatrix.mat4[15])},e.exports=r.Camera},{"../core/main":24}],70:[function(t,e,i){"use strict";var r=t("../core/main");r.Geometry=function(t,e,i){return this.vertices=[],this.lineVertices=[],this.lineNormals=[],this.vertexNormals=[],this.faces=[],this.uvs=[],this.edges=[],this.detailX=void 0!==t?t:1,this.detailY=void 0!==e?e:1,i instanceof Function&&i.call(this),this},r.Geometry.prototype.computeFaces=function(){this.faces.length=0;for(var t,e,i,r,n=this.detailX+1,o=0;o<this.detailY;o++)for(var s=0;s<this.detailX;s++)t=o*n+s,e=o*n+s+1,i=(o+1)*n+s+1,r=(o+1)*n+s,this.faces.push([t,e,r]),this.faces.push([r,e,i]);return this},r.Geometry.prototype._getFaceNormal=function(t){var e=this.faces[t],i=this.vertices[e[0]],n=this.vertices[e[1]],o=this.vertices[e[2]],s=r.Vector.sub(n,i),a=r.Vector.sub(o,i),h=r.Vector.cross(s,a),l=r.Vector.mag(h),u=l/(r.Vector.mag(s)*r.Vector.mag(a));return 0===u||isNaN(u)?(console.warn("p5.Geometry.prototype._getFaceNormal:","face has colinear sides or a repeated vertex"),h):(u>1&&(u=1),h.mult(Math.asin(u)/l))},r.Geometry.prototype.computeNormals=function(){var t,e=this.vertexNormals,i=this.vertices,n=this.faces;for(e.length=0,t=0;t<i.length;++t)e.push(new r.Vector);for(var o=0;o<n.length;++o)for(var s=n[o],a=this._getFaceNormal(o),h=0;h<3;++h){var l=s[h];e[l].add(a)}for(t=0;t<i.length;++t)e[t].normalize();return this},r.Geometry.prototype.averageNormals=function(){for(var t=0;t<=this.detailY;t++){var e=this.detailX+1,i=r.Vector.add(this.vertexNormals[t*e],this.vertexNormals[t*e+this.detailX]);i=r.Vector.div(i,2),this.vertexNormals[t*e]=i,this.vertexNormals[t*e+this.detailX]=i}return this},r.Geometry.prototype.averagePoleNormals=function(){for(var t=new r.Vector(0,0,0),e=0;e<this.detailX;e++)t.add(this.vertexNormals[e]);for(t=r.Vector.div(t,this.detailX),e=0;e<this.detailX;e++)this.vertexNormals[e]=t;for(t=new r.Vector(0,0,0),e=this.vertices.length-1;e>this.vertices.length-1-this.detailX;e--)t.add(this.vertexNormals[e]);for(t=r.Vector.div(t,this.detailX),e=this.vertices.length-1;e>this.vertices.length-1-this.detailX;e--)this.vertexNormals[e]=t;return this},r.Geometry.prototype._makeTriangleEdges=function(){if(this.edges.length=0,Array.isArray(this.strokeIndices))for(var t=0,e=this.strokeIndices.length;t<e;t++)this.edges.push(this.strokeIndices[t]);else for(var i=0;i<this.faces.length;i++)this.edges.push([this.faces[i][0],this.faces[i][1]]),this.edges.push([this.faces[i][1],this.faces[i][2]]),this.edges.push([this.faces[i][2],this.faces[i][0]]);return this},r.Geometry.prototype._edgesToVertices=function(){this.lineVertices.length=0,this.lineNormals.length=0;for(var t=0;t<this.edges.length;t++){var e=this.vertices[this.edges[t][0]],i=this.vertices[this.edges[t][1]],r=i.copy().sub(e).normalize(),n=e.array(),o=e.array(),s=i.array(),a=i.array(),h=r.array(),l=r.array();h.push(1),l.push(-1),this.lineNormals.push(h,l,h,h,l,l),this.lineVertices.push(n,o,s,s,o,a)}return this},r.Geometry.prototype.normalize=function(){if(this.vertices.length>0){for(var t=this.vertices[0].copy(),e=this.vertices[0].copy(),i=0;i<this.vertices.length;i++)t.x=Math.max(t.x,this.vertices[i].x),e.x=Math.min(e.x,this.vertices[i].x),t.y=Math.max(t.y,this.vertices[i].y),e.y=Math.min(e.y,this.vertices[i].y),t.z=Math.max(t.z,this.vertices[i].z),e.z=Math.min(e.z,this.vertices[i].z);var n=r.Vector.lerp(t,e,.5),o=r.Vector.sub(t,e),s=Math.max(Math.max(o.x,o.y),o.z),a=200/s;for(i=0;i<this.vertices.length;i++)this.vertices[i].sub(n),this.vertices[i].mult(a)}return this},e.exports=r.Geometry},{"../core/main":24}],71:[function(t,e,i){"use strict";var r=t("../core/main"),n=Array,o=function(t){return t instanceof Array};"undefined"!=typeof Float32Array&&(n=Float32Array,o=function(t){return t instanceof Array||t instanceof Float32Array}),r.Matrix=function(){for(var t=new Array(arguments.length),e=0;e<t.length;++e)t[e]=arguments[e];return t.length&&t[t.length-1]instanceof r&&(this.p5=t[t.length-1]),"mat3"===t[0]?this.mat3=Array.isArray(t[1])?t[1]:new n([1,0,0,0,1,0,0,0,1]):this.mat4=Array.isArray(t[0])?t[0]:new n([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),this},r.Matrix.prototype.set=function(t){return t instanceof r.Matrix?(this.mat4=t.mat4,this):o(t)?(this.mat4=t,this):(16===arguments.length&&(this.mat4[0]=arguments[0],this.mat4[1]=arguments[1],this.mat4[2]=arguments[2],this.mat4[3]=arguments[3],this.mat4[4]=arguments[4],this.mat4[5]=arguments[5],this.mat4[6]=arguments[6],this.mat4[7]=arguments[7],this.mat4[8]=arguments[8],this.mat4[9]=arguments[9],this.mat4[10]=arguments[10],this.mat4[11]=arguments[11],this.mat4[12]=arguments[12],this.mat4[13]=arguments[13],this.mat4[14]=arguments[14],this.mat4[15]=arguments[15]),this)},r.Matrix.prototype.get=function(){return new r.Matrix(this.mat4,this.p5)},r.Matrix.prototype.copy=function(){var t=new r.Matrix(this.p5);return t.mat4[0]=this.mat4[0],t.mat4[1]=this.mat4[1],t.mat4[2]=this.mat4[2],t.mat4[3]=this.mat4[3],t.mat4[4]=this.mat4[4],t.mat4[5]=this.mat4[5],t.mat4[6]=this.mat4[6],t.mat4[7]=this.mat4[7],t.mat4[8]=this.mat4[8],t.mat4[9]=this.mat4[9],t.mat4[10]=this.mat4[10],t.mat4[11]=this.mat4[11],t.mat4[12]=this.mat4[12],t.mat4[13]=this.mat4[13],t.mat4[14]=this.mat4[14],t.mat4[15]=this.mat4[15],t},r.Matrix.identity=function(t){return new r.Matrix(t)},r.Matrix.prototype.transpose=function(t){var e,i,n,s,a,h;return t instanceof r.Matrix?(e=t.mat4[1],i=t.mat4[2],n=t.mat4[3],s=t.mat4[6],a=t.mat4[7],h=t.mat4[11],this.mat4[0]=t.mat4[0],this.mat4[1]=t.mat4[4],this.mat4[2]=t.mat4[8],this.mat4[3]=t.mat4[12],this.mat4[4]=e,this.mat4[5]=t.mat4[5],this.mat4[6]=t.mat4[9],this.mat4[7]=t.mat4[13],this.mat4[8]=i,this.mat4[9]=s,this.mat4[10]=t.mat4[10],this.mat4[11]=t.mat4[14],this.mat4[12]=n,this.mat4[13]=a,this.mat4[14]=h,this.mat4[15]=t.mat4[15]):o(t)&&(e=t[1],i=t[2],n=t[3],s=t[6],a=t[7],h=t[11],this.mat4[0]=t[0],this.mat4[1]=t[4],this.mat4[2]=t[8],this.mat4[3]=t[12],this.mat4[4]=e,this.mat4[5]=t[5],this.mat4[6]=t[9],this.mat4[7]=t[13],this.mat4[8]=i,this.mat4[9]=s,this.mat4[10]=t[10],this.mat4[11]=t[14],this.mat4[12]=n,this.mat4[13]=a,this.mat4[14]=h,this.mat4[15]=t[15]),this},r.Matrix.prototype.invert=function(t){var e,i,n,s,a,h,l,u,c,p,d,f,m,y,v,g;t instanceof r.Matrix?(e=t.mat4[0],i=t.mat4[1],n=t.mat4[2],s=t.mat4[3],a=t.mat4[4],h=t.mat4[5],l=t.mat4[6],u=t.mat4[7],c=t.mat4[8],p=t.mat4[9],d=t.mat4[10],f=t.mat4[11],m=t.mat4[12],y=t.mat4[13],v=t.mat4[14],g=t.mat4[15]):o(t)&&(e=t[0],i=t[1],n=t[2],s=t[3],a=t[4],h=t[5],l=t[6],u=t[7],c=t[8],p=t[9],d=t[10],f=t[11],m=t[12],y=t[13],v=t[14],g=t[15]);var _=e*h-i*a,b=e*l-n*a,S=e*u-s*a,x=i*l-n*h,w=i*u-s*h,T=n*u-s*l,A=c*y-p*m,M=c*v-d*m,P=c*g-f*m,E=p*v-d*y,k=p*g-f*y,C=d*g-f*v,R=_*C-b*k+S*E+x*P-w*M+T*A;return R?(R=1/R,this.mat4[0]=(h*C-l*k+u*E)*R,this.mat4[1]=(n*k-i*C-s*E)*R,this.mat4[2]=(y*T-v*w+g*x)*R,this.mat4[3]=(d*w-p*T-f*x)*R,this.mat4[4]=(l*P-a*C-u*M)*R,this.mat4[5]=(e*C-n*P+s*M)*R,this.mat4[6]=(v*S-m*T-g*b)*R,this.mat4[7]=(c*T-d*S+f*b)*R,this.mat4[8]=(a*k-h*P+u*A)*R,this.mat4[9]=(i*P-e*k-s*A)*R,this.mat4[10]=(m*w-y*S+g*_)*R,this.mat4[11]=(p*S-c*w-f*_)*R,this.mat4[12]=(h*M-a*E-l*A)*R,this.mat4[13]=(e*E-i*M+n*A)*R,this.mat4[14]=(y*b-m*x-v*_)*R,this.mat4[15]=(c*x-p*b+d*_)*R,this):null},r.Matrix.prototype.invert3x3=function(){var t=this.mat3[0],e=this.mat3[1],i=this.mat3[2],r=this.mat3[3],n=this.mat3[4],o=this.mat3[5],s=this.mat3[6],a=this.mat3[7],h=this.mat3[8],l=h*n-o*a,u=-h*r+o*s,c=a*r-n*s,p=t*l+e*u+i*c;return p?(p=1/p,this.mat3[0]=l*p,this.mat3[1]=(-h*e+i*a)*p,this.mat3[2]=(o*e-i*n)*p,this.mat3[3]=u*p,this.mat3[4]=(h*t-i*s)*p,this.mat3[5]=(-o*t+i*r)*p,this.mat3[6]=c*p,this.mat3[7]=(-a*t+e*s)*p,this.mat3[8]=(n*t-e*r)*p,this):null},r.Matrix.prototype.transpose3x3=function(t){var e=t[1],i=t[2],r=t[5];return this.mat3[1]=t[3],this.mat3[2]=t[6],this.mat3[3]=e,this.mat3[5]=t[7],this.mat3[6]=i,this.mat3[7]=r,this},r.Matrix.prototype.inverseTranspose=function(t){void 0===this.mat3?console.error("sorry, this function only works with mat3"):(this.mat3[0]=t.mat4[0],this.mat3[1]=t.mat4[1],this.mat3[2]=t.mat4[2],this.mat3[3]=t.mat4[4],this.mat3[4]=t.mat4[5],this.mat3[5]=t.mat4[6],this.mat3[6]=t.mat4[8],this.mat3[7]=t.mat4[9],this.mat3[8]=t.mat4[10]);var e=this.invert3x3();if(e)e.transpose3x3(this.mat3);else for(var i=0;i<9;i++)this.mat3[i]=0;return this},r.Matrix.prototype.determinant=function(){var t=this.mat4[0]*this.mat4[5]-this.mat4[1]*this.mat4[4],e=this.mat4[0]*this.mat4[6]-this.mat4[2]*this.mat4[4],i=this.mat4[0]*this.mat4[7]-this.mat4[3]*this.mat4[4],r=this.mat4[1]*this.mat4[6]-this.mat4[2]*this.mat4[5],n=this.mat4[1]*this.mat4[7]-this.mat4[3]*this.mat4[5],o=this.mat4[2]*this.mat4[7]-this.mat4[3]*this.mat4[6],s=this.mat4[8]*this.mat4[13]-this.mat4[9]*this.mat4[12],a=this.mat4[8]*this.mat4[14]-this.mat4[10]*this.mat4[12],h=this.mat4[8]*this.mat4[15]-this.mat4[11]*this.mat4[12],l=this.mat4[9]*this.mat4[14]-this.mat4[10]*this.mat4[13],u=this.mat4[9]*this.mat4[15]-this.mat4[11]*this.mat4[13];return t*(this.mat4[10]*this.mat4[15]-this.mat4[11]*this.mat4[14])-e*u+i*l+r*h-n*a+o*s},r.Matrix.prototype.mult=function(t){var e;if(t===this||t===this.mat4)e=this.copy().mat4;else if(t instanceof r.Matrix)e=t.mat4;else{if(!o(t))return;e=t}var i=this.mat4[0],n=this.mat4[1],s=this.mat4[2],a=this.mat4[3];return this.mat4[0]=i*e[0]+n*e[4]+s*e[8]+a*e[12],this.mat4[1]=i*e[1]+n*e[5]+s*e[9]+a*e[13],this.mat4[2]=i*e[2]+n*e[6]+s*e[10]+a*e[14],this.mat4[3]=i*e[3]+n*e[7]+s*e[11]+a*e[15],i=this.mat4[4],n=this.mat4[5],s=this.mat4[6],a=this.mat4[7],this.mat4[4]=i*e[0]+n*e[4]+s*e[8]+a*e[12],this.mat4[5]=i*e[1]+n*e[5]+s*e[9]+a*e[13],this.mat4[6]=i*e[2]+n*e[6]+s*e[10]+a*e[14],this.mat4[7]=i*e[3]+n*e[7]+s*e[11]+a*e[15],i=this.mat4[8],n=this.mat4[9],s=this.mat4[10],a=this.mat4[11],this.mat4[8]=i*e[0]+n*e[4]+s*e[8]+a*e[12],this.mat4[9]=i*e[1]+n*e[5]+s*e[9]+a*e[13],this.mat4[10]=i*e[2]+n*e[6]+s*e[10]+a*e[14],this.mat4[11]=i*e[3]+n*e[7]+s*e[11]+a*e[15],i=this.mat4[12],n=this.mat4[13],s=this.mat4[14],a=this.mat4[15],this.mat4[12]=i*e[0]+n*e[4]+s*e[8]+a*e[12],this.mat4[13]=i*e[1]+n*e[5]+s*e[9]+a*e[13],this.mat4[14]=i*e[2]+n*e[6]+s*e[10]+a*e[14],this.mat4[15]=i*e[3]+n*e[7]+s*e[11]+a*e[15],this},r.Matrix.prototype.scale=function(t,e,i){return t instanceof r.Vector?(e=t.y,i=t.z,t=t.x):t instanceof Array&&(e=t[1],i=t[2],t=t[0]),this.mat4[0]*=t,this.mat4[1]*=t,this.mat4[2]*=t,this.mat4[3]*=t,this.mat4[4]*=e,this.mat4[5]*=e,this.mat4[6]*=e,this.mat4[7]*=e,this.mat4[8]*=i,this.mat4[9]*=i,this.mat4[10]*=i,this.mat4[11]*=i,this},r.Matrix.prototype.rotate=function(t,e,i,n){var o=this.p5?this.p5._toRadians(t):t;e instanceof r.Vector?(i=e.y,n=e.z,e=e.x):e instanceof Array&&(i=e[1],n=e[2],e=e[0]);var s=Math.sqrt(e*e+i*i+n*n);e*=1/s,i*=1/s,n*=1/s;var a=this.mat4[0],h=this.mat4[1],l=this.mat4[2],u=this.mat4[3],c=this.mat4[4],p=this.mat4[5],d=this.mat4[6],f=this.mat4[7],m=this.mat4[8],y=this.mat4[9],v=this.mat4[10],g=this.mat4[11],_=Math.sin(o),b=Math.cos(o),S=1-b,x=e*e*S+b,w=i*e*S+n*_,T=n*e*S-i*_,A=e*i*S-n*_,M=i*i*S+b,P=n*i*S+e*_,E=e*n*S+i*_,k=i*n*S-e*_,C=n*n*S+b;return this.mat4[0]=a*x+c*w+m*T,this.mat4[1]=h*x+p*w+y*T,this.mat4[2]=l*x+d*w+v*T,this.mat4[3]=u*x+f*w+g*T,this.mat4[4]=a*A+c*M+m*P,this.mat4[5]=h*A+p*M+y*P,this.mat4[6]=l*A+d*M+v*P,this.mat4[7]=u*A+f*M+g*P,this.mat4[8]=a*E+c*k+m*C,this.mat4[9]=h*E+p*k+y*C,this.mat4[10]=l*E+d*k+v*C,this.mat4[11]=u*E+f*k+g*C,this},r.Matrix.prototype.translate=function(t){var e=t[0],i=t[1],r=t[2]||0;this.mat4[12]+=this.mat4[0]*e+this.mat4[4]*i+this.mat4[8]*r,this.mat4[13]+=this.mat4[1]*e+this.mat4[5]*i+this.mat4[9]*r,this.mat4[14]+=this.mat4[2]*e+this.mat4[6]*i+this.mat4[10]*r,this.mat4[15]+=this.mat4[3]*e+this.mat4[7]*i+this.mat4[11]*r},r.Matrix.prototype.rotateX=function(t){this.rotate(t,1,0,0)},r.Matrix.prototype.rotateY=function(t){this.rotate(t,0,1,0)},r.Matrix.prototype.rotateZ=function(t){this.rotate(t,0,0,1)},r.Matrix.prototype.perspective=function(t,e,i,r){var n=1/Math.tan(t/2),o=1/(i-r);return this.mat4[0]=n/e,this.mat4[1]=0,this.mat4[2]=0,this.mat4[3]=0,this.mat4[4]=0,this.mat4[5]=n,this.mat4[6]=0,this.mat4[7]=0,this.mat4[8]=0,this.mat4[9]=0,this.mat4[10]=(r+i)*o,this.mat4[11]=-1,this.mat4[12]=0,this.mat4[13]=0,this.mat4[14]=2*r*i*o,this.mat4[15]=0,this},r.Matrix.prototype.ortho=function(t,e,i,r,n,o){var s=1/(t-e),a=1/(i-r),h=1/(n-o);return this.mat4[0]=-2*s,this.mat4[1]=0,this.mat4[2]=0,this.mat4[3]=0,this.mat4[4]=0,this.mat4[5]=-2*a,this.mat4[6]=0,this.mat4[7]=0,this.mat4[8]=0,this.mat4[9]=0,this.mat4[10]=2*h,this.mat4[11]=0,this.mat4[12]=(t+e)*s,this.mat4[13]=(r+i)*a,this.mat4[14]=(o+n)*h,this.mat4[15]=1,this},e.exports=r.Matrix},{"../core/main":24}],72:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("../core/constants");r.RendererGL.prototype.beginShape=function(t){return this.immediateMode.shapeMode=void 0!==t?t:n.LINE_STRIP,void 0===this.immediateMode.vertices?(this.immediateMode.vertices=[],this.immediateMode.edges=[],this.immediateMode.lineVertices=[],this.immediateMode.vertexColors=[],this.immediateMode.lineNormals=[],this.immediateMode.uvCoords=[],this.immediateMode.vertexBuffer=this.GL.createBuffer(),this.immediateMode.colorBuffer=this.GL.createBuffer(),this.immediateMode.uvBuffer=this.GL.createBuffer(),this.immediateMode.lineVertexBuffer=this.GL.createBuffer(),this.immediateMode.lineNormalBuffer=this.GL.createBuffer(),this.immediateMode.pointVertexBuffer=this.GL.createBuffer(),this.immediateMode._bezierVertex=[],this.immediateMode._quadraticVertex=[],this.immediateMode._curveVertex=[]):(this.immediateMode.vertices.length=0,this.immediateMode.edges.length=0,this.immediateMode.lineVertices.length=0,this.immediateMode.lineNormals.length=0,this.immediateMode.vertexColors.length=0,this.immediateMode.uvCoords.length=0),this.isImmediateDrawing=!0,this},r.RendererGL.prototype.vertex=function(t,e){var i,n,o;i=n=o=0,3===arguments.length?i=arguments[2]:4===arguments.length?(n=arguments[2],o=arguments[3]):5===arguments.length&&(i=arguments[2],n=arguments[3],o=arguments[4]);var s=new r.Vector(t,e,i);this.immediateMode.vertices.push(s);var a=this.curFillColor||[.5,.5,.5,1];return this.immediateMode.vertexColors.push(a[0],a[1],a[2],a[3]),this.immediateMode.uvCoords.push(n,o),this.immediateMode._bezierVertex[0]=t,this.immediateMode._bezierVertex[1]=e,this.immediateMode._bezierVertex[2]=i,this.immediateMode._quadraticVertex[0]=t,this.immediateMode._quadraticVertex[1]=e,this.immediateMode._quadraticVertex[2]=i,this},r.RendererGL.prototype.endShape=function(t,e,i,o,s,a){if(this.immediateMode.shapeMode===n.POINTS)this._usePointShader(),this.curPointShader.bindShader(),this._drawPoints(this.immediateMode.vertices,this.immediateMode.pointVertexBuffer),this.curPointShader.unbindShader();else if(this.immediateMode.vertices.length>1){if(this._useImmediateModeShader(),this._doStroke&&this.drawMode!==n.TEXTURE){for(var h=0;h<this.immediateMode.vertices.length-1;h++)this.immediateMode.edges.push([h,h+1]);t===n.CLOSE&&this.immediateMode.edges.push([this.immediateMode.vertices.length-1,0]),r.Geometry.prototype._edgesToVertices.call(this.immediateMode),this._drawStrokeImmediateMode()}if(this._doFill){if(this.isBezier||this.isQuadratic||this.isCurve){var l=[new Float32Array(this._vToNArray(this.immediateMode.vertices))],u=this._triangulate(l);this.immediateMode.vertices=[];for(var c=0,p=u.length;c<p;c+=3)this.vertex(u[c],u[c+1],u[c+2])}this._drawFillImmediateMode(t,e,i,o,s,a)}}return this.immediateMode.vertices.length=0,this.immediateMode.vertexColors.length=0,this.immediateMode.uvCoords.length=0,this.isImmediateDrawing=!1,this.isBezier=!1,this.isQuadratic=!1,this.isCurve=!1,this.immediateMode._bezierVertex.length=0,this.immediateMode._quadraticVertex.length=0,this.immediateMode._curveVertex.length=0,this},r.RendererGL.prototype._drawFillImmediateMode=function(t,e,i,r,o,s){var a=this.GL;if(this.curFillShader.bindShader(),this.curFillShader.attributes.aPosition&&(this._bindBuffer(this.immediateMode.vertexBuffer,a.ARRAY_BUFFER,this._vToNArray(this.immediateMode.vertices),Float32Array,a.DYNAMIC_DRAW),this.curFillShader.enableAttrib(this.curFillShader.attributes.aPosition.location,3,a.FLOAT,!1,0,0)),this.drawMode===n.FILL&&this.curFillShader.attributes.aVertexColor&&(this._bindBuffer(this.immediateMode.colorBuffer,a.ARRAY_BUFFER,this.immediateMode.vertexColors,Float32Array,a.DYNAMIC_DRAW),this.curFillShader.enableAttrib(this.curFillShader.attributes.aVertexColor.location,4,a.FLOAT,!1,0,0)),this.drawMode===n.TEXTURE&&this.curFillShader.attributes.aTexCoord&&(this._bindBuffer(this.immediateMode.uvBuffer,a.ARRAY_BUFFER,this.immediateMode.uvCoords,Float32Array,a.DYNAMIC_DRAW),this.curFillShader.enableAttrib(this.curFillShader.attributes.aTexCoord.location,2,a.FLOAT,!1,0,0)),this.drawMode===n.FILL||this.drawMode===n.TEXTURE)switch(this.immediateMode.shapeMode){case n.LINE_STRIP:case n.LINES:case n.TRIANGLES:this.immediateMode.shapeMode=this.isBezier||this.isQuadratic||this.isCurve?n.TRIANGLES:n.TRIANGLE_FAN}else switch(this.immediateMode.shapeMode){case n.LINE_STRIP:case n.LINES:this.immediateMode.shapeMode=n.LINE_LOOP}if(this.immediateMode.shapeMode===n.QUADS||this.immediateMode.shapeMode===n.QUAD_STRIP)throw new Error("sorry, "+this.immediateMode.shapeMode+" not yet implemented in webgl mode.");this._applyColorBlend(this.curFillColor),a.enable(a.BLEND),a.drawArrays(this.immediateMode.shapeMode,0,this.immediateMode.vertices.length),this._pInst._pixelsDirty=!0,this.curFillShader.unbindShader()},r.RendererGL.prototype._drawStrokeImmediateMode=function(){var t=this.GL;this.curStrokeShader.bindShader(),this.curStrokeShader.attributes.aPosition&&(this._bindBuffer(this.immediateMode.lineVertexBuffer,t.ARRAY_BUFFER,this._flatten(this.immediateMode.lineVertices),Float32Array,t.STATIC_DRAW),this.curStrokeShader.enableAttrib(this.curStrokeShader.attributes.aPosition.location,3,t.FLOAT,!1,0,0)),this.curStrokeShader.attributes.aDirection&&(this._bindBuffer(this.immediateMode.lineNormalBuffer,t.ARRAY_BUFFER,this._flatten(this.immediateMode.lineNormals),Float32Array,t.STATIC_DRAW),this.curStrokeShader.enableAttrib(this.curStrokeShader.attributes.aDirection.location,4,t.FLOAT,!1,0,0)),this._applyColorBlend(this.curStrokeColor),t.drawArrays(t.TRIANGLES,0,this.immediateMode.lineVertices.length),this.curStrokeShader.unbindShader(),this._pInst._pixelsDirty=!0},e.exports=r.RendererGL},{"../core/constants":18,"../core/main":24}],73:[function(t,e,i){"use strict";var r=t("../core/main"),n=0;r.RendererGL.prototype._initBufferDefaults=function(t){if(this._freeBuffers(t),++n>1e3){var e=Object.keys(this.gHash)[0];delete this.gHash[e],n--}this.gHash[t]={}},r.RendererGL.prototype._freeBuffers=function(t){var e=this.gHash[t];if(e){delete this.gHash[t],n--;var i=this.GL;e.vertexBuffer&&i.deleteBuffer(e.vertexBuffer),e.normalBuffer&&i.deleteBuffer(e.normalBuffer),e.lineNormalBuffer&&i.deleteBuffer(e.lineNormalBuffer),e.uvBuffer&&i.deleteBuffer(e.uvBuffer),e.indexBuffer&&i.deleteBuffer(e.indexBuffer),e.lineVertexBuffer&&i.deleteBuffer(e.lineVertexBuffer)}},r.RendererGL.prototype.createBuffers=function(t,e){var i=this.GL;this._initBufferDefaults(t);var r=this.gHash[t];return r.numberOfItems=3*e.faces.length,r.lineVertexCount=e.lineVertices.length,this._useColorShader(),this.curStrokeShader.attributes.aPosition&&(r.lineVertexBuffer=i.createBuffer(),this._bindBuffer(r.lineVertexBuffer,i.ARRAY_BUFFER,this._flatten(e.lineVertices),Float32Array,i.STATIC_DRAW),this.curStrokeShader.enableAttrib(this.curStrokeShader.attributes.aPosition.location,3,i.FLOAT,!1,0,0)),this.curStrokeShader.attributes.aDirection&&(r.lineNormalBuffer=i.createBuffer(),this._bindBuffer(r.lineNormalBuffer,i.ARRAY_BUFFER,this._flatten(e.lineNormals),Float32Array,i.STATIC_DRAW),this.curStrokeShader.enableAttrib(this.curStrokeShader.attributes.aDirection.location,4,i.FLOAT,!1,0,0)),this.curFillShader.attributes.aPosition&&(r.vertexBuffer=i.createBuffer(),this._bindBuffer(r.vertexBuffer,i.ARRAY_BUFFER,this._vToNArray(e.vertices),Float32Array,i.STATIC_DRAW),this.curFillShader.enableAttrib(this.curFillShader.attributes.aPosition.location,3,i.FLOAT,!1,0,0)),r.indexBuffer=i.createBuffer(),this._bindBuffer(r.indexBuffer,i.ELEMENT_ARRAY_BUFFER,this._flatten(e.faces),Uint16Array,i.STATIC_DRAW),this.curFillShader.attributes.aNormal&&(r.normalBuffer=i.createBuffer(),this._bindBuffer(r.normalBuffer,i.ARRAY_BUFFER,this._vToNArray(e.vertexNormals),Float32Array,i.STATIC_DRAW),this.curFillShader.enableAttrib(this.curFillShader.attributes.aNormal.location,3,i.FLOAT,!1,0,0)),this.curFillShader.attributes.aTexCoord&&(r.uvBuffer=i.createBuffer(),this._bindBuffer(r.uvBuffer,i.ARRAY_BUFFER,this._flatten(e.uvs),Float32Array,i.STATIC_DRAW),this.curFillShader.enableAttrib(this.curFillShader.attributes.aTexCoord.location,2,i.FLOAT,!1,0,0)),r},r.RendererGL.prototype.drawBuffers=function(t){var e=this.GL;this._useColorShader();var i=this.gHash[t];return this._doStroke&&i.lineVertexCount>0&&(this.curStrokeShader.bindShader(),i.lineVertexBuffer&&(this._bindBuffer(i.lineVertexBuffer,e.ARRAY_BUFFER),this.curStrokeShader.enableAttrib(this.curStrokeShader.attributes.aPosition.location,3,e.FLOAT,!1,0,0)),i.lineNormalBuffer&&(this._bindBuffer(i.lineNormalBuffer,e.ARRAY_BUFFER),this.curStrokeShader.enableAttrib(this.curStrokeShader.attributes.aDirection.location,4,e.FLOAT,!1,0,0)),this._applyColorBlend(this.curStrokeColor),this._drawArrays(e.TRIANGLES,t),this.curStrokeShader.unbindShader()),!1!==this._doFill&&(this.curFillShader.bindShader(),i.vertexBuffer&&(this._bindBuffer(i.vertexBuffer,e.ARRAY_BUFFER),this.curFillShader.enableAttrib(this.curFillShader.attributes.aPosition.location,3,e.FLOAT,!1,0,0)),i.indexBuffer&&this._bindBuffer(i.indexBuffer,e.ELEMENT_ARRAY_BUFFER),i.normalBuffer&&(this._bindBuffer(i.normalBuffer,e.ARRAY_BUFFER),this.curFillShader.enableAttrib(this.curFillShader.attributes.aNormal.location,3,e.FLOAT,!1,0,0)),i.uvBuffer&&(this._bindBuffer(i.uvBuffer,e.ARRAY_BUFFER),this.curFillShader.enableAttrib(this.curFillShader.attributes.aTexCoord.location,2,e.FLOAT,!1,0,0)),this._applyColorBlend(this.curFillColor),this._drawElements(e.TRIANGLES,t),this.curFillShader.unbindShader()),this},r.RendererGL.prototype.drawBuffersScaled=function(t,e,i,r){var n=this.uMVMatrix.copy();try{this.uMVMatrix.scale(e,i,r),this.drawBuffers(t)}finally{this.uMVMatrix=n}},r.RendererGL.prototype._drawArrays=function(t,e){return this.GL.drawArrays(t,0,this.gHash[e].lineVertexCount),this._pInst._pixelsDirty=!0,this},r.RendererGL.prototype._drawElements=function(t,e){this.GL.drawElements(t,this.gHash[e].numberOfItems,this.GL.UNSIGNED_SHORT,0),this._pInst._pixelsDirty=!0},r.RendererGL.prototype._drawPoints=function(t,e){var i=this.GL;this._bindBuffer(e,i.ARRAY_BUFFER,this._vToNArray(t),Float32Array,i.STATIC_DRAW),this.curPointShader.enableAttrib(this.curPointShader.attributes.aPosition.location,3,i.FLOAT,!1,0,0),i.drawArrays(i.Points,0,t.length)},e.exports=r.RendererGL},{"../core/main":24}],74:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("../core/constants"),o=t("libtess");t("./p5.Shader"),t("./p5.Camera"),t("../core/p5.Renderer"),t("./p5.Matrix");var s={immediateVert:"attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uResolution;\nuniform float uPointSize;\n\nvarying vec4 vColor;\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n  gl_PointSize = uPointSize;\n}\n",vertexColorVert:"attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n}\n",vertexColorFrag:"precision mediump float;\nvarying vec4 vColor;\nvoid main(void) {\n  gl_FragColor = vColor;\n}",normalVert:"attribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvarying vec3 vVertexNormal;\nvarying highp vec2 vVertTexCoord;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vVertexNormal = normalize(vec3( uNormalMatrix * aNormal ));\n  vVertTexCoord = aTexCoord;\n}\n",normalFrag:"precision mediump float;\nvarying vec3 vVertexNormal;\nvoid main(void) {\n  gl_FragColor = vec4(vVertexNormal, 1.0);\n}",basicFrag:"precision mediump float;\nvarying vec3 vVertexNormal;\nuniform vec4 uMaterialColor;\nvoid main(void) {\n  gl_FragColor = uMaterialColor;\n}",lightVert:"attribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uViewMatrix;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\nuniform int uAmbientLightCount;\nuniform int uDirectionalLightCount;\nuniform int uPointLightCount;\n\nuniform vec3 uAmbientColor[8];\nuniform vec3 uLightingDirection[8];\nuniform vec3 uDirectionalColor[8];\nuniform vec3 uPointLightLocation[8];\nuniform vec3 uPointLightColor[8];\nuniform bool uSpecular;\n\nvarying vec3 vVertexNormal;\nvarying vec2 vVertTexCoord;\nvarying vec3 vLightWeighting;\n\nvoid main(void){\n\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n\n  vec3 vertexNormal = normalize(vec3( uNormalMatrix * aNormal ));\n  vVertexNormal = vertexNormal;\n  vVertTexCoord = aTexCoord;\n\n  vec4 mvPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n  vec3 eyeDirection = normalize(-mvPosition.xyz);\n\n  float shininess = 32.0;\n  float specularFactor = 2.0;\n  float diffuseFactor = 0.3;\n\n  vec3 ambientLightFactor = vec3(0.0);\n\n  for (int i = 0; i < 8; i++) {\n    if (uAmbientLightCount == i) break;\n    ambientLightFactor += uAmbientColor[i];\n  }\n\n\n  vec3 directionalLightFactor = vec3(0.0);\n\n  for (int j = 0; j < 8; j++) {\n    if (uDirectionalLightCount == j) break;\n    vec3 dir = uLightingDirection[j];\n    float directionalLightWeighting = max(dot(vertexNormal, -dir), 0.0);\n    directionalLightFactor += uDirectionalColor[j] * directionalLightWeighting;\n  }\n\n\n  vec3 pointLightFactor = vec3(0.0);\n\n  for (int k = 0; k < 8; k++) {\n    if (uPointLightCount == k) break;\n    vec3 loc = (uViewMatrix * vec4(uPointLightLocation[k], 1.0)).xyz;\n    vec3 lightDirection = normalize(loc - mvPosition.xyz);\n\n    float directionalLightWeighting = max(dot(vertexNormal, lightDirection), 0.0);\n\n    float specularLightWeighting = 0.0;\n    if (uSpecular ){\n      vec3 reflectionDirection = reflect(-lightDirection, vertexNormal);\n      specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), shininess);\n    }\n\n    pointLightFactor += uPointLightColor[k] * (specularFactor * specularLightWeighting\n      + directionalLightWeighting * diffuseFactor);\n  }\n\n  vLightWeighting =  ambientLightFactor + directionalLightFactor + pointLightFactor;\n}\n",lightTextureFrag:"precision mediump float;\n\nuniform vec4 uMaterialColor;\nuniform sampler2D uSampler;\nuniform bool isTexture;\nuniform bool uUseLighting;\n\nvarying vec3 vLightWeighting;\nvarying highp vec2 vVertTexCoord;\n\nvoid main(void) {\n  gl_FragColor = isTexture ? texture2D(uSampler, vVertTexCoord) : uMaterialColor;\n  if (uUseLighting)\n    gl_FragColor.rgb *= vLightWeighting;\n}",phongVert:"precision mediump float;\n\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform vec3 uAmbientColor[8];\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\nuniform int uAmbientLightCount;\n\nvarying vec3 vNormal;\nvarying vec2 vTexCoord;\nvarying vec3 vViewPosition;\nvarying vec3 vAmbientColor;\n\nvoid main(void){\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n\n  // Pass varyings to fragment shader\n  vViewPosition = viewModelPosition.xyz;\n  gl_Position = uProjectionMatrix * viewModelPosition;  \n\n  vNormal = normalize(uNormalMatrix * normalize(aNormal));\n  vTexCoord = aTexCoord;\n\n  vAmbientColor = vec3(0.0);\n  for (int i = 0; i < 8; i++) {\n    if (uAmbientLightCount == i) break;\n    vAmbientColor += uAmbientColor[i];\n  }\n}\n",phongFrag:"precision mediump float;\n\n//uniform mat4 uModelViewMatrix;\nuniform mat4 uViewMatrix;\n\nuniform vec4 uMaterialColor;\nuniform sampler2D uSampler;\nuniform bool isTexture;\nuniform bool uUseLighting;\n\nuniform vec3 uLightingDirection[8];\nuniform vec3 uDirectionalColor[8];\nuniform vec3 uPointLightLocation[8];\nuniform vec3 uPointLightColor[8];\nuniform bool uSpecular;\n\nuniform int uDirectionalLightCount;\nuniform int uPointLightCount;\n\nvarying vec3 vNormal;\nvarying vec2 vTexCoord;\nvarying vec3 vViewPosition;\nvarying vec3 vAmbientColor;\n\nvec3 V;\nvec3 N;\n\nconst float shininess = 32.0;\nconst float specularFactor = 2.0;\nconst float diffuseFactor = 0.73;\n\nstruct LightResult {\n\tfloat specular;\n\tfloat diffuse;\n};\n\nfloat phongSpecular(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n\n  vec3 R = normalize(reflect(-lightDirection, surfaceNormal));  \n  return pow(max(0.0, dot(R, viewDirection)), shininess);\n}\n\nfloat lambertDiffuse(\n  vec3 lightDirection,\n  vec3 surfaceNormal) {\n  return max(0.0, dot(-lightDirection, surfaceNormal));\n}\n\nLightResult light(vec3 lightVector) {\n\n  vec3 L = normalize(lightVector);\n\n  //compute our diffuse & specular terms\n  LightResult lr;\n  if (uSpecular)\n    lr.specular = phongSpecular(L, V, N, shininess);\n  lr.diffuse = lambertDiffuse(L, N);\n  return lr;\n}\n\nvoid main(void) {\n\n  V = normalize(vViewPosition);\n  N = vNormal;\n\n  vec3 diffuse = vec3(0.0);\n  float specular = 0.0;\n\n  for (int j = 0; j < 8; j++) {\n    if (uDirectionalLightCount == j) break;\n\n    LightResult result = light(uLightingDirection[j]);\n    diffuse += result.diffuse * uDirectionalColor[j];\n    specular += result.specular;\n  }\n\n  for (int k = 0; k < 8; k++) {\n    if (uPointLightCount == k) break;\n\n    vec3 lightPosition = (uViewMatrix * vec4(uPointLightLocation[k], 1.0)).xyz;\n    vec3 lightVector = vViewPosition - lightPosition;\n\t\n    //calculate attenuation\n    float lightDistance = length(lightVector);\n    float falloff = 500.0 / (lightDistance + 500.0);\n\n    LightResult result = light(lightVector);\n    diffuse += result.diffuse * falloff * uPointLightColor[k];\n    specular += result.specular * falloff;\n  }\n\n  gl_FragColor = isTexture ? texture2D(uSampler, vTexCoord) : uMaterialColor;\n  gl_FragColor.rgb = gl_FragColor.rgb * (diffuse * diffuseFactor + vAmbientColor) + specular * specularFactor;\n}",fontVert:"precision mediump float;\n\nattribute vec3 aPosition;\nattribute vec2 aTexCoord;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nuniform vec4 uGlyphRect;\nuniform float uGlyphOffset;\n\nvarying vec2 vTexCoord;\nvarying float w;\n\nvoid main() {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n\n  // scale by the size of the glyph's rectangle\n  positionVec4.xy *= uGlyphRect.zw - uGlyphRect.xy;\n\n  // move to the corner of the glyph\n  positionVec4.xy += uGlyphRect.xy;\n\n  // move to the letter's line offset\n  positionVec4.x += uGlyphOffset;\n  \n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vTexCoord = aTexCoord;\n  w = gl_Position.w;\n}\n",fontFrag:"#extension GL_OES_standard_derivatives : enable\nprecision mediump float;\n\n#if 0\n  // simulate integer math using floats\n\t#define int float\n\t#define ivec2 vec2\n\t#define INT(x) float(x)\n\n\tint ifloor(float v) { return floor(v); }\n\tivec2 ifloor(vec2 v) { return floor(v); }\n\n#else\n  // use native integer math\n\tprecision mediump int;\n\t#define INT(x) x\n\n\tint ifloor(float v) { return int(v); }\n\tint ifloor(int v) { return v; }\n\tivec2 ifloor(vec2 v) { return ivec2(v); }\n\n#endif\n\nuniform sampler2D uSamplerStrokes;\nuniform sampler2D uSamplerRowStrokes;\nuniform sampler2D uSamplerRows;\nuniform sampler2D uSamplerColStrokes;\nuniform sampler2D uSamplerCols;\n\nuniform ivec2 uStrokeImageSize;\nuniform ivec2 uCellsImageSize;\nuniform ivec2 uGridImageSize;\n\nuniform ivec2 uGridOffset;\nuniform ivec2 uGridSize;\nuniform vec4 uMaterialColor;\n\nvarying vec2 vTexCoord;\n\n// some helper functions\nint round(float v) { return ifloor(v + 0.5); }\nivec2 round(vec2 v) { return ifloor(v + 0.5); }\nfloat saturate(float v) { return clamp(v, 0.0, 1.0); }\nvec2 saturate(vec2 v) { return clamp(v, 0.0, 1.0); }\n\nint mul(float v1, int v2) {\n  return ifloor(v1 * float(v2));\n}\n\nivec2 mul(vec2 v1, ivec2 v2) {\n  return ifloor(v1 * vec2(v2) + 0.5);\n}\n\n// unpack a 16-bit integer from a float vec2\nint getInt16(vec2 v) {\n  ivec2 iv = round(v * 255.0);\n  return iv.x * INT(128) + iv.y;\n}\n\nvec2 pixelScale;\nvec2 coverage = vec2(0.0);\nvec2 weight = vec2(0.5);\nconst float minDistance = 1.0/8192.0;\nconst float hardness = 1.05; // amount of antialias\n\n// the maximum number of curves in a glyph\nconst int N = INT(250);\n\n// retrieves an indexed pixel from a sampler\nvec4 getTexel(sampler2D sampler, int pos, ivec2 size) {\n  int width = size.x;\n  int y = ifloor(pos / width);\n  int x = pos - y * width;  // pos % width\n\n  return texture2D(sampler, (vec2(x, y) + 0.5) / vec2(size));\n}\n\nvoid calulateCrossings(vec2 p0, vec2 p1, vec2 p2, out vec2 C1, out vec2 C2) {\n\n  // get the coefficients of the quadratic in t\n  vec2 a = p0 - p1 * 2.0 + p2;\n  vec2 b = p0 - p1;\n  vec2 c = p0 - vTexCoord;\n\n  // found out which values of 't' it crosses the axes\n  vec2 surd = sqrt(max(vec2(0.0), b * b - a * c));\n  vec2 t1 = ((b - surd) / a).yx;\n  vec2 t2 = ((b + surd) / a).yx;\n\n  // approximate straight lines to avoid rounding errors\n  if (abs(a.y) < 0.001)\n    t1.x = t2.x = c.y / (2.0 * b.y);\n\n  if (abs(a.x) < 0.001)\n    t1.y = t2.y = c.x / (2.0 * b.x);\n\n  // plug into quadratic formula to find the corrdinates of the crossings\n  C1 = ((a * t1 - b * 2.0) * t1 + c) * pixelScale;\n  C2 = ((a * t2 - b * 2.0) * t2 + c) * pixelScale;\n}\n\nvoid coverageX(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  // determine on which side of the x-axis the points lie\n  bool y0 = p0.y > vTexCoord.y;\n  bool y1 = p1.y > vTexCoord.y;\n  bool y2 = p2.y > vTexCoord.y;\n\n  // could web be under the curve (after t1)?\n  if (y1 ? !y2 : y0) {\n    // add the coverage for t1\n    coverage.x += saturate(C1.x + 0.5);\n    // calculate the anti-aliasing for t1\n    weight.x = min(weight.x, abs(C1.x));\n  }\n\n  // are we outside the curve (after t2)?\n  if (y1 ? !y0 : y2) {\n    // subtract the coverage for t2\n    coverage.x -= saturate(C2.x + 0.5);\n    // calculate the anti-aliasing for t2\n    weight.x = min(weight.x, abs(C2.x));\n  }\n}\n\n// this is essentially the same as coverageX, but with the axes swapped\nvoid coverageY(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  bool x0 = p0.x > vTexCoord.x;\n  bool x1 = p1.x > vTexCoord.x;\n  bool x2 = p2.x > vTexCoord.x;\n\n  if (x1 ? !x2 : x0) {\n    coverage.y -= saturate(C1.y + 0.5);\n    weight.y = min(weight.y, abs(C1.y));\n  }\n\n  if (x1 ? !x0 : x2) {\n    coverage.y += saturate(C2.y + 0.5);\n    weight.y = min(weight.y, abs(C2.y));\n  }\n}\n\nvoid main() {\n\n  // calculate the pixel scale based on screen-coordinates\n  pixelScale = hardness / fwidth(vTexCoord);\n\n  // which grid cell is this pixel in?\n  ivec2 gridCoord = ifloor(vTexCoord * vec2(uGridSize));\n\n  // intersect curves in this row\n  {\n    // the index into the row info bitmap\n    int rowIndex = gridCoord.y + uGridOffset.y;\n    // fetch the info texel\n    vec4 rowInfo = getTexel(uSamplerRows, rowIndex, uGridImageSize);\n    // unpack the rowInfo\n    int rowStrokeIndex = getInt16(rowInfo.xy);\n    int rowStrokeCount = getInt16(rowInfo.zw);\n\n    for (int iRowStroke = INT(0); iRowStroke < N; iRowStroke++) {\n      if (iRowStroke >= rowStrokeCount)\n        break;\n\n      // each stroke is made up of 3 points: the start and control point\n      // and the start of the next curve.\n      // fetch the indices of this pair of strokes:\n      vec4 strokeIndices = getTexel(uSamplerRowStrokes, rowStrokeIndex++, uCellsImageSize);\n\n      // unpack the stroke index\n      int strokePos = getInt16(strokeIndices.xy);\n\n      // fetch the two strokes\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n\n      // calculate the coverage\n      coverageX(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  // intersect curves in this column\n  {\n    int colIndex = gridCoord.x + uGridOffset.x;\n    vec4 colInfo = getTexel(uSamplerCols, colIndex, uGridImageSize);\n    int colStrokeIndex = getInt16(colInfo.xy);\n    int colStrokeCount = getInt16(colInfo.zw);\n    \n    for (int iColStroke = INT(0); iColStroke < N; iColStroke++) {\n      if (iColStroke >= colStrokeCount)\n        break;\n\n      vec4 strokeIndices = getTexel(uSamplerColStrokes, colStrokeIndex++, uCellsImageSize);\n\n      int strokePos = getInt16(strokeIndices.xy);\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n      coverageY(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  weight = saturate(1.0 - weight * 2.0);\n  float distance = max(weight.x + weight.y, minDistance); // manhattan approx.\n  float antialias = abs(dot(coverage, weight) / distance);\n  float cover = min(abs(coverage.x), abs(coverage.y));\n  gl_FragColor = uMaterialColor;\n  gl_FragColor.a *= saturate(max(antialias, cover));\n}",lineVert:"/*\n  Part of the Processing project - http://processing.org\n  Copyright (c) 2012-15 The Processing Foundation\n  Copyright (c) 2004-12 Ben Fry and Casey Reas\n  Copyright (c) 2001-04 Massachusetts Institute of Technology\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation, version 2.1.\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#define PROCESSING_LINE_SHADER\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uStrokeWeight;\n\nuniform vec4 uViewport;\n\n// using a scale <1 moves the lines towards the camera\n// in order to prevent popping effects due to half of\n// the line disappearing behind the geometry faces.\nvec3 scale = vec3(0.9995);\n\nattribute vec4 aPosition;\nattribute vec4 aDirection;\n  \nvoid main() {\n  vec4 posp = uModelViewMatrix * aPosition;\n  vec4 posq = uModelViewMatrix * (aPosition + vec4(aDirection.xyz, 0));\n\n  // Moving vertices slightly toward the camera\n  // to avoid depth-fighting with the fill triangles.\n  // Discussed here:\n  // http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=252848  \n  posp.xyz = posp.xyz * scale;\n  posq.xyz = posq.xyz * scale;\n\n  vec4 p = uProjectionMatrix * posp;\n  vec4 q = uProjectionMatrix * posq;\n\n  // formula to convert from clip space (range -1..1) to screen space (range 0..[width or height])\n  // screen_p = (p.xy/p.w + <1,1>) * 0.5 * uViewport.zw\n\n  // prevent division by W by transforming the tangent formula (div by 0 causes\n  // the line to disappear, see https://github.com/processing/processing/issues/5183)\n  // t = screen_q - screen_p\n  //\n  // tangent is normalized and we don't care which aDirection it points to (+-)\n  // t = +- normalize( screen_q - screen_p )\n  // t = +- normalize( (q.xy/q.w+<1,1>)*0.5*uViewport.zw - (p.xy/p.w+<1,1>)*0.5*uViewport.zw )\n  //\n  // extract common factor, <1,1> - <1,1> cancels out\n  // t = +- normalize( (q.xy/q.w - p.xy/p.w) * 0.5 * uViewport.zw )\n  //\n  // convert to common divisor\n  // t = +- normalize( ((q.xy*p.w - p.xy*q.w) / (p.w*q.w)) * 0.5 * uViewport.zw )\n  //\n  // remove the common scalar divisor/factor, not needed due to normalize and +-\n  // (keep uViewport - can't remove because it has different components for x and y\n  //  and corrects for aspect ratio, see https://github.com/processing/processing/issues/5181)\n  // t = +- normalize( (q.xy*p.w - p.xy*q.w) * uViewport.zw )\n\n  vec2 tangent = normalize((q.xy*p.w - p.xy*q.w) * uViewport.zw);\n\n  // flip tangent to normal (it's already normalized)\n  vec2 normal = vec2(-tangent.y, tangent.x);\n\n  float thickness = aDirection.w * uStrokeWeight;\n  vec2 offset = normal * thickness / 2.0;\n\n  // Perspective ---\n  // convert from world to clip by multiplying with projection scaling factor\n  // to get the right thickness (see https://github.com/processing/processing/issues/5182)\n  // invert Y, projections in Processing invert Y\n  vec2 perspScale = (uProjectionMatrix * vec4(1, -1, 0, 0)).xy;\n\n  // No Perspective ---\n  // multiply by W (to cancel out division by W later in the pipeline) and\n  // convert from screen to clip (derived from clip to screen above)\n  vec2 noPerspScale = p.w / (0.5 * uViewport.zw);\n\n  //gl_Position.xy = p.xy + offset.xy * mix(noPerspScale, perspScale, float(perspective > 0));\n  gl_Position.xy = p.xy + offset.xy * perspScale;\n  gl_Position.zw = p.zw;\n}\n",lineFrag:"precision mediump float;\nprecision mediump int;\n\nuniform vec4 uMaterialColor;\n\nvoid main() {\n  gl_FragColor = uMaterialColor;\n}",pointVert:"attribute vec3 aPosition;\nuniform float uPointSize;\nvarying float vStrokeWeight;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nvoid main() {\n\tvec4 positionVec4 =  vec4(aPosition, 1.0);\n\tgl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n\tgl_PointSize = uPointSize;\n\tvStrokeWeight = uPointSize;\n}",pointFrag:"precision mediump float;\nprecision mediump int;\nuniform vec4 uMaterialColor;\nvarying float vStrokeWeight;\n\nvoid main(){\n\tfloat mask = 0.0;\n\n\t// make a circular mask using the gl_PointCoord (goes from 0 - 1 on a point)\n    // might be able to get a nicer edge on big strokeweights with smoothstep but slightly less performant\n\n\tmask = step(0.98, length(gl_PointCoord * 2.0 - 1.0));\n\n\t// if strokeWeight is 1 or less lets just draw a square\n\t// this prevents weird artifacting from carving circles when our points are really small\n\t// if strokeWeight is larger than 1, we just use it as is\n\n\tmask = mix(0.0, mask, clamp(floor(vStrokeWeight - 0.5),0.0,1.0));\n\n\t// throw away the borders of the mask\n    // otherwise we get weird alpha blending issues\n\n\tif(mask > 0.98){\n      discard;\n  \t}\n\n  \tgl_FragColor = vec4(uMaterialColor.rgb * (1.0 - mask), uMaterialColor.a) ;\n}"};r.RendererGL=function(t,e,i,n){return r.Renderer.call(this,t,e,i),this.attributes={},n=n||{},this.attributes.alpha=void 0===n.alpha||n.alpha,this.attributes.depth=void 0===n.depth||n.depth,this.attributes.stencil=void 0===n.stencil||n.stencil,this.attributes.antialias=void 0!==n.antialias&&n.antialias,this.attributes.premultipliedAlpha=void 0!==n.premultipliedAlpha&&n.premultipliedAlpha,this.attributes.preserveDrawingBuffer=void 0===n.preserveDrawingBuffer||n.preserveDrawingBuffer,this.attributes.perPixelLighting=void 0!==n.perPixelLighting&&n.perPixelLighting,this._initContext(),this.isP3D=!0,this.GL=this.drawingContext,this.ambientLightColors=[],this.directionalLightDirections=[],this.directionalLightColors=[],this.pointLightPositions=[],this.pointLightColors=[],this.uMVMatrix=new r.Matrix,this.uPMatrix=new r.Matrix,this.uNMatrix=new r.Matrix("mat3"),this._curCamera=new r.Camera(this),this._curCamera._computeCameraDefaultSettings(),this._curCamera._setDefaultCamera(),this.gHash={},this._defaultLightShader=void 0,this._defaultImmediateModeShader=void 0,this._defaultNormalShader=void 0,this._defaultColorShader=void 0,this._defaultPointShader=void 0,this.curFillShader=void 0,this.curStrokeShader=void 0,this.curPointShader=void 0,this._useColorShader(),this.setStrokeShader(this._getLineShader()),this._usePointShader(),this._pointVertexBuffer=this.GL.createBuffer(),this.isImmediateDrawing=!1,this.immediateMode={},this.fill(255,255,255,255),this.pointSize=5,this.strokeWeight(1),this.stroke(0,0,0),this.textures=[],this._curveTightness=6,this._lookUpTableBezier=[],this._lookUpTableQuadratic=[],this._lutBezierDetail=0,this._lutQuadraticDetail=0,this._tessy=this._initTessy(),this.fontInfos={},this},r.RendererGL.prototype=Object.create(r.Renderer.prototype),r.RendererGL.prototype._initContext=function(){try{if(this.drawingContext=this.canvas.getContext("webgl",this.attributes)||this.canvas.getContext("experimental-webgl",this.attributes),null===this.drawingContext)throw new Error("Error creating webgl context");console.log("p5.RendererGL: enabled webgl context");var t=this.drawingContext;t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),this._viewport=this.drawingContext.getParameter(this.drawingContext.VIEWPORT)}catch(t){throw t}},r.RendererGL.prototype._resetContext=function(t,e,i){var n=this.width,o=this.height,s=this.canvas.id,a=this.canvas;a&&a.parentNode.removeChild(a),(a=document.createElement("canvas")).id=s,this._pInst._userNode?this._pInst._userNode.appendChild(a):document.body.appendChild(a),this._pInst.canvas=a;var h=new r.RendererGL(this._pInst.canvas,this._pInst,!0,t);this._pInst._setProperty("_renderer",h),h.resize(n,o),h._applyDefaults(),this._pInst._elements.push(h),"function"==typeof i&&setTimeout(function(){i.apply(window._renderer,e)},0)},r.prototype.setAttributes=function(t,e){var i;this._assert3d("setAttributes"),void 0!==e?(i={})[t]=e:t instanceof Object&&(i=t),this.push(),this._renderer._resetContext(i),this.pop()},r.RendererGL.prototype._update=function(){this.uMVMatrix.set(this._curCamera.cameraMatrix.mat4[0],this._curCamera.cameraMatrix.mat4[1],this._curCamera.cameraMatrix.mat4[2],this._curCamera.cameraMatrix.mat4[3],this._curCamera.cameraMatrix.mat4[4],this._curCamera.cameraMatrix.mat4[5],this._curCamera.cameraMatrix.mat4[6],this._curCamera.cameraMatrix.mat4[7],this._curCamera.cameraMatrix.mat4[8],this._curCamera.cameraMatrix.mat4[9],this._curCamera.cameraMatrix.mat4[10],this._curCamera.cameraMatrix.mat4[11],this._curCamera.cameraMatrix.mat4[12],this._curCamera.cameraMatrix.mat4[13],this._curCamera.cameraMatrix.mat4[14],this._curCamera.cameraMatrix.mat4[15]),this.ambientLightColors.length=0,this.directionalLightDirections.length=0,this.directionalLightColors.length=0,this.pointLightPositions.length=0,this.pointLightColors.length=0},r.RendererGL.prototype.background=function(){var t=this._pInst.color.apply(this._pInst,arguments),e=t.levels[0]/255,i=t.levels[1]/255,r=t.levels[2]/255,n=t.levels[3]/255;this.GL.clearColor(e,i,r,n),this.GL.depthMask(!0),this.GL.clear(this.GL.COLOR_BUFFER_BIT|this.GL.DEPTH_BUFFER_BIT)},r.RendererGL.prototype.fill=function(t,e,i,o){var s=r.prototype.color.apply(this._pInst,arguments);this.curFillColor=s._array,this.isImmediateDrawing?this.setFillShader(this._getImmediateModeShader()):this.setFillShader(this._getColorShader()),this.drawMode=n.FILL,this.curFillShader.setUniform("uMaterialColor",this.curFillColor)},r.RendererGL.prototype.stroke=function(t,e,i,n){arguments[3]=255;var o=r.prototype.color.apply(this._pInst,arguments);this.curStrokeColor=o._array,this.curStrokeShader.setUniform("uMaterialColor",this.curStrokeColor),this.curPointShader.setUniform("uMaterialColor",o._array)},r.RendererGL.prototype.strokeWeight=function(t){this.curStrokeWeight!==t&&(this.pointSize=t,this.curStrokeWeight=t,this.curStrokeShader.setUniform("uStrokeWeight",t),this.curPointShader.setUniform("uPointSize",t))},r.RendererGL.prototype.get=function(t,e,i,n){return r.Renderer2D.prototype.get.apply(this,[t,e,i,n])},r.RendererGL.prototype.loadPixels=function(){if(!0===this.attributes.preserveDrawingBuffer){var t=this._pInst._pixelDensity,e=this.width,i=this.height;e*=t,i*=t,void 0===this.pixels&&(this.pixels=new Uint8Array(this.GL.drawingBufferWidth*this.GL.drawingBufferHeight*4)),this.GL.readPixels(0,0,e,i,this.GL.RGBA,this.GL.UNSIGNED_BYTE,this.pixels),this._pInst._setProperty("pixels",this.pixels)}else console.log("loadPixels only works in WebGL when preserveDrawingBuffer is true.")},r.RendererGL.prototype.geometryInHash=function(t){return void 0!==this.gHash[t]},r.RendererGL.prototype.resize=function(t,e){r.Renderer.prototype.resize.call(this,t,e),this.GL.viewport(0,0,this.GL.drawingBufferWidth,this.GL.drawingBufferHeight),this._viewport=this.GL.getParameter(this.GL.VIEWPORT),this._curCamera._resize(),void 0!==this.pixels&&(this.pixels=new Uint8Array(this.GL.drawingBufferWidth*this.GL.drawingBufferHeight*4))},r.RendererGL.prototype.clear=function(){var t=arguments[0]||0,e=arguments[1]||0,i=arguments[2]||0,r=arguments[3]||0;this.GL.clearColor(t,e,i,r),this.GL.clear(this.GL.COLOR_BUFFER_BIT|this.GL.DEPTH_BUFFER_BIT)},r.RendererGL.prototype.translate=function(t,e,i){return t instanceof r.Vector&&(i=t.z,e=t.y,t=t.x),this.uMVMatrix.translate([t,e,i]),this},r.RendererGL.prototype.scale=function(t,e,i){return this.uMVMatrix.scale(t,e,i),this},r.RendererGL.prototype.rotate=function(t,e){return void 0===e?this.rotateZ(t):(arguments[0]=this._pInst._fromRadians(t),r.Matrix.prototype.rotate.apply(this.uMVMatrix,arguments),this)},r.RendererGL.prototype.rotateX=function(t){return this.rotate(t,1,0,0),this},r.RendererGL.prototype.rotateY=function(t){return this.rotate(t,0,1,0),this},r.RendererGL.prototype.rotateZ=function(t){return this.rotate(t,0,0,1),this},r.RendererGL.prototype.push=function(){var t=r.Renderer.prototype.push.apply(this),e=t.properties;return e.uMVMatrix=this.uMVMatrix.copy(),e.uPMatrix=this.uPMatrix.copy(),e._curCamera=this._curCamera,this._curCamera=this._curCamera.copy(),t},r.RendererGL.prototype.resetMatrix=function(){return this.uMVMatrix=r.Matrix.identity(this._pInst),this},r.RendererGL.prototype.setFillShader=function(t){return this.curFillShader!==t&&(this.curFillShader=t,this.curFillShader.init()),this.curFillShader},r.RendererGL.prototype.setPointShader=function(t){return this.curPointShader!==t&&(this.curPointShader=t,this.curPointShader.init()),this.curPointShader},r.RendererGL.prototype.setStrokeShader=function(t){return this.curStrokeShader!==t&&(this.curStrokeShader=t,this.curStrokeShader.init()),this.curStrokeShader},r.RendererGL.prototype._useLightShader=function(){return this.curFillShader&&this.curFillShader.isLightShader()||this.setFillShader(this._getLightShader()),this.curFillShader},r.RendererGL.prototype._useColorShader=function(){return this.curFillShader&&this.curFillShader!==this._defaultImmediateModeShader||this.setFillShader(this._getColorShader()),this.curFillShader},r.RendererGL.prototype._usePointShader=function(){return this.curPointShader||this.setPointShader(this._getPointShader()),this.curPointShader},r.RendererGL.prototype._useImmediateModeShader=function(){return this.curFillShader&&this.curFillShader!==this._defaultColorShader||this.setFillShader(this._getImmediateModeShader()),this.curFillShader},r.RendererGL.prototype._getLightShader=function(){return this._defaultLightShader||(this.attributes.perPixelLighting?this._defaultLightShader=new r.Shader(this,s.phongVert,s.phongFrag):this._defaultLightShader=new r.Shader(this,s.lightVert,s.lightTextureFrag)),this._defaultLightShader},r.RendererGL.prototype._getImmediateModeShader=function(){return this._defaultImmediateModeShader||(this._defaultImmediateModeShader=new r.Shader(this,s.immediateVert,s.vertexColorFrag)),this._defaultImmediateModeShader},r.RendererGL.prototype._getNormalShader=function(){return this._defaultNormalShader||(this._defaultNormalShader=new r.Shader(this,s.normalVert,s.normalFrag)),this._defaultNormalShader},r.RendererGL.prototype._getColorShader=function(){return this._defaultColorShader||(this._defaultColorShader=new r.Shader(this,s.normalVert,s.basicFrag)),this._defaultColorShader},r.RendererGL.prototype._getPointShader=function(){return this._defaultPointShader||(this._defaultPointShader=new r.Shader(this,s.pointVert,s.pointFrag)),this._defaultPointShader},r.RendererGL.prototype._getLineShader=function(){return this._defaultLineShader||(this._defaultLineShader=new r.Shader(this,s.lineVert,s.lineFrag)),this._defaultLineShader},r.RendererGL.prototype._getFontShader=function(){return this._defaultFontShader||(this.GL.getExtension("OES_standard_derivatives"),this._defaultFontShader=new r.Shader(this,s.fontVert,s.fontFrag)),this._defaultFontShader},r.RendererGL.prototype._getEmptyTexture=function(){if(!this._emptyTexture){var t=new r.Image(1,1);t.set(0,0,255),this._emptyTexture=new r.Texture(this,t)}return this._emptyTexture},r.RendererGL.prototype.getTexture=function(t){for(var e=this.textures,i=0;i<e.length;++i){var n=e[i];if(n.src===t)return n}var o=new r.Texture(this,t);return this.textures.push(o),o},r.RendererGL.prototype._bindBuffer=function(t,e,i,r,n){if(this.GL.bindBuffer(e,t),void 0!==i){var o=new r(i);this.GL.bufferData(e,o,n)}},r.RendererGL.prototype.smooth=function(){!1===this.attributes.antialias&&this._pInst.setAttributes("antialias",!0)},r.RendererGL.prototype.noSmooth=function(){!0===this.attributes.antialias&&this._pInst.setAttributes("antialias",!1)},r.RendererGL.prototype._flatten=function(t){if(0===t.length)return[];if(t.length>2e4){var e,i=Object.prototype.toString,r=[],n=t.slice();e=n.pop();do{"[object Array]"===i.call(e)?n.push.apply(n,e):r.push(e)}while(n.length&&void 0!==(e=n.pop()));return r.reverse(),r}return[].concat.apply([],t)},r.RendererGL.prototype._vToNArray=function(t){return this._flatten(t.map(function(t){return[t.x,t.y,t.z]}))},r.prototype._assert3d=function(t){if(!this._renderer.isP3D)throw new Error(t+"() is only supported in WEBGL mode. If you'd like to use 3D graphics and WebGL, see  https://p5js.org/examples/form-3d-primitives.html for more information.")},r.RendererGL.prototype._initTessy=function(){var t=new o.GluTesselator;return t.gluTessCallback(o.gluEnum.GLU_TESS_VERTEX_DATA,function(t,e){e[e.length]=t[0],e[e.length]=t[1],e[e.length]=t[2]}),t.gluTessCallback(o.gluEnum.GLU_TESS_BEGIN,function(t){t!==o.primitiveType.GL_TRIANGLES&&console.log("expected TRIANGLES but got type: "+t)}),t.gluTessCallback(o.gluEnum.GLU_TESS_ERROR,function(t){console.log("error callback"),console.log("error number: "+t)}),t.gluTessCallback(o.gluEnum.GLU_TESS_COMBINE,function(t,e,i){return[t[0],t[1],t[2]]}),t.gluTessCallback(o.gluEnum.GLU_TESS_EDGE_FLAG,function(t){}),t},r.RendererGL.prototype._triangulate=function(t){this._tessy.gluTessNormal(0,0,1);var e=[];this._tessy.gluTessBeginPolygon(e);for(var i=0;i<t.length;i++){this._tessy.gluTessBeginContour();for(var r=t[i],n=0;n<r.length;n+=3){var o=[r[n],r[n+1],r[n+2]];this._tessy.gluTessVertex(o,o)}this._tessy.gluTessEndContour()}return this._tessy.gluTessEndPolygon(),e},r.RendererGL.prototype._bezierCoefficients=function(t){var e=t*t,i=e*t,r=1-t,n=r*r;return[n*r,3*n*t,3*r*e,i]},r.RendererGL.prototype._quadraticCoefficients=function(t){var e=t*t,i=1-t;return[i*i,2*i*t,e]},r.RendererGL.prototype._bezierToCatmull=function(t){return[t[1],t[1]+(t[2]-t[0])/this._curveTightness,t[2]-(t[3]-t[1])/this._curveTightness,t[2]]},e.exports=r.RendererGL},{"../core/constants":18,"../core/main":24,"../core/p5.Renderer":27,"./p5.Camera":69,"./p5.Matrix":71,"./p5.Shader":75,libtess:9}],75:[function(t,e,i){"use strict";var r=t("../core/main");r.Shader=function(t,e,i){this._renderer=t,this._vertSrc=e,this._fragSrc=i,this._vertShader=-1,this._fragShader=-1,this._glProgram=0,this._loadedAttributes=!1,this.attributes={},this._loadedUniforms=!1,this.uniforms={},this._bound=!1,this.samplers=[]},r.Shader.prototype.init=function(){if(0===this._glProgram){var t=this._renderer.GL;if(this._vertShader=t.createShader(t.VERTEX_SHADER),t.shaderSource(this._vertShader,this._vertSrc),t.compileShader(this._vertShader),!t.getShaderParameter(this._vertShader,t.COMPILE_STATUS))return console.error("Yikes! An error occurred compiling the vertex shader:"+t.getShaderInfoLog(this._vertShader)),null;if(this._fragShader=t.createShader(t.FRAGMENT_SHADER),t.shaderSource(this._fragShader,this._fragSrc),t.compileShader(this._fragShader),!t.getShaderParameter(this._fragShader,t.COMPILE_STATUS))return console.error("Darn! An error occurred compiling the fragment shader:"+t.getShaderInfoLog(this._fragShader)),null;this._glProgram=t.createProgram(),t.attachShader(this._glProgram,this._vertShader),t.attachShader(this._glProgram,this._fragShader),t.linkProgram(this._glProgram),t.getProgramParameter(this._glProgram,t.LINK_STATUS)||console.error("Snap! Error linking shader program: "+t.getProgramInfoLog(this._glProgram)),this._loadAttributes(),this._loadUniforms()}return this},r.Shader.prototype._loadAttributes=function(){if(!this._loadedAttributes){this.attributes={};for(var t=this._renderer.GL,e=t.getProgramParameter(this._glProgram,t.ACTIVE_ATTRIBUTES),i=0;i<e;++i){var r=t.getActiveAttrib(this._glProgram,i),n=r.name,o=t.getAttribLocation(this._glProgram,n),s={};s.name=n,s.location=o,s.type=r.type,s.size=r.size,this.attributes[n]=s}this._loadedAttributes=!0}},r.Shader.prototype._loadUniforms=function(){if(!this._loadedUniforms){for(var t=this._renderer.GL,e=t.getProgramParameter(this._glProgram,t.ACTIVE_UNIFORMS),i=0,r=0;r<e;++r){var n=t.getActiveUniform(this._glProgram,r),o={};o.location=t.getUniformLocation(this._glProgram,n.name),o.size=n.size;var s=n.name;n.size>1&&(s=s.substring(0,s.indexOf("[0]"))),o.name=s,o.type=n.type,o.type===t.SAMPLER_2D&&(o.samplerIndex=i,i++,this.samplers.push(o)),this.uniforms[s]=o}this._loadedUniforms=!0}},r.Shader.prototype.compile=function(){},r.Shader.prototype.bindShader=function(){this.init(),this._bound||(this.useProgram(),this._bound=!0,this.bindTextures(),this._setMatrixUniforms(),this===this._renderer.curStrokeShader&&this._setViewportUniform())},r.Shader.prototype.unbindShader=function(){return this._bound&&(this.unbindTextures(),this._bound=!1),this},r.Shader.prototype.bindTextures=function(){for(var t=this._renderer.GL,e=0;e<this.samplers.length;e++){var i=this.samplers[e],r=i.texture;void 0===r&&(r=this._renderer._getEmptyTexture()),t.activeTexture(t.TEXTURE0+i.samplerIndex),r.bindTexture(),r.update(),t.uniform1i(i.location,i.samplerIndex)}},r.Shader.prototype.updateTextures=function(){for(var t=0;t<this.samplers.length;t++){var e=this.samplers[t],i=e.texture;i&&i.update()}},r.Shader.prototype.unbindTextures=function(){},r.Shader.prototype._setMatrixUniforms=function(){this.setUniform("uProjectionMatrix",this._renderer.uPMatrix.mat4),this.setUniform("uModelViewMatrix",this._renderer.uMVMatrix.mat4),this.setUniform("uViewMatrix",this._renderer._curCamera.cameraMatrix.mat4),this===this._renderer.curFillShader&&(this._renderer.uNMatrix.inverseTranspose(this._renderer.uMVMatrix),this.setUniform("uNormalMatrix",this._renderer.uNMatrix.mat3))},r.Shader.prototype._setViewportUniform=function(){this.setUniform("uViewport",this._renderer._viewport)},r.Shader.prototype.useProgram=function(){return this._renderer.GL.useProgram(this._glProgram),this},r.Shader.prototype.setUniform=function(t,e){var i=this.uniforms[t];if(i){var r=i.location,n=this._renderer.GL;switch(this.useProgram(),i.type){case n.BOOL:!0===e?n.uniform1i(r,1):n.uniform1i(r,0);break;case n.INT:i.size>1?e.length&&n.uniform1iv(r,e):n.uniform1i(r,e);break;case n.FLOAT:i.size>1?e.length&&n.uniform1fv(r,e):n.uniform1f(r,e);break;case n.FLOAT_MAT3:n.uniformMatrix3fv(r,!1,e);break;case n.FLOAT_MAT4:n.uniformMatrix4fv(r,!1,e);break;case n.FLOAT_VEC2:i.size>1?e.length&&n.uniform2fv(r,e):n.uniform2f(r,e[0],e[1]);break;case n.FLOAT_VEC3:i.size>1?e.length&&n.uniform3fv(r,e):n.uniform3f(r,e[0],e[1],e[2]);break;case n.FLOAT_VEC4:i.size>1?e.length&&n.uniform4fv(r,e):n.uniform4f(r,e[0],e[1],e[2],e[3]);break;case n.INT_VEC2:i.size>1?e.length&&n.uniform2iv(r,e):n.uniform2i(r,e[0],e[1]);break;case n.INT_VEC3:i.size>1?e.length&&n.uniform3iv(r,e):n.uniform3i(r,e[0],e[1],e[2]);break;case n.INT_VEC4:i.size>1?e.length&&n.uniform4iv(r,e):n.uniform4i(r,e[0],e[1],e[2],e[3]);break;case n.SAMPLER_2D:n.activeTexture(n.TEXTURE0+i.samplerIndex),i.texture=this._renderer.getTexture(e),n.uniform1i(i.location,i.samplerIndex)}return this}},r.Shader.prototype.isLightShader=function(){return void 0!==this.uniforms.uUseLighting||void 0!==this.uniforms.uAmbientLightCount||void 0!==this.uniforms.uDirectionalLightCount||void 0!==this.uniforms.uPointLightCount||void 0!==this.uniforms.uAmbientColor||void 0!==this.uniforms.uDirectionalColor||void 0!==this.uniforms.uPointLightLocation||void 0!==this.uniforms.uPointLightColor||void 0!==this.uniforms.uLightingDirection||void 0!==this.uniforms.uSpecular},r.Shader.prototype.isTextureShader=function(){return this.samplerIndex>0},r.Shader.prototype.isColorShader=function(){return void 0!==this.attributes.aVertexColor||void 0!==this.uniforms.uMaterialColor},r.Shader.prototype.isTexLightShader=function(){return this.isLightShader()&&this.isTextureShader()},r.Shader.prototype.isStrokeShader=function(){return void 0!==this.uniforms.uStrokeWeight},r.Shader.prototype.enableAttrib=function(t,e,i,r,n,o){var s=this._renderer.GL;return-1!==t&&(s.enableVertexAttribArray(t),s.vertexAttribPointer(t,e,i,r,n,o)),this},e.exports=r.Shader},{"../core/main":24}],76:[function(t,e,i){"use strict";var r=t("../core/main"),n=t("../core/constants");r.Texture=function(t,e){this._renderer=t;var i=this._renderer.GL;this.src=e,this.glTex=void 0,this.glTarget=i.TEXTURE_2D,this.glFormat=i.RGBA,this.mipmaps=!1,this.glMinFilter=i.LINEAR,this.glMagFilter=i.LINEAR,this.glWrapS=i.CLAMP_TO_EDGE,this.glWrapT=i.CLAMP_TO_EDGE,this.isSrcMediaElement=void 0!==r.MediaElement&&e instanceof r.MediaElement,this._videoPrevUpdateTime=0,this.isSrcHTMLElement=void 0!==r.Element&&e instanceof r.Element&&!(e instanceof r.Graphics),this.isSrcP5Image=e instanceof r.Image,this.isSrcP5Graphics=e instanceof r.Graphics,this.isImageData="undefined"!=typeof ImageData&&e instanceof ImageData;var n=this._getTextureDataFromSource();return this.width=n.width,this.height=n.height,this.init(n),this},r.Texture.prototype._getTextureDataFromSource=function(){var t;return this.isSrcP5Image?t=this.src.canvas:this.isSrcMediaElement||this.isSrcP5Graphics||this.isSrcHTMLElement?t=this.src.elt:this.isImageData&&(t=this.src),t},r.Texture.prototype.init=function(t){var e=this._renderer.GL;if(this.glTex=e.createTexture(),this.bindTexture(),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,this.glMagFilter),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,this.glMinFilter),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,this.glWrapS),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,this.glWrapT),0===this.width||0===this.height||this.isSrcMediaElement&&!this.src.loadedmetadata){var i=new Uint8Array([1,1,1,1]);e.texImage2D(this.glTarget,0,e.RGBA,1,1,0,this.glFormat,e.UNSIGNED_BYTE,i)}else e.texImage2D(this.glTarget,0,this.glFormat,this.glFormat,e.UNSIGNED_BYTE,t)},r.Texture.prototype.update=function(){var t=this.src;if(0===t.width||0===t.height)return!1;var e=this._getTextureDataFromSource(),i=!1,r=this._renderer.GL;return e.width!==this.width||e.height!==this.height?(i=!0,this.width=e.width,this.height=e.height,this.isSrcP5Image?t.setModified(!1):(this.isSrcMediaElement||this.isSrcHTMLElement)&&t.setModified(!0)):this.isSrcP5Image?t.isModified()&&(i=!0,t.setModified(!1)):this.isSrcMediaElement?t.isModified()?(i=!0,t.setModified(!1)):t.loadedmetadata&&this._videoPrevUpdateTime!==t.time()&&(this._videoPrevUpdateTime=t.time(),i=!0):this.isImageData?t._dirty&&(t._dirty=!1,i=!0):i=!0,i&&(this.bindTexture(),r.texImage2D(this.glTarget,0,this.glFormat,this.glFormat,r.UNSIGNED_BYTE,e)),i},r.Texture.prototype.bindTexture=function(){return this._renderer.GL.bindTexture(this.glTarget,this.glTex),this},r.Texture.prototype.unbindTexture=function(){this._renderer.GL.bindTexture(this.glTarget,null)},r.Texture.prototype.setInterpolation=function(t,e){var i=this._renderer.GL;t===n.NEAREST?this.glMinFilter=i.NEAREST:this.glMinFilter=i.LINEAR,e===n.NEAREST?this.glMagFilter=i.NEAREST:this.glMagFilter=i.LINEAR,this.bindTexture(),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,this.glMinFilter),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,this.glMagFilter),this.unbindTexture()},r.Texture.prototype.setWrapMode=function(t,e){var i=this._renderer.GL,r=function(t){return 0==(t&t-1)},o=r(this.width),s=r(this.width);t===n.REPEAT?o&&s?this.glWrapS=i.REPEAT:(console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead"),this.glWrapS=i.CLAMP_TO_EDGE):t===n.MIRROR?o&&s?this.glWrapS=i.MIRRORED_REPEAT:(console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead"),this.glWrapS=i.CLAMP_TO_EDGE):this.glWrapS=i.CLAMP_TO_EDGE,e===n.REPEAT?o&&s?this.glWrapT=i.REPEAT:(console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead"),this.glWrapT=i.CLAMP_TO_EDGE):e===n.MIRROR?o&&s?this.glWrapT=i.MIRRORED_REPEAT:(console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead"),this.glWrapT=i.CLAMP_TO_EDGE):this.glWrapT=i.CLAMP_TO_EDGE,this.bindTexture(),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,this.glWrapS),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,this.glWrapT),this.unbindTexture()},e.exports=r.Texture},{"../core/constants":18,"../core/main":24}],77:[function(t,e,i){"use strict";function r(t,e){this.width=t,this.height=e,this.infos=[],this.findImage=function(t){var e=this.width*this.height;if(t>e)throw new Error("font is too complex to render in 3D");for(var i,r,n=this.infos.length-1;n>=0;--n){var o=this.infos[n];if(o.index+t<e){i=o,r=o.imageData;break}}if(!i){try{r=new ImageData(this.width,this.height)}catch(t){var s=document.getElementsByTagName("canvas")[0],a=!s;s||((s=document.createElement("canvas")).style.display="none",document.body.appendChild(s));var h=s.getContext("2d");h&&(r=h.createImageData(this.width,this.height)),a&&document.body.removeChild(s)}i={index:0,imageData:r},this.infos.push(i)}var l=i.index;return i.index+=t,r._dirty=!0,{imageData:r,index:l}}}function n(t,e,i,r,n){var o=t.imageData,s=o.data,a=4*t.index++;s[a++]=e,s[a++]=i,s[a++]=r,s[a++]=n}var o=t("../core/main"),s=t("../core/constants");t("./p5.Shader"),t("./p5.RendererGL"),o.RendererGL.prototype._applyTextProperties=function(){},o.RendererGL.prototype.textWidth=function(t){return this._isOpenType()?this._textFont._textWidth(t,this._textSize):0};var a=9,h=a,l=Math.sqrt(3),u=function(t){this.font=t,this.strokeImageInfos=new r(64,64),this.colDimImageInfos=new r(64,64),this.rowDimImageInfos=new r(64,64),this.colCellImageInfos=new r(64,64),this.rowCellImageInfos=new r(64,64),this.glyphInfos={},this.getGlyphInfo=function(t){function e(t,e,i){function r(t,e,i){for(var r=t.length;r-- >0;){var n=t[r];e>n&&(e=n),i<n&&(i=n)}return{min:e,max:i}}var n=b.length;b.push(i);for(var o=r(t,1,0),s=Math.max(Math.floor(o.min*a),0),l=Math.min(Math.ceil(o.max*a),a),u=s;u<l;++u)x[u].push(n);for(var c=r(e,1,0),p=Math.max(Math.floor(c.min*h),0),d=Math.min(Math.ceil(c.max*h),h),f=p;f<d;++f)S[f].push(n)}function i(t){return function(t,e,i){return t<e?e:t>i?i:t}(255*t,0,255)}function r(t,e,i,r,n,s,a,h){for(var u=new function t(e,i,r,n){this.p0=e,this.c0=i,this.c1=r,this.p1=n,this.toQuadratic=function(){return{x:this.p0.x,y:this.p0.y,x1:this.p1.x,y1:this.p1.y,cx:(3*(this.c0.x+this.c1.x)-(this.p0.x+this.p1.x))/4,cy:(3*(this.c0.y+this.c1.y)-(this.p0.y+this.p1.y))/4}},this.quadError=function(){return o.Vector.sub(o.Vector.sub(this.p1,this.p0),o.Vector.mult(o.Vector.sub(this.c1,this.c0),3)).mag()/2},this.split=function(e){var i=o.Vector.lerp(this.p0,this.c0,e),r=o.Vector.lerp(this.c0,this.c1,e),n=o.Vector.lerp(i,r,e);this.c1=o.Vector.lerp(this.c1,this.p1,e),this.c0=o.Vector.lerp(r,this.c1,e);var s=o.Vector.lerp(n,this.c0,e),a=new t(this.p0,i,n,s);return this.p0=s,a},this.splitInflections=function(){var t=o.Vector.sub(this.c0,this.p0),e=o.Vector.sub(o.Vector.sub(this.c1,this.c0),t),i=o.Vector.sub(o.Vector.sub(o.Vector.sub(this.p1,this.c1),t),o.Vector.mult(e,2)),r=[],n=e.x*i.y-e.y*i.x;if(0!==n){var s=t.x*i.y-t.y*i.x,a=t.x*e.y-t.y*e.x,h=s*s-4*n*a;if(h>=0){n<0&&(n=-n,s=-s,a=-a);var l=Math.sqrt(h),u=(-s-l)/(2*n),c=(-s+l)/(2*n);u>0&&u<1&&(r.push(this.split(u)),c=1-(1-c)/(1-u)),c>0&&c<1&&r.push(this.split(c))}}return r.push(this),r}}(new o.Vector(t,e),new o.Vector(i,r),new o.Vector(n,s),new o.Vector(a,h)).splitInflections(),c=[],p=30/l,d=0;d<u.length;d++){for(var f,m=u[d],y=[];!((f=p/m.quadError())>=.125);){var v=Math.pow(f,1/3),g=m.split(v),_=m.split(1-v/(1-v));c.push(g),y.push(m),m=_}f<1&&c.push(m.split(.5)),c.push(m),Array.prototype.push.apply(c,y.reverse())}return c}function s(t,i,r,n){e([t,r],[i,n],{x:t,y:i,cx:(t+r)/2,cy:(i+n)/2})}function u(t,e,i,r){return Math.abs(i-t)<1e-5&&Math.abs(r-e)<1e-5}function c(t,e,i){for(var r=t.length,o=e.findImage(r),s=o.index,a=0,h=0;h<r;++h)a+=t[h].length;for(var l=i.findImage(a),u=0;u<r;++u){var c=t[u],p=c.length,d=l.index;n(o,d>>7,127&d,p>>7,127&p);for(var f=0;f<p;++f){var m=c[f]+V;n(l,m>>7,127&m,0,0)}}return{cellImageInfo:l,dimOffset:s,dimImageInfo:o}}var p=this.glyphInfos[t.index];if(p)return p;var d=t.getBoundingBox(),f=d.x1,m=d.y1,y=d.x2-f,v=d.y2-m,g=t.path.commands;if(0===y||0===v||!g.length)return this.glyphInfos[t.index]={};var _,b=[],S=[],x=[];for(_=a-1;_>=0;--_)x.push([]);for(_=h-1;_>=0;--_)S.push([]);for(var w,T,A,M,P=0;P<g.length;++P){var E=g[P],k=(E.x-f)/y,C=(E.y-m)/v;if(!u(w,T,k,C)){switch(E.type){case"M":A=k,M=C;break;case"L":s(w,T,k,C);break;case"Q":var R=(E.x1-f)/y,O=(E.y1-m)/v;e([w,k,R],[T,C,O],{x:w,y:T,cx:R,cy:O});break;case"Z":u(w,T,A,M)?b.push({x:w,y:T}):(s(w,T,A,M),b.push({x:A,y:M}));break;case"C":for(var L=(E.x1-f)/y,F=(E.y1-m)/v,I=(E.x2-f)/y,D=(E.y2-m)/v,U=r(w,T,L,F,I,D,k,C),B=0;B<U.length;B++){var N=U[B].toQuadratic();e([N.x,N.x1,N.cx],[N.y,N.y1,N.cy],N)}break;default:throw new Error("unknown command type: "+E.type)}w=k,T=C}}for(var G=b.length,q=this.strokeImageInfos.findImage(G),V=q.index,j=0;j<G;++j){var z=b[j];n(q,i(z.x),i(z.y),i(z.cx),i(z.cy))}return(p=this.glyphInfos[t.index]={glyph:t,uGlyphRect:[d.x1,-d.y1,d.x2,-d.y2],strokeImageInfo:q,strokes:b,colInfo:c(x,this.colDimImageInfos,this.colCellImageInfos),rowInfo:c(S,this.rowDimImageInfos,this.rowCellImageInfos)}).uGridOffset=[p.colInfo.dimOffset,p.rowInfo.dimOffset],p}};o.RendererGL.prototype._renderText=function(t,e,i,r,n){if(!(r>=n)&&this._doFill){if(!this._isOpenType())return console.log("WEBGL: only opentype fonts are supported"),t;t.push();var l=this.curFillShader,c=this._doStroke,p=this.drawMode;this.curFillShader=null,this._doStroke=!1,this.drawMode=s.TEXTURE;var d=this._textFont.font,f=this._textFont._fontInfo;f||(f=this._textFont._fontInfo=new u(d));var m=this._textFont._handleAlignment(this,e,i,r),y=this._textSize,v=y/d.unitsPerEm;this.translate(m.x,m.y,0),this.scale(v,v,1);var g=this.GL,_=!this._defaultFontShader,b=this.setFillShader(this._getFontShader());_&&(b.setUniform("uGridImageSize",[64,64]),b.setUniform("uCellsImageSize",[64,64]),b.setUniform("uStrokeImageSize",[64,64]),b.setUniform("uGridSize",[a,h])),this._applyColorBlend(this.curFillColor);var S=this.gHash.glyph;if(!S){var x=this._textGeom=new o.Geometry(1,1,function(){for(var t=0;t<=1;t++)for(var e=0;e<=1;e++)this.vertices.push(new o.Vector(e,t,0)),this.uvs.push(e,t)});x.computeFaces().computeNormals(),S=this.createBuffers("glyph",x)}this._bindBuffer(S.vertexBuffer,g.ARRAY_BUFFER),b.enableAttrib(b.attributes.aPosition.location,3,g.FLOAT,!1,0,0),this._bindBuffer(S.indexBuffer,g.ELEMENT_ARRAY_BUFFER),this._bindBuffer(S.uvBuffer,g.ARRAY_BUFFER),b.enableAttrib(b.attributes.aTexCoord.location,2,g.FLOAT,!1,0,0),b.setUniform("uMaterialColor",this.curFillColor);try{for(var w=0,T=null,A=!1,M=d.stringToGlyphs(e),P=0;P<M.length;++P){var E=M[P];T&&(w+=d.getKerningValue(T,E));var k=f.getGlyphInfo(E);if(k.uGlyphRect){var C=k.rowInfo,R=k.colInfo;b.setUniform("uSamplerStrokes",k.strokeImageInfo.imageData),b.setUniform("uSamplerRowStrokes",C.cellImageInfo.imageData),b.setUniform("uSamplerRows",C.dimImageInfo.imageData),b.setUniform("uSamplerColStrokes",R.cellImageInfo.imageData),b.setUniform("uSamplerCols",R.dimImageInfo.imageData),b.setUniform("uGridOffset",k.uGridOffset),b.setUniform("uGlyphRect",k.uGlyphRect),b.setUniform("uGlyphOffset",w),A?b.bindTextures():(A=!0,b.bindShader()),g.drawElements(g.TRIANGLES,6,this.GL.UNSIGNED_SHORT,0)}w+=E.advanceWidth,T=E}}finally{b.unbindShader(),this.curFillShader=l,this._doStroke=c,this.drawMode=p,t.pop()}return this._pInst._pixelsDirty=!0,t}}},{"../core/constants":18,"../core/main":24,"./p5.RendererGL":74,"./p5.Shader":75}]},{},[13])(13)}).call(this,i(4))},function(t,e,i){var r,n,o;
/**
 *  StartAudioContext.js
 *  @author Yotam Mann
 *  @license http://opensource.org/licenses/MIT MIT License
 *  @copyright 2016 Yotam Mann
 */n=[],void 0===(o="function"==typeof(r=function(){var t=function(t,e){this._dragged=!1,this._element=t,this._bindedMove=this._moved.bind(this),this._bindedEnd=this._ended.bind(this,e),t.addEventListener("touchstart",this._bindedEnd),t.addEventListener("touchmove",this._bindedMove),t.addEventListener("touchend",this._bindedEnd),t.addEventListener("mouseup",this._bindedEnd)};function e(t){return"running"===t.state}return t.prototype._moved=function(t){this._dragged=!0},t.prototype._ended=function(t){this._dragged||function(t){var e=t.createBuffer(1,1,t.sampleRate),i=t.createBufferSource();i.buffer=e,i.connect(t.destination),i.start(0),t.resume&&t.resume()}(t),this._dragged=!1},t.prototype.dispose=function(){this._element.removeEventListener("touchstart",this._bindedEnd),this._element.removeEventListener("touchmove",this._bindedMove),this._element.removeEventListener("touchend",this._bindedEnd),this._element.removeEventListener("mouseup",this._bindedEnd),this._bindedMove=null,this._bindedEnd=null,this._element=null},function(i,r,n){var o=new Promise(function(t){!function(t,i){e(t)?i():function r(){e(t)?i():(requestAnimationFrame(r),t.resume&&t.resume())}()}(i,t)}),s=[];return r||(r=document.body),function e(i,r,n){if(Array.isArray(i)||NodeList&&i instanceof NodeList)for(var o=0;o<i.length;o++)e(i[o],r,n);else if("string"==typeof i)e(document.querySelectorAll(i),r,n);else if(i.jquery&&"function"==typeof i.toArray)e(i.toArray(),r,n);else if(Element&&i instanceof Element){var s=new t(i,n);r.push(s)}}(r,s,i),o.then(function(){for(var t=0;t<s.length;t++)s[t].dispose();s=null,n&&n()}),o}})?r.apply(e,n):r)||(t.exports=o)},function(t,e,i){"use strict";i.r(e);var r=i(1),n=i.n(r),o=i(0),s=i.n(o),a=i(2),h=i.n(a);const l=t=>{var e=new s.a.Noise("pink").start();e.volume.value=-20;var i=new s.a.AutoFilter({frequency:"8m",min:800,max:5e3}).connect(s.a.Master);e.connect(i),i.start();var r=new s.a.Chorus(.8,2.5,.2).toMaster();let n=new s.a.FMSynth({harmonicity:10,modulationIndex:80,detune:0,oscillator:{type:"sine"},envelope:{attack:.001,decay:.003,sustain:.06,release:.3},modulation:{type:"square"},modulationEnvelope:{attack:.01,decay:.02,sustain:.03,release:.033},portamento:.01}).connect(r);function o(e,i){this.ex=0,this.ey=0,this.easing=.05,this.red=t.random(100,255),this.g=t.random(255),this.b=t.random(255),this.canPlay=!0,this.alpha=0,2==arguments.length?(this.pos=t.createVector(e,i),this.stuck=!0):(this.pos=t.createVector(t.random(-150,150),t.random(-150,150)),this.stuck=!1),this.r=c,this.walk=function(){var e=t.createVector(t.random(-.5,.5),t.random(-.5,.5));this.pos.add(e),t.constrain(this.pos.x,-150,150),t.constrain(this.pos.y,-150,150)},this.checkStuck=function(t){for(var e=0;e<t.length;e++){if(a(this.pos,t[e].pos)<this.r*this.r+t[e].r*t[e].r+2*t[e].r*this.r)return this.stuck=!0,this.canPlay&&(n.triggerAttackRelease(s.a.Midi(10*this.r+70).toFrequency(),"128n"),this.alpha=255,this.canPlay=!1),!0}return!1},this.setHue=function(t){this.hu=t},this.show=function(){t.noStroke(),this.stuck&&void 0!==this.hu?t.fill(255):t.fill(this.b,220-t.dist(this.pos.x,this.pos.y,0,0)),t.push();let e=this.pos.x-this.ex;this.ex+=e*this.easing;let i=this.pos.y-this.ey;this.ey+=i*this.easing,t.translate(this.ex,this.ey,this.pos.z),t.noStroke(),this.stuck?(t.sphere(this.r),t.fill(255,0,0,this.alpha),t.sphere(1.1*this.r)):t.sphere(this.r/2),t.pop(),this.alpha-=4}}function a(t,e){var i=e.x-t.x,r=e.y-t.y;return i*i+r*r}n.volume.value=0;var l=[],u=[],c=5,p=0;t.setup=(()=>{t.createCanvas(800,800,t.WEBGL);l[0]=new o(0,0),c*=.995;for(var e=0;e<500;e++)u[e]=new o,c*=.995}),t.draw=(()=>{t.camera(-100,-100,400-t.frameCount/80,0,0,0,0,1,0),t.background(0),t.smooth(),t.rotateZ(t.frameCount/600);for(var e=0;e<l.length;e++)l[e].show();for(e=0;e<u.length;e++)u[e].show();for(var i=0;i<100;i++)for(e=u.length-1;e>=0;e--)u[e].walk(),u[e].checkStuck(l)&&(u[e].setHue(p%360),p+=2,l.push(u[e]),u.splice(e,1));for(u[u.length-1].r;u.length<500&&c>1;)c*=.995,u.push(new o);t.fill(255),t.sphere(6)}),t.keyPressed=(()=>{"m"==t.key&&t.save(Date.now()+".jpg")}),t.mousePressed=(()=>{h()(s.a.context).then(function(){})})};e.default=l,new n.a(l)},function(t,e){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(i=window)}t.exports=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,